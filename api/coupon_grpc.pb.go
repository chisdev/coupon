// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: coupon/api/coupon.proto

package coupon

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Coupon_HealCheck_FullMethodName = "/coupon.Coupon/HealCheck"
)

// CouponClient is the client API for Coupon service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CouponClient interface {
	HealCheck(ctx context.Context, in *HealCheckRequest, opts ...grpc.CallOption) (*HealCheckResponse, error)
}

type couponClient struct {
	cc grpc.ClientConnInterface
}

func NewCouponClient(cc grpc.ClientConnInterface) CouponClient {
	return &couponClient{cc}
}

func (c *couponClient) HealCheck(ctx context.Context, in *HealCheckRequest, opts ...grpc.CallOption) (*HealCheckResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HealCheckResponse)
	err := c.cc.Invoke(ctx, Coupon_HealCheck_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CouponServer is the server API for Coupon service.
// All implementations must embed UnimplementedCouponServer
// for forward compatibility.
type CouponServer interface {
	HealCheck(context.Context, *HealCheckRequest) (*HealCheckResponse, error)
	mustEmbedUnimplementedCouponServer()
}

// UnimplementedCouponServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCouponServer struct{}

func (UnimplementedCouponServer) HealCheck(context.Context, *HealCheckRequest) (*HealCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealCheck not implemented")
}
func (UnimplementedCouponServer) mustEmbedUnimplementedCouponServer() {}
func (UnimplementedCouponServer) testEmbeddedByValue()                {}

// UnsafeCouponServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CouponServer will
// result in compilation errors.
type UnsafeCouponServer interface {
	mustEmbedUnimplementedCouponServer()
}

func RegisterCouponServer(s grpc.ServiceRegistrar, srv CouponServer) {
	// If the following call pancis, it indicates UnimplementedCouponServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Coupon_ServiceDesc, srv)
}

func _Coupon_HealCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CouponServer).HealCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Coupon_HealCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CouponServer).HealCheck(ctx, req.(*HealCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Coupon_ServiceDesc is the grpc.ServiceDesc for Coupon service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Coupon_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "coupon.Coupon",
	HandlerType: (*CouponServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HealCheck",
			Handler:    _Coupon_HealCheck_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "coupon/api/coupon.proto",
}

const (
	CouponCms_CreateMileStone_FullMethodName = "/coupon.CouponCms/CreateMileStone"
	CouponCms_ListMileStone_FullMethodName   = "/coupon.CouponCms/ListMileStone"
	CouponCms_DeleteMileStone_FullMethodName = "/coupon.CouponCms/DeleteMileStone"
)

// CouponCmsClient is the client API for CouponCms service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CouponCmsClient interface {
	// Milestone API
	CreateMileStone(ctx context.Context, in *CreateMileStoneRequest, opts ...grpc.CallOption) (*CreateMileStoneResponse, error)
	ListMileStone(ctx context.Context, in *ListMileStoneRequest, opts ...grpc.CallOption) (*ListMileStoneResponse, error)
	// rpc UpdateMileStone (UpdateMileStoneRequest) returns (UpdateMileStoneResponse);
	// rpc ListMileStone   (ListMileStoneRequest) returns (ListMileStoneResponse);
	DeleteMileStone(ctx context.Context, in *DeleteMileStoneRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type couponCmsClient struct {
	cc grpc.ClientConnInterface
}

func NewCouponCmsClient(cc grpc.ClientConnInterface) CouponCmsClient {
	return &couponCmsClient{cc}
}

func (c *couponCmsClient) CreateMileStone(ctx context.Context, in *CreateMileStoneRequest, opts ...grpc.CallOption) (*CreateMileStoneResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateMileStoneResponse)
	err := c.cc.Invoke(ctx, CouponCms_CreateMileStone_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *couponCmsClient) ListMileStone(ctx context.Context, in *ListMileStoneRequest, opts ...grpc.CallOption) (*ListMileStoneResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListMileStoneResponse)
	err := c.cc.Invoke(ctx, CouponCms_ListMileStone_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *couponCmsClient) DeleteMileStone(ctx context.Context, in *DeleteMileStoneRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, CouponCms_DeleteMileStone_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CouponCmsServer is the server API for CouponCms service.
// All implementations must embed UnimplementedCouponCmsServer
// for forward compatibility.
type CouponCmsServer interface {
	// Milestone API
	CreateMileStone(context.Context, *CreateMileStoneRequest) (*CreateMileStoneResponse, error)
	ListMileStone(context.Context, *ListMileStoneRequest) (*ListMileStoneResponse, error)
	// rpc UpdateMileStone (UpdateMileStoneRequest) returns (UpdateMileStoneResponse);
	// rpc ListMileStone   (ListMileStoneRequest) returns (ListMileStoneResponse);
	DeleteMileStone(context.Context, *DeleteMileStoneRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedCouponCmsServer()
}

// UnimplementedCouponCmsServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCouponCmsServer struct{}

func (UnimplementedCouponCmsServer) CreateMileStone(context.Context, *CreateMileStoneRequest) (*CreateMileStoneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMileStone not implemented")
}
func (UnimplementedCouponCmsServer) ListMileStone(context.Context, *ListMileStoneRequest) (*ListMileStoneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMileStone not implemented")
}
func (UnimplementedCouponCmsServer) DeleteMileStone(context.Context, *DeleteMileStoneRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMileStone not implemented")
}
func (UnimplementedCouponCmsServer) mustEmbedUnimplementedCouponCmsServer() {}
func (UnimplementedCouponCmsServer) testEmbeddedByValue()                   {}

// UnsafeCouponCmsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CouponCmsServer will
// result in compilation errors.
type UnsafeCouponCmsServer interface {
	mustEmbedUnimplementedCouponCmsServer()
}

func RegisterCouponCmsServer(s grpc.ServiceRegistrar, srv CouponCmsServer) {
	// If the following call pancis, it indicates UnimplementedCouponCmsServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CouponCms_ServiceDesc, srv)
}

func _CouponCms_CreateMileStone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMileStoneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CouponCmsServer).CreateMileStone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CouponCms_CreateMileStone_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CouponCmsServer).CreateMileStone(ctx, req.(*CreateMileStoneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CouponCms_ListMileStone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMileStoneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CouponCmsServer).ListMileStone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CouponCms_ListMileStone_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CouponCmsServer).ListMileStone(ctx, req.(*ListMileStoneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CouponCms_DeleteMileStone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMileStoneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CouponCmsServer).DeleteMileStone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CouponCms_DeleteMileStone_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CouponCmsServer).DeleteMileStone(ctx, req.(*DeleteMileStoneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CouponCms_ServiceDesc is the grpc.ServiceDesc for CouponCms service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CouponCms_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "coupon.CouponCms",
	HandlerType: (*CouponCmsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateMileStone",
			Handler:    _CouponCms_CreateMileStone_Handler,
		},
		{
			MethodName: "ListMileStone",
			Handler:    _CouponCms_ListMileStone_Handler,
		},
		{
			MethodName: "DeleteMileStone",
			Handler:    _CouponCms_DeleteMileStone_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "coupon/api/coupon.proto",
}
