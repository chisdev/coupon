// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: coupon/api/coupon.proto

package coupon

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on SortMethod with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SortMethod) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SortMethod with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SortMethodMultiError, or
// nil if none found.
func (m *SortMethod) ValidateAll() error {
	return m.validate(true)
}

func (m *SortMethod) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := SortMethodValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Type

	if len(errors) > 0 {
		return SortMethodMultiError(errors)
	}

	return nil
}

// SortMethodMultiError is an error wrapping multiple validation errors
// returned by SortMethod.ValidateAll() if the designated constraints aren't met.
type SortMethodMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SortMethodMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SortMethodMultiError) AllErrors() []error { return m }

// SortMethodValidationError is the validation error returned by
// SortMethod.Validate if the designated constraints aren't met.
type SortMethodValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SortMethodValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SortMethodValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SortMethodValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SortMethodValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SortMethodValidationError) ErrorName() string { return "SortMethodValidationError" }

// Error satisfies the builtin error interface
func (e SortMethodValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSortMethod.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SortMethodValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SortMethodValidationError{}

// Validate checks the field values on Reward with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Reward) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Reward with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in RewardMultiError, or nil if none found.
func (m *Reward) ValidateAll() error {
	return m.validate(true)
}

func (m *Reward) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for CouponValue

	// no validation rules for MilestoneId

	// no validation rules for CouponType

	if m.ExpiredDuration != nil {
		// no validation rules for ExpiredDuration
	}

	if m.CurrencyId != nil {
		// no validation rules for CurrencyId
	}

	if m.UsageLimit != nil {
		// no validation rules for UsageLimit
	}

	if len(errors) > 0 {
		return RewardMultiError(errors)
	}

	return nil
}

// RewardMultiError is an error wrapping multiple validation errors returned by
// Reward.ValidateAll() if the designated constraints aren't met.
type RewardMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RewardMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RewardMultiError) AllErrors() []error { return m }

// RewardValidationError is the validation error returned by Reward.Validate if
// the designated constraints aren't met.
type RewardValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RewardValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RewardValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RewardValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RewardValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RewardValidationError) ErrorName() string { return "RewardValidationError" }

// Error satisfies the builtin error interface
func (e RewardValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReward.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RewardValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RewardValidationError{}

// Validate checks the field values on Milestone with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Milestone) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Milestone with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MilestoneMultiError, or nil
// if none found.
func (m *Milestone) ValidateAll() error {
	return m.validate(true)
}

func (m *Milestone) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Type

	// no validation rules for StoreId

	for idx, item := range m.GetRewards() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, MilestoneValidationError{
						field:  fmt.Sprintf("Rewards[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, MilestoneValidationError{
						field:  fmt.Sprintf("Rewards[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MilestoneValidationError{
					field:  fmt.Sprintf("Rewards[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Threshold != nil {
		// no validation rules for Threshold
	}

	if m.Step != nil {
		// no validation rules for Step
	}

	if len(errors) > 0 {
		return MilestoneMultiError(errors)
	}

	return nil
}

// MilestoneMultiError is an error wrapping multiple validation errors returned
// by Milestone.ValidateAll() if the designated constraints aren't met.
type MilestoneMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MilestoneMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MilestoneMultiError) AllErrors() []error { return m }

// MilestoneValidationError is the validation error returned by
// Milestone.Validate if the designated constraints aren't met.
type MilestoneValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MilestoneValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MilestoneValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MilestoneValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MilestoneValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MilestoneValidationError) ErrorName() string { return "MilestoneValidationError" }

// Error satisfies the builtin error interface
func (e MilestoneValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMilestone.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MilestoneValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MilestoneValidationError{}

// Validate checks the field values on StoreCoupon with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *StoreCoupon) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StoreCoupon with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in StoreCouponMultiError, or
// nil if none found.
func (m *StoreCoupon) ValidateAll() error {
	return m.validate(true)
}

func (m *StoreCoupon) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Code

	// no validation rules for StoreId

	// no validation rules for CouponType

	// no validation rules for Status

	// no validation rules for UsageLimit

	// no validation rules for UsedCount

	// no validation rules for ReservedCount

	if m.ExpiredAt != nil {

		if all {
			switch v := interface{}(m.GetExpiredAt()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, StoreCouponValidationError{
						field:  "ExpiredAt",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, StoreCouponValidationError{
						field:  "ExpiredAt",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetExpiredAt()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StoreCouponValidationError{
					field:  "ExpiredAt",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.CustomerId != nil {
		// no validation rules for CustomerId
	}

	if m.CurrencyId != nil {
		// no validation rules for CurrencyId
	}

	if len(errors) > 0 {
		return StoreCouponMultiError(errors)
	}

	return nil
}

// StoreCouponMultiError is an error wrapping multiple validation errors
// returned by StoreCoupon.ValidateAll() if the designated constraints aren't met.
type StoreCouponMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StoreCouponMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StoreCouponMultiError) AllErrors() []error { return m }

// StoreCouponValidationError is the validation error returned by
// StoreCoupon.Validate if the designated constraints aren't met.
type StoreCouponValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StoreCouponValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StoreCouponValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StoreCouponValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StoreCouponValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StoreCouponValidationError) ErrorName() string { return "StoreCouponValidationError" }

// Error satisfies the builtin error interface
func (e StoreCouponValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStoreCoupon.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StoreCouponValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StoreCouponValidationError{}
