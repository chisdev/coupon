// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: coupon/api/coupon.proto

package coupon

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on SortMethod with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SortMethod) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SortMethod with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SortMethodMultiError, or
// nil if none found.
func (m *SortMethod) ValidateAll() error {
	return m.validate(true)
}

func (m *SortMethod) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := SortMethodValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Type

	if len(errors) > 0 {
		return SortMethodMultiError(errors)
	}

	return nil
}

// SortMethodMultiError is an error wrapping multiple validation errors
// returned by SortMethod.ValidateAll() if the designated constraints aren't met.
type SortMethodMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SortMethodMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SortMethodMultiError) AllErrors() []error { return m }

// SortMethodValidationError is the validation error returned by
// SortMethod.Validate if the designated constraints aren't met.
type SortMethodValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SortMethodValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SortMethodValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SortMethodValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SortMethodValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SortMethodValidationError) ErrorName() string { return "SortMethodValidationError" }

// Error satisfies the builtin error interface
func (e SortMethodValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSortMethod.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SortMethodValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SortMethodValidationError{}

// Validate checks the field values on CheckCouponRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CheckCouponRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CheckCouponRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CheckCouponRequestMultiError, or nil if none found.
func (m *CheckCouponRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CheckCouponRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for UserId

	if m.StoreId != nil {
		// no validation rules for StoreId
	}

	if len(errors) > 0 {
		return CheckCouponRequestMultiError(errors)
	}

	return nil
}

// CheckCouponRequestMultiError is an error wrapping multiple validation errors
// returned by CheckCouponRequest.ValidateAll() if the designated constraints
// aren't met.
type CheckCouponRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CheckCouponRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CheckCouponRequestMultiError) AllErrors() []error { return m }

// CheckCouponRequestValidationError is the validation error returned by
// CheckCouponRequest.Validate if the designated constraints aren't met.
type CheckCouponRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckCouponRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckCouponRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckCouponRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckCouponRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckCouponRequestValidationError) ErrorName() string {
	return "CheckCouponRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CheckCouponRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckCouponRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckCouponRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckCouponRequestValidationError{}

// Validate checks the field values on CheckCouponResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CheckCouponResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CheckCouponResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CheckCouponResponseMultiError, or nil if none found.
func (m *CheckCouponResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CheckCouponResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Valid

	// no validation rules for Message

	if len(errors) > 0 {
		return CheckCouponResponseMultiError(errors)
	}

	return nil
}

// CheckCouponResponseMultiError is an error wrapping multiple validation
// errors returned by CheckCouponResponse.ValidateAll() if the designated
// constraints aren't met.
type CheckCouponResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CheckCouponResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CheckCouponResponseMultiError) AllErrors() []error { return m }

// CheckCouponResponseValidationError is the validation error returned by
// CheckCouponResponse.Validate if the designated constraints aren't met.
type CheckCouponResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckCouponResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckCouponResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckCouponResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckCouponResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckCouponResponseValidationError) ErrorName() string {
	return "CheckCouponResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CheckCouponResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckCouponResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckCouponResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckCouponResponseValidationError{}
