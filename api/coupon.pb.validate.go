// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: coupon/api/coupon.proto

package coupon

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on SortMethod with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SortMethod) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SortMethod with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SortMethodMultiError, or
// nil if none found.
func (m *SortMethod) ValidateAll() error {
	return m.validate(true)
}

func (m *SortMethod) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := SortMethodValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Type

	if len(errors) > 0 {
		return SortMethodMultiError(errors)
	}

	return nil
}

// SortMethodMultiError is an error wrapping multiple validation errors
// returned by SortMethod.ValidateAll() if the designated constraints aren't met.
type SortMethodMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SortMethodMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SortMethodMultiError) AllErrors() []error { return m }

// SortMethodValidationError is the validation error returned by
// SortMethod.Validate if the designated constraints aren't met.
type SortMethodValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SortMethodValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SortMethodValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SortMethodValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SortMethodValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SortMethodValidationError) ErrorName() string { return "SortMethodValidationError" }

// Error satisfies the builtin error interface
func (e SortMethodValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSortMethod.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SortMethodValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SortMethodValidationError{}

// Validate checks the field values on Reward with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Reward) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Reward with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in RewardMultiError, or nil if none found.
func (m *Reward) ValidateAll() error {
	return m.validate(true)
}

func (m *Reward) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for CouponValue

	// no validation rules for MilestoneId

	// no validation rules for CouponType

	if m.ExpiredDuration != nil {
		// no validation rules for ExpiredDuration
	}

	if m.CurrencyId != nil {
		// no validation rules for CurrencyId
	}

	if m.UsageLimit != nil {
		// no validation rules for UsageLimit
	}

	if len(errors) > 0 {
		return RewardMultiError(errors)
	}

	return nil
}

// RewardMultiError is an error wrapping multiple validation errors returned by
// Reward.ValidateAll() if the designated constraints aren't met.
type RewardMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RewardMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RewardMultiError) AllErrors() []error { return m }

// RewardValidationError is the validation error returned by Reward.Validate if
// the designated constraints aren't met.
type RewardValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RewardValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RewardValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RewardValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RewardValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RewardValidationError) ErrorName() string { return "RewardValidationError" }

// Error satisfies the builtin error interface
func (e RewardValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReward.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RewardValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RewardValidationError{}

// Validate checks the field values on Milestone with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Milestone) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Milestone with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MilestoneMultiError, or nil
// if none found.
func (m *Milestone) ValidateAll() error {
	return m.validate(true)
}

func (m *Milestone) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Type

	// no validation rules for StoreId

	for idx, item := range m.GetRewards() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, MilestoneValidationError{
						field:  fmt.Sprintf("Rewards[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, MilestoneValidationError{
						field:  fmt.Sprintf("Rewards[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MilestoneValidationError{
					field:  fmt.Sprintf("Rewards[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Threshold != nil {
		// no validation rules for Threshold
	}

	if m.Step != nil {
		// no validation rules for Step
	}

	if len(errors) > 0 {
		return MilestoneMultiError(errors)
	}

	return nil
}

// MilestoneMultiError is an error wrapping multiple validation errors returned
// by Milestone.ValidateAll() if the designated constraints aren't met.
type MilestoneMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MilestoneMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MilestoneMultiError) AllErrors() []error { return m }

// MilestoneValidationError is the validation error returned by
// Milestone.Validate if the designated constraints aren't met.
type MilestoneValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MilestoneValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MilestoneValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MilestoneValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MilestoneValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MilestoneValidationError) ErrorName() string { return "MilestoneValidationError" }

// Error satisfies the builtin error interface
func (e MilestoneValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMilestone.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MilestoneValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MilestoneValidationError{}

// Validate checks the field values on StoreCoupon with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *StoreCoupon) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StoreCoupon with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in StoreCouponMultiError, or
// nil if none found.
func (m *StoreCoupon) ValidateAll() error {
	return m.validate(true)
}

func (m *StoreCoupon) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Code

	// no validation rules for StoreId

	// no validation rules for CouponType

	// no validation rules for Status

	// no validation rules for UsedCount

	// no validation rules for ReservedCount

	for idx, item := range m.GetCouponUsages() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, StoreCouponValidationError{
						field:  fmt.Sprintf("CouponUsages[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, StoreCouponValidationError{
						field:  fmt.Sprintf("CouponUsages[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StoreCouponValidationError{
					field:  fmt.Sprintf("CouponUsages[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.ExpiredAt != nil {

		if all {
			switch v := interface{}(m.GetExpiredAt()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, StoreCouponValidationError{
						field:  "ExpiredAt",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, StoreCouponValidationError{
						field:  "ExpiredAt",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetExpiredAt()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StoreCouponValidationError{
					field:  "ExpiredAt",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.CustomerId != nil {
		// no validation rules for CustomerId
	}

	if m.CurrencyId != nil {
		// no validation rules for CurrencyId
	}

	if m.UsageLimit != nil {
		// no validation rules for UsageLimit
	}

	if len(errors) > 0 {
		return StoreCouponMultiError(errors)
	}

	return nil
}

// StoreCouponMultiError is an error wrapping multiple validation errors
// returned by StoreCoupon.ValidateAll() if the designated constraints aren't met.
type StoreCouponMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StoreCouponMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StoreCouponMultiError) AllErrors() []error { return m }

// StoreCouponValidationError is the validation error returned by
// StoreCoupon.Validate if the designated constraints aren't met.
type StoreCouponValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StoreCouponValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StoreCouponValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StoreCouponValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StoreCouponValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StoreCouponValidationError) ErrorName() string { return "StoreCouponValidationError" }

// Error satisfies the builtin error interface
func (e StoreCouponValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStoreCoupon.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StoreCouponValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StoreCouponValidationError{}

// Validate checks the field values on CouponUsage with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CouponUsage) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CouponUsage with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CouponUsageMultiError, or
// nil if none found.
func (m *CouponUsage) ValidateAll() error {
	return m.validate(true)
}

func (m *CouponUsage) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for BookingId

	// no validation rules for Status

	if m.CustomerId != nil {
		// no validation rules for CustomerId
	}

	if m.ReservedAt != nil {

		if all {
			switch v := interface{}(m.GetReservedAt()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CouponUsageValidationError{
						field:  "ReservedAt",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CouponUsageValidationError{
						field:  "ReservedAt",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetReservedAt()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CouponUsageValidationError{
					field:  "ReservedAt",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.UsedAt != nil {

		if all {
			switch v := interface{}(m.GetUsedAt()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CouponUsageValidationError{
						field:  "UsedAt",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CouponUsageValidationError{
						field:  "UsedAt",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetUsedAt()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CouponUsageValidationError{
					field:  "UsedAt",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CouponUsageMultiError(errors)
	}

	return nil
}

// CouponUsageMultiError is an error wrapping multiple validation errors
// returned by CouponUsage.ValidateAll() if the designated constraints aren't met.
type CouponUsageMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CouponUsageMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CouponUsageMultiError) AllErrors() []error { return m }

// CouponUsageValidationError is the validation error returned by
// CouponUsage.Validate if the designated constraints aren't met.
type CouponUsageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CouponUsageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CouponUsageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CouponUsageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CouponUsageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CouponUsageValidationError) ErrorName() string { return "CouponUsageValidationError" }

// Error satisfies the builtin error interface
func (e CouponUsageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCouponUsage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CouponUsageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CouponUsageValidationError{}

// Validate checks the field values on Proress with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Proress) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Proress with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ProressMultiError, or nil if none found.
func (m *Proress) ValidateAll() error {
	return m.validate(true)
}

func (m *Proress) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for MilestoneId

	// no validation rules for Progress

	// no validation rules for PassCount

	if len(errors) > 0 {
		return ProressMultiError(errors)
	}

	return nil
}

// ProressMultiError is an error wrapping multiple validation errors returned
// by Proress.ValidateAll() if the designated constraints aren't met.
type ProressMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProressMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProressMultiError) AllErrors() []error { return m }

// ProressValidationError is the validation error returned by Proress.Validate
// if the designated constraints aren't met.
type ProressValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProressValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProressValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProressValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProressValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProressValidationError) ErrorName() string { return "ProressValidationError" }

// Error satisfies the builtin error interface
func (e ProressValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProress.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProressValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProressValidationError{}

// Validate checks the field values on MilestoneProgress with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *MilestoneProgress) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MilestoneProgress with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MilestoneProgressMultiError, or nil if none found.
func (m *MilestoneProgress) ValidateAll() error {
	return m.validate(true)
}

func (m *MilestoneProgress) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMilestone()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MilestoneProgressValidationError{
					field:  "Milestone",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MilestoneProgressValidationError{
					field:  "Milestone",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMilestone()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MilestoneProgressValidationError{
				field:  "Milestone",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Progress

	if len(errors) > 0 {
		return MilestoneProgressMultiError(errors)
	}

	return nil
}

// MilestoneProgressMultiError is an error wrapping multiple validation errors
// returned by MilestoneProgress.ValidateAll() if the designated constraints
// aren't met.
type MilestoneProgressMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MilestoneProgressMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MilestoneProgressMultiError) AllErrors() []error { return m }

// MilestoneProgressValidationError is the validation error returned by
// MilestoneProgress.Validate if the designated constraints aren't met.
type MilestoneProgressValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MilestoneProgressValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MilestoneProgressValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MilestoneProgressValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MilestoneProgressValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MilestoneProgressValidationError) ErrorName() string {
	return "MilestoneProgressValidationError"
}

// Error satisfies the builtin error interface
func (e MilestoneProgressValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMilestoneProgress.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MilestoneProgressValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MilestoneProgressValidationError{}

// Validate checks the field values on CreateMileStoneRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateMileStoneRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateMileStoneRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateMileStoneRequestMultiError, or nil if none found.
func (m *CreateMileStoneRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateMileStoneRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := CreateMileStoneRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetRewards() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateMileStoneRequestValidationError{
						field:  fmt.Sprintf("Rewards[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateMileStoneRequestValidationError{
						field:  fmt.Sprintf("Rewards[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateMileStoneRequestValidationError{
					field:  fmt.Sprintf("Rewards[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Threshold != nil {
		// no validation rules for Threshold
	}

	if m.Step != nil {
		// no validation rules for Step
	}

	if len(errors) > 0 {
		return CreateMileStoneRequestMultiError(errors)
	}

	return nil
}

// CreateMileStoneRequestMultiError is an error wrapping multiple validation
// errors returned by CreateMileStoneRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateMileStoneRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateMileStoneRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateMileStoneRequestMultiError) AllErrors() []error { return m }

// CreateMileStoneRequestValidationError is the validation error returned by
// CreateMileStoneRequest.Validate if the designated constraints aren't met.
type CreateMileStoneRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateMileStoneRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateMileStoneRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateMileStoneRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateMileStoneRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateMileStoneRequestValidationError) ErrorName() string {
	return "CreateMileStoneRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateMileStoneRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateMileStoneRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateMileStoneRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateMileStoneRequestValidationError{}

// Validate checks the field values on Currency with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Currency) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Currency with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CurrencyMultiError, or nil
// if none found.
func (m *Currency) ValidateAll() error {
	return m.validate(true)
}

func (m *Currency) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Code

	if len(errors) > 0 {
		return CurrencyMultiError(errors)
	}

	return nil
}

// CurrencyMultiError is an error wrapping multiple validation errors returned
// by Currency.ValidateAll() if the designated constraints aren't met.
type CurrencyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CurrencyMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CurrencyMultiError) AllErrors() []error { return m }

// CurrencyValidationError is the validation error returned by
// Currency.Validate if the designated constraints aren't met.
type CurrencyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CurrencyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CurrencyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CurrencyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CurrencyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CurrencyValidationError) ErrorName() string { return "CurrencyValidationError" }

// Error satisfies the builtin error interface
func (e CurrencyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCurrency.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CurrencyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CurrencyValidationError{}

// Validate checks the field values on CreateMileStoneResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateMileStoneResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateMileStoneResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateMileStoneResponseMultiError, or nil if none found.
func (m *CreateMileStoneResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateMileStoneResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMilestone()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateMileStoneResponseValidationError{
					field:  "Milestone",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateMileStoneResponseValidationError{
					field:  "Milestone",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMilestone()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateMileStoneResponseValidationError{
				field:  "Milestone",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateMileStoneResponseMultiError(errors)
	}

	return nil
}

// CreateMileStoneResponseMultiError is an error wrapping multiple validation
// errors returned by CreateMileStoneResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateMileStoneResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateMileStoneResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateMileStoneResponseMultiError) AllErrors() []error { return m }

// CreateMileStoneResponseValidationError is the validation error returned by
// CreateMileStoneResponse.Validate if the designated constraints aren't met.
type CreateMileStoneResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateMileStoneResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateMileStoneResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateMileStoneResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateMileStoneResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateMileStoneResponseValidationError) ErrorName() string {
	return "CreateMileStoneResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateMileStoneResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateMileStoneResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateMileStoneResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateMileStoneResponseValidationError{}

// Validate checks the field values on GetMileStoneRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetMileStoneRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetMileStoneRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetMileStoneRequestMultiError, or nil if none found.
func (m *GetMileStoneRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetMileStoneRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetMileStoneRequestMultiError(errors)
	}

	return nil
}

// GetMileStoneRequestMultiError is an error wrapping multiple validation
// errors returned by GetMileStoneRequest.ValidateAll() if the designated
// constraints aren't met.
type GetMileStoneRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetMileStoneRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetMileStoneRequestMultiError) AllErrors() []error { return m }

// GetMileStoneRequestValidationError is the validation error returned by
// GetMileStoneRequest.Validate if the designated constraints aren't met.
type GetMileStoneRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMileStoneRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMileStoneRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMileStoneRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMileStoneRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMileStoneRequestValidationError) ErrorName() string {
	return "GetMileStoneRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetMileStoneRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMileStoneRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMileStoneRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMileStoneRequestValidationError{}

// Validate checks the field values on GetMileStoneResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetMileStoneResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetMileStoneResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetMileStoneResponseMultiError, or nil if none found.
func (m *GetMileStoneResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetMileStoneResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMilestone()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetMileStoneResponseValidationError{
					field:  "Milestone",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetMileStoneResponseValidationError{
					field:  "Milestone",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMilestone()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetMileStoneResponseValidationError{
				field:  "Milestone",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetMileStoneResponseMultiError(errors)
	}

	return nil
}

// GetMileStoneResponseMultiError is an error wrapping multiple validation
// errors returned by GetMileStoneResponse.ValidateAll() if the designated
// constraints aren't met.
type GetMileStoneResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetMileStoneResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetMileStoneResponseMultiError) AllErrors() []error { return m }

// GetMileStoneResponseValidationError is the validation error returned by
// GetMileStoneResponse.Validate if the designated constraints aren't met.
type GetMileStoneResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMileStoneResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMileStoneResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMileStoneResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMileStoneResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMileStoneResponseValidationError) ErrorName() string {
	return "GetMileStoneResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetMileStoneResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMileStoneResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMileStoneResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMileStoneResponseValidationError{}

// Validate checks the field values on ListMileStoneRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListMileStoneRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListMileStoneRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListMileStoneRequestMultiError, or nil if none found.
func (m *ListMileStoneRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListMileStoneRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPageIndex() < 0 {
		err := ListMileStoneRequestValidationError{
			field:  "PageIndex",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetPageSize() < 0 {
		err := ListMileStoneRequestValidationError{
			field:  "PageSize",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetSortMethods() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListMileStoneRequestValidationError{
						field:  fmt.Sprintf("SortMethods[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListMileStoneRequestValidationError{
						field:  fmt.Sprintf("SortMethods[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListMileStoneRequestValidationError{
					field:  fmt.Sprintf("SortMethods[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListMileStoneRequestMultiError(errors)
	}

	return nil
}

// ListMileStoneRequestMultiError is an error wrapping multiple validation
// errors returned by ListMileStoneRequest.ValidateAll() if the designated
// constraints aren't met.
type ListMileStoneRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListMileStoneRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListMileStoneRequestMultiError) AllErrors() []error { return m }

// ListMileStoneRequestValidationError is the validation error returned by
// ListMileStoneRequest.Validate if the designated constraints aren't met.
type ListMileStoneRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListMileStoneRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListMileStoneRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListMileStoneRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListMileStoneRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListMileStoneRequestValidationError) ErrorName() string {
	return "ListMileStoneRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListMileStoneRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListMileStoneRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListMileStoneRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListMileStoneRequestValidationError{}

// Validate checks the field values on ListMileStoneResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListMileStoneResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListMileStoneResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListMileStoneResponseMultiError, or nil if none found.
func (m *ListMileStoneResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListMileStoneResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetMilestones() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListMileStoneResponseValidationError{
						field:  fmt.Sprintf("Milestones[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListMileStoneResponseValidationError{
						field:  fmt.Sprintf("Milestones[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListMileStoneResponseValidationError{
					field:  fmt.Sprintf("Milestones[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for TotalCount

	// no validation rules for TotalPages

	if all {
		switch v := interface{}(m.GetRequest()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListMileStoneResponseValidationError{
					field:  "Request",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListMileStoneResponseValidationError{
					field:  "Request",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRequest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListMileStoneResponseValidationError{
				field:  "Request",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListMileStoneResponseMultiError(errors)
	}

	return nil
}

// ListMileStoneResponseMultiError is an error wrapping multiple validation
// errors returned by ListMileStoneResponse.ValidateAll() if the designated
// constraints aren't met.
type ListMileStoneResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListMileStoneResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListMileStoneResponseMultiError) AllErrors() []error { return m }

// ListMileStoneResponseValidationError is the validation error returned by
// ListMileStoneResponse.Validate if the designated constraints aren't met.
type ListMileStoneResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListMileStoneResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListMileStoneResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListMileStoneResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListMileStoneResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListMileStoneResponseValidationError) ErrorName() string {
	return "ListMileStoneResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListMileStoneResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListMileStoneResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListMileStoneResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListMileStoneResponseValidationError{}

// Validate checks the field values on DeleteMileStoneRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteMileStoneRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteMileStoneRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteMileStoneRequestMultiError, or nil if none found.
func (m *DeleteMileStoneRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteMileStoneRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteMileStoneRequestMultiError(errors)
	}

	return nil
}

// DeleteMileStoneRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteMileStoneRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteMileStoneRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteMileStoneRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteMileStoneRequestMultiError) AllErrors() []error { return m }

// DeleteMileStoneRequestValidationError is the validation error returned by
// DeleteMileStoneRequest.Validate if the designated constraints aren't met.
type DeleteMileStoneRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteMileStoneRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteMileStoneRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteMileStoneRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteMileStoneRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteMileStoneRequestValidationError) ErrorName() string {
	return "DeleteMileStoneRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteMileStoneRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteMileStoneRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteMileStoneRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteMileStoneRequestValidationError{}

// Validate checks the field values on ReserveCouponRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReserveCouponRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReserveCouponRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReserveCouponRequestMultiError, or nil if none found.
func (m *ReserveCouponRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ReserveCouponRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetCode()) < 1 {
		err := ReserveCouponRequestValidationError{
			field:  "Code",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for BookingId

	// no validation rules for StoreId

	if m.CustomerId != nil {
		// no validation rules for CustomerId
	}

	if len(errors) > 0 {
		return ReserveCouponRequestMultiError(errors)
	}

	return nil
}

// ReserveCouponRequestMultiError is an error wrapping multiple validation
// errors returned by ReserveCouponRequest.ValidateAll() if the designated
// constraints aren't met.
type ReserveCouponRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReserveCouponRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReserveCouponRequestMultiError) AllErrors() []error { return m }

// ReserveCouponRequestValidationError is the validation error returned by
// ReserveCouponRequest.Validate if the designated constraints aren't met.
type ReserveCouponRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReserveCouponRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReserveCouponRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReserveCouponRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReserveCouponRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReserveCouponRequestValidationError) ErrorName() string {
	return "ReserveCouponRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ReserveCouponRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReserveCouponRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReserveCouponRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReserveCouponRequestValidationError{}

// Validate checks the field values on UnReserveCouponRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UnReserveCouponRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UnReserveCouponRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UnReserveCouponRequestMultiError, or nil if none found.
func (m *UnReserveCouponRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UnReserveCouponRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for BookingId

	// no validation rules for StoreId

	if len(errors) > 0 {
		return UnReserveCouponRequestMultiError(errors)
	}

	return nil
}

// UnReserveCouponRequestMultiError is an error wrapping multiple validation
// errors returned by UnReserveCouponRequest.ValidateAll() if the designated
// constraints aren't met.
type UnReserveCouponRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UnReserveCouponRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UnReserveCouponRequestMultiError) AllErrors() []error { return m }

// UnReserveCouponRequestValidationError is the validation error returned by
// UnReserveCouponRequest.Validate if the designated constraints aren't met.
type UnReserveCouponRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UnReserveCouponRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UnReserveCouponRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UnReserveCouponRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UnReserveCouponRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UnReserveCouponRequestValidationError) ErrorName() string {
	return "UnReserveCouponRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UnReserveCouponRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUnReserveCouponRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UnReserveCouponRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UnReserveCouponRequestValidationError{}

// Validate checks the field values on ConfirmCouponUsageRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ConfirmCouponUsageRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ConfirmCouponUsageRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ConfirmCouponUsageRequestMultiError, or nil if none found.
func (m *ConfirmCouponUsageRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ConfirmCouponUsageRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for BookingId

	// no validation rules for StoreId

	if len(errors) > 0 {
		return ConfirmCouponUsageRequestMultiError(errors)
	}

	return nil
}

// ConfirmCouponUsageRequestMultiError is an error wrapping multiple validation
// errors returned by ConfirmCouponUsageRequest.ValidateAll() if the
// designated constraints aren't met.
type ConfirmCouponUsageRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConfirmCouponUsageRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConfirmCouponUsageRequestMultiError) AllErrors() []error { return m }

// ConfirmCouponUsageRequestValidationError is the validation error returned by
// ConfirmCouponUsageRequest.Validate if the designated constraints aren't met.
type ConfirmCouponUsageRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConfirmCouponUsageRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConfirmCouponUsageRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConfirmCouponUsageRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConfirmCouponUsageRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConfirmCouponUsageRequestValidationError) ErrorName() string {
	return "ConfirmCouponUsageRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ConfirmCouponUsageRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConfirmCouponUsageRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConfirmCouponUsageRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConfirmCouponUsageRequestValidationError{}

// Validate checks the field values on AddPointRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AddPointRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddPointRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddPointRequestMultiError, or nil if none found.
func (m *AddPointRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddPointRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Points

	// no validation rules for CustomerId

	// no validation rules for StoreId

	if len(errors) > 0 {
		return AddPointRequestMultiError(errors)
	}

	return nil
}

// AddPointRequestMultiError is an error wrapping multiple validation errors
// returned by AddPointRequest.ValidateAll() if the designated constraints
// aren't met.
type AddPointRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddPointRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddPointRequestMultiError) AllErrors() []error { return m }

// AddPointRequestValidationError is the validation error returned by
// AddPointRequest.Validate if the designated constraints aren't met.
type AddPointRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddPointRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddPointRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddPointRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddPointRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddPointRequestValidationError) ErrorName() string { return "AddPointRequestValidationError" }

// Error satisfies the builtin error interface
func (e AddPointRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddPointRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddPointRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddPointRequestValidationError{}

// Validate checks the field values on ListCouponRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListCouponRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListCouponRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListCouponRequestMultiError, or nil if none found.
func (m *ListCouponRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCouponRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPageIndex() < 0 {
		err := ListCouponRequestValidationError{
			field:  "PageIndex",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetPageSize() < 0 {
		err := ListCouponRequestValidationError{
			field:  "PageSize",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetSortMethods() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListCouponRequestValidationError{
						field:  fmt.Sprintf("SortMethods[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListCouponRequestValidationError{
						field:  fmt.Sprintf("SortMethods[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListCouponRequestValidationError{
					field:  fmt.Sprintf("SortMethods[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Status

	if len(errors) > 0 {
		return ListCouponRequestMultiError(errors)
	}

	return nil
}

// ListCouponRequestMultiError is an error wrapping multiple validation errors
// returned by ListCouponRequest.ValidateAll() if the designated constraints
// aren't met.
type ListCouponRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCouponRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCouponRequestMultiError) AllErrors() []error { return m }

// ListCouponRequestValidationError is the validation error returned by
// ListCouponRequest.Validate if the designated constraints aren't met.
type ListCouponRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCouponRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCouponRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCouponRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCouponRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCouponRequestValidationError) ErrorName() string {
	return "ListCouponRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListCouponRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCouponRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCouponRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCouponRequestValidationError{}

// Validate checks the field values on ListCouponResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListCouponResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListCouponResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListCouponResponseMultiError, or nil if none found.
func (m *ListCouponResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCouponResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetCoupons() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListCouponResponseValidationError{
						field:  fmt.Sprintf("Coupons[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListCouponResponseValidationError{
						field:  fmt.Sprintf("Coupons[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListCouponResponseValidationError{
					field:  fmt.Sprintf("Coupons[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for TotalCount

	// no validation rules for TotalPages

	if all {
		switch v := interface{}(m.GetRequest()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListCouponResponseValidationError{
					field:  "Request",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListCouponResponseValidationError{
					field:  "Request",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRequest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListCouponResponseValidationError{
				field:  "Request",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListCouponResponseMultiError(errors)
	}

	return nil
}

// ListCouponResponseMultiError is an error wrapping multiple validation errors
// returned by ListCouponResponse.ValidateAll() if the designated constraints
// aren't met.
type ListCouponResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCouponResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCouponResponseMultiError) AllErrors() []error { return m }

// ListCouponResponseValidationError is the validation error returned by
// ListCouponResponse.Validate if the designated constraints aren't met.
type ListCouponResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCouponResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCouponResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCouponResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCouponResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCouponResponseValidationError) ErrorName() string {
	return "ListCouponResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListCouponResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCouponResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCouponResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCouponResponseValidationError{}

// Validate checks the field values on ListProgressRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListProgressRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListProgressRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListProgressRequestMultiError, or nil if none found.
func (m *ListProgressRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListProgressRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PageIndex

	// no validation rules for PageSize

	for idx, item := range m.GetSortMethods() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListProgressRequestValidationError{
						field:  fmt.Sprintf("SortMethods[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListProgressRequestValidationError{
						field:  fmt.Sprintf("SortMethods[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListProgressRequestValidationError{
					field:  fmt.Sprintf("SortMethods[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListProgressRequestMultiError(errors)
	}

	return nil
}

// ListProgressRequestMultiError is an error wrapping multiple validation
// errors returned by ListProgressRequest.ValidateAll() if the designated
// constraints aren't met.
type ListProgressRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListProgressRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListProgressRequestMultiError) AllErrors() []error { return m }

// ListProgressRequestValidationError is the validation error returned by
// ListProgressRequest.Validate if the designated constraints aren't met.
type ListProgressRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListProgressRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListProgressRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListProgressRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListProgressRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListProgressRequestValidationError) ErrorName() string {
	return "ListProgressRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListProgressRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListProgressRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListProgressRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListProgressRequestValidationError{}

// Validate checks the field values on ListProgressResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListProgressResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListProgressResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListProgressResponseMultiError, or nil if none found.
func (m *ListProgressResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListProgressResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetProgressList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListProgressResponseValidationError{
						field:  fmt.Sprintf("ProgressList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListProgressResponseValidationError{
						field:  fmt.Sprintf("ProgressList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListProgressResponseValidationError{
					field:  fmt.Sprintf("ProgressList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for TotalPage

	// no validation rules for TotalCount

	if all {
		switch v := interface{}(m.GetRequest()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListProgressResponseValidationError{
					field:  "Request",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListProgressResponseValidationError{
					field:  "Request",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRequest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListProgressResponseValidationError{
				field:  "Request",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListProgressResponseMultiError(errors)
	}

	return nil
}

// ListProgressResponseMultiError is an error wrapping multiple validation
// errors returned by ListProgressResponse.ValidateAll() if the designated
// constraints aren't met.
type ListProgressResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListProgressResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListProgressResponseMultiError) AllErrors() []error { return m }

// ListProgressResponseValidationError is the validation error returned by
// ListProgressResponse.Validate if the designated constraints aren't met.
type ListProgressResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListProgressResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListProgressResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListProgressResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListProgressResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListProgressResponseValidationError) ErrorName() string {
	return "ListProgressResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListProgressResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListProgressResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListProgressResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListProgressResponseValidationError{}

// Validate checks the field values on ListCurrencyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListCurrencyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListCurrencyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListCurrencyRequestMultiError, or nil if none found.
func (m *ListCurrencyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCurrencyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SearchContent

	// no validation rules for PageIndex

	// no validation rules for PageSize

	for idx, item := range m.GetSortMethods() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListCurrencyRequestValidationError{
						field:  fmt.Sprintf("SortMethods[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListCurrencyRequestValidationError{
						field:  fmt.Sprintf("SortMethods[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListCurrencyRequestValidationError{
					field:  fmt.Sprintf("SortMethods[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListCurrencyRequestMultiError(errors)
	}

	return nil
}

// ListCurrencyRequestMultiError is an error wrapping multiple validation
// errors returned by ListCurrencyRequest.ValidateAll() if the designated
// constraints aren't met.
type ListCurrencyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCurrencyRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCurrencyRequestMultiError) AllErrors() []error { return m }

// ListCurrencyRequestValidationError is the validation error returned by
// ListCurrencyRequest.Validate if the designated constraints aren't met.
type ListCurrencyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCurrencyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCurrencyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCurrencyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCurrencyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCurrencyRequestValidationError) ErrorName() string {
	return "ListCurrencyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListCurrencyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCurrencyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCurrencyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCurrencyRequestValidationError{}

// Validate checks the field values on ListCurrencyResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListCurrencyResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListCurrencyResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListCurrencyResponseMultiError, or nil if none found.
func (m *ListCurrencyResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCurrencyResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetCurrencies() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListCurrencyResponseValidationError{
						field:  fmt.Sprintf("Currencies[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListCurrencyResponseValidationError{
						field:  fmt.Sprintf("Currencies[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListCurrencyResponseValidationError{
					field:  fmt.Sprintf("Currencies[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for TotalPage

	// no validation rules for TotalCount

	if all {
		switch v := interface{}(m.GetRequest()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListCurrencyResponseValidationError{
					field:  "Request",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListCurrencyResponseValidationError{
					field:  "Request",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRequest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListCurrencyResponseValidationError{
				field:  "Request",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListCurrencyResponseMultiError(errors)
	}

	return nil
}

// ListCurrencyResponseMultiError is an error wrapping multiple validation
// errors returned by ListCurrencyResponse.ValidateAll() if the designated
// constraints aren't met.
type ListCurrencyResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCurrencyResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCurrencyResponseMultiError) AllErrors() []error { return m }

// ListCurrencyResponseValidationError is the validation error returned by
// ListCurrencyResponse.Validate if the designated constraints aren't met.
type ListCurrencyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCurrencyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCurrencyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCurrencyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCurrencyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCurrencyResponseValidationError) ErrorName() string {
	return "ListCurrencyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListCurrencyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCurrencyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCurrencyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCurrencyResponseValidationError{}

// Validate checks the field values on CreateMileStoneRequest_MilestoneReward
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *CreateMileStoneRequest_MilestoneReward) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// CreateMileStoneRequest_MilestoneReward with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// CreateMileStoneRequest_MilestoneRewardMultiError, or nil if none found.
func (m *CreateMileStoneRequest_MilestoneReward) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateMileStoneRequest_MilestoneReward) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CouponValue

	// no validation rules for MilestoneId

	if m.ExpiredDuration != nil {
		// no validation rules for ExpiredDuration
	}

	if m.CurrencyId != nil {
		// no validation rules for CurrencyId
	}

	if m.UsageLimit != nil {
		// no validation rules for UsageLimit
	}

	if len(errors) > 0 {
		return CreateMileStoneRequest_MilestoneRewardMultiError(errors)
	}

	return nil
}

// CreateMileStoneRequest_MilestoneRewardMultiError is an error wrapping
// multiple validation errors returned by
// CreateMileStoneRequest_MilestoneReward.ValidateAll() if the designated
// constraints aren't met.
type CreateMileStoneRequest_MilestoneRewardMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateMileStoneRequest_MilestoneRewardMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateMileStoneRequest_MilestoneRewardMultiError) AllErrors() []error { return m }

// CreateMileStoneRequest_MilestoneRewardValidationError is the validation
// error returned by CreateMileStoneRequest_MilestoneReward.Validate if the
// designated constraints aren't met.
type CreateMileStoneRequest_MilestoneRewardValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateMileStoneRequest_MilestoneRewardValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateMileStoneRequest_MilestoneRewardValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateMileStoneRequest_MilestoneRewardValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateMileStoneRequest_MilestoneRewardValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateMileStoneRequest_MilestoneRewardValidationError) ErrorName() string {
	return "CreateMileStoneRequest_MilestoneRewardValidationError"
}

// Error satisfies the builtin error interface
func (e CreateMileStoneRequest_MilestoneRewardValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateMileStoneRequest_MilestoneReward.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateMileStoneRequest_MilestoneRewardValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateMileStoneRequest_MilestoneRewardValidationError{}
