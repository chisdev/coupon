// Code generated by ent, DO NOT EDIT.

package milestone

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the milestone type in the database.
	Label = "milestone"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldStoreID holds the string denoting the store_id field in the database.
	FieldStoreID = "store_id"
	// FieldMilestoneType holds the string denoting the milestone_type field in the database.
	FieldMilestoneType = "milestone_type"
	// FieldThreshold holds the string denoting the threshold field in the database.
	FieldThreshold = "threshold"
	// FieldStep holds the string denoting the step field in the database.
	FieldStep = "step"
	// EdgeReward holds the string denoting the reward edge name in mutations.
	EdgeReward = "reward"
	// EdgeProgress holds the string denoting the progress edge name in mutations.
	EdgeProgress = "progress"
	// Table holds the table name of the milestone in the database.
	Table = "milestones"
	// RewardTable is the table that holds the reward relation/edge.
	RewardTable = "rewards"
	// RewardInverseTable is the table name for the Reward entity.
	// It exists in this package in order to avoid circular dependency with the "reward" package.
	RewardInverseTable = "rewards"
	// RewardColumn is the table column denoting the reward relation/edge.
	RewardColumn = "milestone_id"
	// ProgressTable is the table that holds the progress relation/edge.
	ProgressTable = "progresses"
	// ProgressInverseTable is the table name for the Progress entity.
	// It exists in this package in order to avoid circular dependency with the "progress" package.
	ProgressInverseTable = "progresses"
	// ProgressColumn is the table column denoting the progress relation/edge.
	ProgressColumn = "milestone_id"
)

// Columns holds all SQL columns for milestone fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldName,
	FieldStoreID,
	FieldMilestoneType,
	FieldThreshold,
	FieldStep,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// StoreIDValidator is a validator for the "store_id" field. It is called by the builders before save.
	StoreIDValidator func(string) error
	// DefaultThreshold holds the default value on creation for the "threshold" field.
	DefaultThreshold int32
	// DefaultStep holds the default value on creation for the "step" field.
	DefaultStep int32
)

// OrderOption defines the ordering options for the Milestone queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByStoreID orders the results by the store_id field.
func ByStoreID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStoreID, opts...).ToFunc()
}

// ByMilestoneType orders the results by the milestone_type field.
func ByMilestoneType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMilestoneType, opts...).ToFunc()
}

// ByThreshold orders the results by the threshold field.
func ByThreshold(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldThreshold, opts...).ToFunc()
}

// ByStep orders the results by the step field.
func ByStep(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStep, opts...).ToFunc()
}

// ByRewardCount orders the results by reward count.
func ByRewardCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newRewardStep(), opts...)
	}
}

// ByReward orders the results by reward terms.
func ByReward(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRewardStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByProgressCount orders the results by progress count.
func ByProgressCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newProgressStep(), opts...)
	}
}

// ByProgress orders the results by progress terms.
func ByProgress(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newProgressStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newRewardStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RewardInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, RewardTable, RewardColumn),
	)
}
func newProgressStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ProgressInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ProgressTable, ProgressColumn),
	)
}
