// Code generated by ent, DO NOT EDIT.

package milestone

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	coupon "github.com/chisdev/coupon/api"
	"github.com/chisdev/coupon/pkg/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uint64) predicate.Milestone {
	return predicate.Milestone(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint64) predicate.Milestone {
	return predicate.Milestone(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint64) predicate.Milestone {
	return predicate.Milestone(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint64) predicate.Milestone {
	return predicate.Milestone(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint64) predicate.Milestone {
	return predicate.Milestone(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint64) predicate.Milestone {
	return predicate.Milestone(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint64) predicate.Milestone {
	return predicate.Milestone(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint64) predicate.Milestone {
	return predicate.Milestone(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint64) predicate.Milestone {
	return predicate.Milestone(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Milestone {
	return predicate.Milestone(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Milestone {
	return predicate.Milestone(sql.FieldEQ(FieldUpdatedAt, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Milestone {
	return predicate.Milestone(sql.FieldEQ(FieldName, v))
}

// StoreID applies equality check predicate on the "store_id" field. It's identical to StoreIDEQ.
func StoreID(v string) predicate.Milestone {
	return predicate.Milestone(sql.FieldEQ(FieldStoreID, v))
}

// ExpireAt applies equality check predicate on the "expire_at" field. It's identical to ExpireAtEQ.
func ExpireAt(v time.Time) predicate.Milestone {
	return predicate.Milestone(sql.FieldEQ(FieldExpireAt, v))
}

// CouponType applies equality check predicate on the "coupon_type" field. It's identical to CouponTypeEQ.
func CouponType(v coupon.CouponType) predicate.Milestone {
	vc := int32(v)
	return predicate.Milestone(sql.FieldEQ(FieldCouponType, vc))
}

// MilestoneType applies equality check predicate on the "milestone_type" field. It's identical to MilestoneTypeEQ.
func MilestoneType(v coupon.MilestoneType) predicate.Milestone {
	vc := int32(v)
	return predicate.Milestone(sql.FieldEQ(FieldMilestoneType, vc))
}

// CurrencyID applies equality check predicate on the "currency_id" field. It's identical to CurrencyIDEQ.
func CurrencyID(v uint64) predicate.Milestone {
	return predicate.Milestone(sql.FieldEQ(FieldCurrencyID, v))
}

// UsageLimit applies equality check predicate on the "usage_limit" field. It's identical to UsageLimitEQ.
func UsageLimit(v int32) predicate.Milestone {
	return predicate.Milestone(sql.FieldEQ(FieldUsageLimit, v))
}

// Threshold applies equality check predicate on the "threshold" field. It's identical to ThresholdEQ.
func Threshold(v int32) predicate.Milestone {
	return predicate.Milestone(sql.FieldEQ(FieldThreshold, v))
}

// Step applies equality check predicate on the "step" field. It's identical to StepEQ.
func Step(v int32) predicate.Milestone {
	return predicate.Milestone(sql.FieldEQ(FieldStep, v))
}

// CouponValue applies equality check predicate on the "coupon_value" field. It's identical to CouponValueEQ.
func CouponValue(v float64) predicate.Milestone {
	return predicate.Milestone(sql.FieldEQ(FieldCouponValue, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Milestone {
	return predicate.Milestone(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Milestone {
	return predicate.Milestone(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Milestone {
	return predicate.Milestone(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Milestone {
	return predicate.Milestone(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Milestone {
	return predicate.Milestone(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Milestone {
	return predicate.Milestone(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Milestone {
	return predicate.Milestone(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Milestone {
	return predicate.Milestone(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Milestone {
	return predicate.Milestone(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Milestone {
	return predicate.Milestone(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Milestone {
	return predicate.Milestone(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Milestone {
	return predicate.Milestone(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Milestone {
	return predicate.Milestone(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Milestone {
	return predicate.Milestone(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Milestone {
	return predicate.Milestone(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Milestone {
	return predicate.Milestone(sql.FieldLTE(FieldUpdatedAt, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Milestone {
	return predicate.Milestone(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Milestone {
	return predicate.Milestone(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Milestone {
	return predicate.Milestone(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Milestone {
	return predicate.Milestone(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Milestone {
	return predicate.Milestone(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Milestone {
	return predicate.Milestone(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Milestone {
	return predicate.Milestone(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Milestone {
	return predicate.Milestone(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Milestone {
	return predicate.Milestone(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Milestone {
	return predicate.Milestone(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Milestone {
	return predicate.Milestone(sql.FieldHasSuffix(FieldName, v))
}

// NameIsNil applies the IsNil predicate on the "name" field.
func NameIsNil() predicate.Milestone {
	return predicate.Milestone(sql.FieldIsNull(FieldName))
}

// NameNotNil applies the NotNil predicate on the "name" field.
func NameNotNil() predicate.Milestone {
	return predicate.Milestone(sql.FieldNotNull(FieldName))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Milestone {
	return predicate.Milestone(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Milestone {
	return predicate.Milestone(sql.FieldContainsFold(FieldName, v))
}

// StoreIDEQ applies the EQ predicate on the "store_id" field.
func StoreIDEQ(v string) predicate.Milestone {
	return predicate.Milestone(sql.FieldEQ(FieldStoreID, v))
}

// StoreIDNEQ applies the NEQ predicate on the "store_id" field.
func StoreIDNEQ(v string) predicate.Milestone {
	return predicate.Milestone(sql.FieldNEQ(FieldStoreID, v))
}

// StoreIDIn applies the In predicate on the "store_id" field.
func StoreIDIn(vs ...string) predicate.Milestone {
	return predicate.Milestone(sql.FieldIn(FieldStoreID, vs...))
}

// StoreIDNotIn applies the NotIn predicate on the "store_id" field.
func StoreIDNotIn(vs ...string) predicate.Milestone {
	return predicate.Milestone(sql.FieldNotIn(FieldStoreID, vs...))
}

// StoreIDGT applies the GT predicate on the "store_id" field.
func StoreIDGT(v string) predicate.Milestone {
	return predicate.Milestone(sql.FieldGT(FieldStoreID, v))
}

// StoreIDGTE applies the GTE predicate on the "store_id" field.
func StoreIDGTE(v string) predicate.Milestone {
	return predicate.Milestone(sql.FieldGTE(FieldStoreID, v))
}

// StoreIDLT applies the LT predicate on the "store_id" field.
func StoreIDLT(v string) predicate.Milestone {
	return predicate.Milestone(sql.FieldLT(FieldStoreID, v))
}

// StoreIDLTE applies the LTE predicate on the "store_id" field.
func StoreIDLTE(v string) predicate.Milestone {
	return predicate.Milestone(sql.FieldLTE(FieldStoreID, v))
}

// StoreIDContains applies the Contains predicate on the "store_id" field.
func StoreIDContains(v string) predicate.Milestone {
	return predicate.Milestone(sql.FieldContains(FieldStoreID, v))
}

// StoreIDHasPrefix applies the HasPrefix predicate on the "store_id" field.
func StoreIDHasPrefix(v string) predicate.Milestone {
	return predicate.Milestone(sql.FieldHasPrefix(FieldStoreID, v))
}

// StoreIDHasSuffix applies the HasSuffix predicate on the "store_id" field.
func StoreIDHasSuffix(v string) predicate.Milestone {
	return predicate.Milestone(sql.FieldHasSuffix(FieldStoreID, v))
}

// StoreIDEqualFold applies the EqualFold predicate on the "store_id" field.
func StoreIDEqualFold(v string) predicate.Milestone {
	return predicate.Milestone(sql.FieldEqualFold(FieldStoreID, v))
}

// StoreIDContainsFold applies the ContainsFold predicate on the "store_id" field.
func StoreIDContainsFold(v string) predicate.Milestone {
	return predicate.Milestone(sql.FieldContainsFold(FieldStoreID, v))
}

// ExpireAtEQ applies the EQ predicate on the "expire_at" field.
func ExpireAtEQ(v time.Time) predicate.Milestone {
	return predicate.Milestone(sql.FieldEQ(FieldExpireAt, v))
}

// ExpireAtNEQ applies the NEQ predicate on the "expire_at" field.
func ExpireAtNEQ(v time.Time) predicate.Milestone {
	return predicate.Milestone(sql.FieldNEQ(FieldExpireAt, v))
}

// ExpireAtIn applies the In predicate on the "expire_at" field.
func ExpireAtIn(vs ...time.Time) predicate.Milestone {
	return predicate.Milestone(sql.FieldIn(FieldExpireAt, vs...))
}

// ExpireAtNotIn applies the NotIn predicate on the "expire_at" field.
func ExpireAtNotIn(vs ...time.Time) predicate.Milestone {
	return predicate.Milestone(sql.FieldNotIn(FieldExpireAt, vs...))
}

// ExpireAtGT applies the GT predicate on the "expire_at" field.
func ExpireAtGT(v time.Time) predicate.Milestone {
	return predicate.Milestone(sql.FieldGT(FieldExpireAt, v))
}

// ExpireAtGTE applies the GTE predicate on the "expire_at" field.
func ExpireAtGTE(v time.Time) predicate.Milestone {
	return predicate.Milestone(sql.FieldGTE(FieldExpireAt, v))
}

// ExpireAtLT applies the LT predicate on the "expire_at" field.
func ExpireAtLT(v time.Time) predicate.Milestone {
	return predicate.Milestone(sql.FieldLT(FieldExpireAt, v))
}

// ExpireAtLTE applies the LTE predicate on the "expire_at" field.
func ExpireAtLTE(v time.Time) predicate.Milestone {
	return predicate.Milestone(sql.FieldLTE(FieldExpireAt, v))
}

// ExpireAtIsNil applies the IsNil predicate on the "expire_at" field.
func ExpireAtIsNil() predicate.Milestone {
	return predicate.Milestone(sql.FieldIsNull(FieldExpireAt))
}

// ExpireAtNotNil applies the NotNil predicate on the "expire_at" field.
func ExpireAtNotNil() predicate.Milestone {
	return predicate.Milestone(sql.FieldNotNull(FieldExpireAt))
}

// CouponTypeEQ applies the EQ predicate on the "coupon_type" field.
func CouponTypeEQ(v coupon.CouponType) predicate.Milestone {
	vc := int32(v)
	return predicate.Milestone(sql.FieldEQ(FieldCouponType, vc))
}

// CouponTypeNEQ applies the NEQ predicate on the "coupon_type" field.
func CouponTypeNEQ(v coupon.CouponType) predicate.Milestone {
	vc := int32(v)
	return predicate.Milestone(sql.FieldNEQ(FieldCouponType, vc))
}

// CouponTypeIn applies the In predicate on the "coupon_type" field.
func CouponTypeIn(vs ...coupon.CouponType) predicate.Milestone {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = int32(vs[i])
	}
	return predicate.Milestone(sql.FieldIn(FieldCouponType, v...))
}

// CouponTypeNotIn applies the NotIn predicate on the "coupon_type" field.
func CouponTypeNotIn(vs ...coupon.CouponType) predicate.Milestone {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = int32(vs[i])
	}
	return predicate.Milestone(sql.FieldNotIn(FieldCouponType, v...))
}

// CouponTypeGT applies the GT predicate on the "coupon_type" field.
func CouponTypeGT(v coupon.CouponType) predicate.Milestone {
	vc := int32(v)
	return predicate.Milestone(sql.FieldGT(FieldCouponType, vc))
}

// CouponTypeGTE applies the GTE predicate on the "coupon_type" field.
func CouponTypeGTE(v coupon.CouponType) predicate.Milestone {
	vc := int32(v)
	return predicate.Milestone(sql.FieldGTE(FieldCouponType, vc))
}

// CouponTypeLT applies the LT predicate on the "coupon_type" field.
func CouponTypeLT(v coupon.CouponType) predicate.Milestone {
	vc := int32(v)
	return predicate.Milestone(sql.FieldLT(FieldCouponType, vc))
}

// CouponTypeLTE applies the LTE predicate on the "coupon_type" field.
func CouponTypeLTE(v coupon.CouponType) predicate.Milestone {
	vc := int32(v)
	return predicate.Milestone(sql.FieldLTE(FieldCouponType, vc))
}

// MilestoneTypeEQ applies the EQ predicate on the "milestone_type" field.
func MilestoneTypeEQ(v coupon.MilestoneType) predicate.Milestone {
	vc := int32(v)
	return predicate.Milestone(sql.FieldEQ(FieldMilestoneType, vc))
}

// MilestoneTypeNEQ applies the NEQ predicate on the "milestone_type" field.
func MilestoneTypeNEQ(v coupon.MilestoneType) predicate.Milestone {
	vc := int32(v)
	return predicate.Milestone(sql.FieldNEQ(FieldMilestoneType, vc))
}

// MilestoneTypeIn applies the In predicate on the "milestone_type" field.
func MilestoneTypeIn(vs ...coupon.MilestoneType) predicate.Milestone {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = int32(vs[i])
	}
	return predicate.Milestone(sql.FieldIn(FieldMilestoneType, v...))
}

// MilestoneTypeNotIn applies the NotIn predicate on the "milestone_type" field.
func MilestoneTypeNotIn(vs ...coupon.MilestoneType) predicate.Milestone {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = int32(vs[i])
	}
	return predicate.Milestone(sql.FieldNotIn(FieldMilestoneType, v...))
}

// MilestoneTypeGT applies the GT predicate on the "milestone_type" field.
func MilestoneTypeGT(v coupon.MilestoneType) predicate.Milestone {
	vc := int32(v)
	return predicate.Milestone(sql.FieldGT(FieldMilestoneType, vc))
}

// MilestoneTypeGTE applies the GTE predicate on the "milestone_type" field.
func MilestoneTypeGTE(v coupon.MilestoneType) predicate.Milestone {
	vc := int32(v)
	return predicate.Milestone(sql.FieldGTE(FieldMilestoneType, vc))
}

// MilestoneTypeLT applies the LT predicate on the "milestone_type" field.
func MilestoneTypeLT(v coupon.MilestoneType) predicate.Milestone {
	vc := int32(v)
	return predicate.Milestone(sql.FieldLT(FieldMilestoneType, vc))
}

// MilestoneTypeLTE applies the LTE predicate on the "milestone_type" field.
func MilestoneTypeLTE(v coupon.MilestoneType) predicate.Milestone {
	vc := int32(v)
	return predicate.Milestone(sql.FieldLTE(FieldMilestoneType, vc))
}

// CurrencyIDEQ applies the EQ predicate on the "currency_id" field.
func CurrencyIDEQ(v uint64) predicate.Milestone {
	return predicate.Milestone(sql.FieldEQ(FieldCurrencyID, v))
}

// CurrencyIDNEQ applies the NEQ predicate on the "currency_id" field.
func CurrencyIDNEQ(v uint64) predicate.Milestone {
	return predicate.Milestone(sql.FieldNEQ(FieldCurrencyID, v))
}

// CurrencyIDIn applies the In predicate on the "currency_id" field.
func CurrencyIDIn(vs ...uint64) predicate.Milestone {
	return predicate.Milestone(sql.FieldIn(FieldCurrencyID, vs...))
}

// CurrencyIDNotIn applies the NotIn predicate on the "currency_id" field.
func CurrencyIDNotIn(vs ...uint64) predicate.Milestone {
	return predicate.Milestone(sql.FieldNotIn(FieldCurrencyID, vs...))
}

// CurrencyIDIsNil applies the IsNil predicate on the "currency_id" field.
func CurrencyIDIsNil() predicate.Milestone {
	return predicate.Milestone(sql.FieldIsNull(FieldCurrencyID))
}

// CurrencyIDNotNil applies the NotNil predicate on the "currency_id" field.
func CurrencyIDNotNil() predicate.Milestone {
	return predicate.Milestone(sql.FieldNotNull(FieldCurrencyID))
}

// UsageLimitEQ applies the EQ predicate on the "usage_limit" field.
func UsageLimitEQ(v int32) predicate.Milestone {
	return predicate.Milestone(sql.FieldEQ(FieldUsageLimit, v))
}

// UsageLimitNEQ applies the NEQ predicate on the "usage_limit" field.
func UsageLimitNEQ(v int32) predicate.Milestone {
	return predicate.Milestone(sql.FieldNEQ(FieldUsageLimit, v))
}

// UsageLimitIn applies the In predicate on the "usage_limit" field.
func UsageLimitIn(vs ...int32) predicate.Milestone {
	return predicate.Milestone(sql.FieldIn(FieldUsageLimit, vs...))
}

// UsageLimitNotIn applies the NotIn predicate on the "usage_limit" field.
func UsageLimitNotIn(vs ...int32) predicate.Milestone {
	return predicate.Milestone(sql.FieldNotIn(FieldUsageLimit, vs...))
}

// UsageLimitGT applies the GT predicate on the "usage_limit" field.
func UsageLimitGT(v int32) predicate.Milestone {
	return predicate.Milestone(sql.FieldGT(FieldUsageLimit, v))
}

// UsageLimitGTE applies the GTE predicate on the "usage_limit" field.
func UsageLimitGTE(v int32) predicate.Milestone {
	return predicate.Milestone(sql.FieldGTE(FieldUsageLimit, v))
}

// UsageLimitLT applies the LT predicate on the "usage_limit" field.
func UsageLimitLT(v int32) predicate.Milestone {
	return predicate.Milestone(sql.FieldLT(FieldUsageLimit, v))
}

// UsageLimitLTE applies the LTE predicate on the "usage_limit" field.
func UsageLimitLTE(v int32) predicate.Milestone {
	return predicate.Milestone(sql.FieldLTE(FieldUsageLimit, v))
}

// ThresholdEQ applies the EQ predicate on the "threshold" field.
func ThresholdEQ(v int32) predicate.Milestone {
	return predicate.Milestone(sql.FieldEQ(FieldThreshold, v))
}

// ThresholdNEQ applies the NEQ predicate on the "threshold" field.
func ThresholdNEQ(v int32) predicate.Milestone {
	return predicate.Milestone(sql.FieldNEQ(FieldThreshold, v))
}

// ThresholdIn applies the In predicate on the "threshold" field.
func ThresholdIn(vs ...int32) predicate.Milestone {
	return predicate.Milestone(sql.FieldIn(FieldThreshold, vs...))
}

// ThresholdNotIn applies the NotIn predicate on the "threshold" field.
func ThresholdNotIn(vs ...int32) predicate.Milestone {
	return predicate.Milestone(sql.FieldNotIn(FieldThreshold, vs...))
}

// ThresholdGT applies the GT predicate on the "threshold" field.
func ThresholdGT(v int32) predicate.Milestone {
	return predicate.Milestone(sql.FieldGT(FieldThreshold, v))
}

// ThresholdGTE applies the GTE predicate on the "threshold" field.
func ThresholdGTE(v int32) predicate.Milestone {
	return predicate.Milestone(sql.FieldGTE(FieldThreshold, v))
}

// ThresholdLT applies the LT predicate on the "threshold" field.
func ThresholdLT(v int32) predicate.Milestone {
	return predicate.Milestone(sql.FieldLT(FieldThreshold, v))
}

// ThresholdLTE applies the LTE predicate on the "threshold" field.
func ThresholdLTE(v int32) predicate.Milestone {
	return predicate.Milestone(sql.FieldLTE(FieldThreshold, v))
}

// StepEQ applies the EQ predicate on the "step" field.
func StepEQ(v int32) predicate.Milestone {
	return predicate.Milestone(sql.FieldEQ(FieldStep, v))
}

// StepNEQ applies the NEQ predicate on the "step" field.
func StepNEQ(v int32) predicate.Milestone {
	return predicate.Milestone(sql.FieldNEQ(FieldStep, v))
}

// StepIn applies the In predicate on the "step" field.
func StepIn(vs ...int32) predicate.Milestone {
	return predicate.Milestone(sql.FieldIn(FieldStep, vs...))
}

// StepNotIn applies the NotIn predicate on the "step" field.
func StepNotIn(vs ...int32) predicate.Milestone {
	return predicate.Milestone(sql.FieldNotIn(FieldStep, vs...))
}

// StepGT applies the GT predicate on the "step" field.
func StepGT(v int32) predicate.Milestone {
	return predicate.Milestone(sql.FieldGT(FieldStep, v))
}

// StepGTE applies the GTE predicate on the "step" field.
func StepGTE(v int32) predicate.Milestone {
	return predicate.Milestone(sql.FieldGTE(FieldStep, v))
}

// StepLT applies the LT predicate on the "step" field.
func StepLT(v int32) predicate.Milestone {
	return predicate.Milestone(sql.FieldLT(FieldStep, v))
}

// StepLTE applies the LTE predicate on the "step" field.
func StepLTE(v int32) predicate.Milestone {
	return predicate.Milestone(sql.FieldLTE(FieldStep, v))
}

// CouponValueEQ applies the EQ predicate on the "coupon_value" field.
func CouponValueEQ(v float64) predicate.Milestone {
	return predicate.Milestone(sql.FieldEQ(FieldCouponValue, v))
}

// CouponValueNEQ applies the NEQ predicate on the "coupon_value" field.
func CouponValueNEQ(v float64) predicate.Milestone {
	return predicate.Milestone(sql.FieldNEQ(FieldCouponValue, v))
}

// CouponValueIn applies the In predicate on the "coupon_value" field.
func CouponValueIn(vs ...float64) predicate.Milestone {
	return predicate.Milestone(sql.FieldIn(FieldCouponValue, vs...))
}

// CouponValueNotIn applies the NotIn predicate on the "coupon_value" field.
func CouponValueNotIn(vs ...float64) predicate.Milestone {
	return predicate.Milestone(sql.FieldNotIn(FieldCouponValue, vs...))
}

// CouponValueGT applies the GT predicate on the "coupon_value" field.
func CouponValueGT(v float64) predicate.Milestone {
	return predicate.Milestone(sql.FieldGT(FieldCouponValue, v))
}

// CouponValueGTE applies the GTE predicate on the "coupon_value" field.
func CouponValueGTE(v float64) predicate.Milestone {
	return predicate.Milestone(sql.FieldGTE(FieldCouponValue, v))
}

// CouponValueLT applies the LT predicate on the "coupon_value" field.
func CouponValueLT(v float64) predicate.Milestone {
	return predicate.Milestone(sql.FieldLT(FieldCouponValue, v))
}

// CouponValueLTE applies the LTE predicate on the "coupon_value" field.
func CouponValueLTE(v float64) predicate.Milestone {
	return predicate.Milestone(sql.FieldLTE(FieldCouponValue, v))
}

// HasCurrency applies the HasEdge predicate on the "currency" edge.
func HasCurrency() predicate.Milestone {
	return predicate.Milestone(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, CurrencyTable, CurrencyColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCurrencyWith applies the HasEdge predicate on the "currency" edge with a given conditions (other predicates).
func HasCurrencyWith(preds ...predicate.Currency) predicate.Milestone {
	return predicate.Milestone(func(s *sql.Selector) {
		step := newCurrencyStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Milestone) predicate.Milestone {
	return predicate.Milestone(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Milestone) predicate.Milestone {
	return predicate.Milestone(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Milestone) predicate.Milestone {
	return predicate.Milestone(sql.NotPredicates(p))
}
