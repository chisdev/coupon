// Code generated by ent, DO NOT EDIT.

package reward

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	coupon "github.com/chisdev/coupon/api"
	"github.com/chisdev/coupon/pkg/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uint64) predicate.Reward {
	return predicate.Reward(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint64) predicate.Reward {
	return predicate.Reward(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint64) predicate.Reward {
	return predicate.Reward(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint64) predicate.Reward {
	return predicate.Reward(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint64) predicate.Reward {
	return predicate.Reward(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint64) predicate.Reward {
	return predicate.Reward(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint64) predicate.Reward {
	return predicate.Reward(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint64) predicate.Reward {
	return predicate.Reward(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint64) predicate.Reward {
	return predicate.Reward(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Reward {
	return predicate.Reward(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Reward {
	return predicate.Reward(sql.FieldEQ(FieldUpdatedAt, v))
}

// MilestoneID applies equality check predicate on the "milestone_id" field. It's identical to MilestoneIDEQ.
func MilestoneID(v uint64) predicate.Reward {
	return predicate.Reward(sql.FieldEQ(FieldMilestoneID, v))
}

// ExpiredDuration applies equality check predicate on the "expired_duration" field. It's identical to ExpiredDurationEQ.
func ExpiredDuration(v float64) predicate.Reward {
	return predicate.Reward(sql.FieldEQ(FieldExpiredDuration, v))
}

// CouponType applies equality check predicate on the "coupon_type" field. It's identical to CouponTypeEQ.
func CouponType(v coupon.CouponType) predicate.Reward {
	vc := int32(v)
	return predicate.Reward(sql.FieldEQ(FieldCouponType, vc))
}

// CurrencyID applies equality check predicate on the "currency_id" field. It's identical to CurrencyIDEQ.
func CurrencyID(v uint64) predicate.Reward {
	return predicate.Reward(sql.FieldEQ(FieldCurrencyID, v))
}

// UsageLimit applies equality check predicate on the "usage_limit" field. It's identical to UsageLimitEQ.
func UsageLimit(v int32) predicate.Reward {
	return predicate.Reward(sql.FieldEQ(FieldUsageLimit, v))
}

// CouponValue applies equality check predicate on the "coupon_value" field. It's identical to CouponValueEQ.
func CouponValue(v float64) predicate.Reward {
	return predicate.Reward(sql.FieldEQ(FieldCouponValue, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Reward {
	return predicate.Reward(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Reward {
	return predicate.Reward(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Reward {
	return predicate.Reward(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Reward {
	return predicate.Reward(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Reward {
	return predicate.Reward(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Reward {
	return predicate.Reward(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Reward {
	return predicate.Reward(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Reward {
	return predicate.Reward(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Reward {
	return predicate.Reward(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Reward {
	return predicate.Reward(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Reward {
	return predicate.Reward(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Reward {
	return predicate.Reward(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Reward {
	return predicate.Reward(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Reward {
	return predicate.Reward(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Reward {
	return predicate.Reward(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Reward {
	return predicate.Reward(sql.FieldLTE(FieldUpdatedAt, v))
}

// MilestoneIDEQ applies the EQ predicate on the "milestone_id" field.
func MilestoneIDEQ(v uint64) predicate.Reward {
	return predicate.Reward(sql.FieldEQ(FieldMilestoneID, v))
}

// MilestoneIDNEQ applies the NEQ predicate on the "milestone_id" field.
func MilestoneIDNEQ(v uint64) predicate.Reward {
	return predicate.Reward(sql.FieldNEQ(FieldMilestoneID, v))
}

// MilestoneIDIn applies the In predicate on the "milestone_id" field.
func MilestoneIDIn(vs ...uint64) predicate.Reward {
	return predicate.Reward(sql.FieldIn(FieldMilestoneID, vs...))
}

// MilestoneIDNotIn applies the NotIn predicate on the "milestone_id" field.
func MilestoneIDNotIn(vs ...uint64) predicate.Reward {
	return predicate.Reward(sql.FieldNotIn(FieldMilestoneID, vs...))
}

// ExpiredDurationEQ applies the EQ predicate on the "expired_duration" field.
func ExpiredDurationEQ(v float64) predicate.Reward {
	return predicate.Reward(sql.FieldEQ(FieldExpiredDuration, v))
}

// ExpiredDurationNEQ applies the NEQ predicate on the "expired_duration" field.
func ExpiredDurationNEQ(v float64) predicate.Reward {
	return predicate.Reward(sql.FieldNEQ(FieldExpiredDuration, v))
}

// ExpiredDurationIn applies the In predicate on the "expired_duration" field.
func ExpiredDurationIn(vs ...float64) predicate.Reward {
	return predicate.Reward(sql.FieldIn(FieldExpiredDuration, vs...))
}

// ExpiredDurationNotIn applies the NotIn predicate on the "expired_duration" field.
func ExpiredDurationNotIn(vs ...float64) predicate.Reward {
	return predicate.Reward(sql.FieldNotIn(FieldExpiredDuration, vs...))
}

// ExpiredDurationGT applies the GT predicate on the "expired_duration" field.
func ExpiredDurationGT(v float64) predicate.Reward {
	return predicate.Reward(sql.FieldGT(FieldExpiredDuration, v))
}

// ExpiredDurationGTE applies the GTE predicate on the "expired_duration" field.
func ExpiredDurationGTE(v float64) predicate.Reward {
	return predicate.Reward(sql.FieldGTE(FieldExpiredDuration, v))
}

// ExpiredDurationLT applies the LT predicate on the "expired_duration" field.
func ExpiredDurationLT(v float64) predicate.Reward {
	return predicate.Reward(sql.FieldLT(FieldExpiredDuration, v))
}

// ExpiredDurationLTE applies the LTE predicate on the "expired_duration" field.
func ExpiredDurationLTE(v float64) predicate.Reward {
	return predicate.Reward(sql.FieldLTE(FieldExpiredDuration, v))
}

// ExpiredDurationIsNil applies the IsNil predicate on the "expired_duration" field.
func ExpiredDurationIsNil() predicate.Reward {
	return predicate.Reward(sql.FieldIsNull(FieldExpiredDuration))
}

// ExpiredDurationNotNil applies the NotNil predicate on the "expired_duration" field.
func ExpiredDurationNotNil() predicate.Reward {
	return predicate.Reward(sql.FieldNotNull(FieldExpiredDuration))
}

// CouponTypeEQ applies the EQ predicate on the "coupon_type" field.
func CouponTypeEQ(v coupon.CouponType) predicate.Reward {
	vc := int32(v)
	return predicate.Reward(sql.FieldEQ(FieldCouponType, vc))
}

// CouponTypeNEQ applies the NEQ predicate on the "coupon_type" field.
func CouponTypeNEQ(v coupon.CouponType) predicate.Reward {
	vc := int32(v)
	return predicate.Reward(sql.FieldNEQ(FieldCouponType, vc))
}

// CouponTypeIn applies the In predicate on the "coupon_type" field.
func CouponTypeIn(vs ...coupon.CouponType) predicate.Reward {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = int32(vs[i])
	}
	return predicate.Reward(sql.FieldIn(FieldCouponType, v...))
}

// CouponTypeNotIn applies the NotIn predicate on the "coupon_type" field.
func CouponTypeNotIn(vs ...coupon.CouponType) predicate.Reward {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = int32(vs[i])
	}
	return predicate.Reward(sql.FieldNotIn(FieldCouponType, v...))
}

// CouponTypeGT applies the GT predicate on the "coupon_type" field.
func CouponTypeGT(v coupon.CouponType) predicate.Reward {
	vc := int32(v)
	return predicate.Reward(sql.FieldGT(FieldCouponType, vc))
}

// CouponTypeGTE applies the GTE predicate on the "coupon_type" field.
func CouponTypeGTE(v coupon.CouponType) predicate.Reward {
	vc := int32(v)
	return predicate.Reward(sql.FieldGTE(FieldCouponType, vc))
}

// CouponTypeLT applies the LT predicate on the "coupon_type" field.
func CouponTypeLT(v coupon.CouponType) predicate.Reward {
	vc := int32(v)
	return predicate.Reward(sql.FieldLT(FieldCouponType, vc))
}

// CouponTypeLTE applies the LTE predicate on the "coupon_type" field.
func CouponTypeLTE(v coupon.CouponType) predicate.Reward {
	vc := int32(v)
	return predicate.Reward(sql.FieldLTE(FieldCouponType, vc))
}

// CurrencyIDEQ applies the EQ predicate on the "currency_id" field.
func CurrencyIDEQ(v uint64) predicate.Reward {
	return predicate.Reward(sql.FieldEQ(FieldCurrencyID, v))
}

// CurrencyIDNEQ applies the NEQ predicate on the "currency_id" field.
func CurrencyIDNEQ(v uint64) predicate.Reward {
	return predicate.Reward(sql.FieldNEQ(FieldCurrencyID, v))
}

// CurrencyIDIn applies the In predicate on the "currency_id" field.
func CurrencyIDIn(vs ...uint64) predicate.Reward {
	return predicate.Reward(sql.FieldIn(FieldCurrencyID, vs...))
}

// CurrencyIDNotIn applies the NotIn predicate on the "currency_id" field.
func CurrencyIDNotIn(vs ...uint64) predicate.Reward {
	return predicate.Reward(sql.FieldNotIn(FieldCurrencyID, vs...))
}

// CurrencyIDIsNil applies the IsNil predicate on the "currency_id" field.
func CurrencyIDIsNil() predicate.Reward {
	return predicate.Reward(sql.FieldIsNull(FieldCurrencyID))
}

// CurrencyIDNotNil applies the NotNil predicate on the "currency_id" field.
func CurrencyIDNotNil() predicate.Reward {
	return predicate.Reward(sql.FieldNotNull(FieldCurrencyID))
}

// UsageLimitEQ applies the EQ predicate on the "usage_limit" field.
func UsageLimitEQ(v int32) predicate.Reward {
	return predicate.Reward(sql.FieldEQ(FieldUsageLimit, v))
}

// UsageLimitNEQ applies the NEQ predicate on the "usage_limit" field.
func UsageLimitNEQ(v int32) predicate.Reward {
	return predicate.Reward(sql.FieldNEQ(FieldUsageLimit, v))
}

// UsageLimitIn applies the In predicate on the "usage_limit" field.
func UsageLimitIn(vs ...int32) predicate.Reward {
	return predicate.Reward(sql.FieldIn(FieldUsageLimit, vs...))
}

// UsageLimitNotIn applies the NotIn predicate on the "usage_limit" field.
func UsageLimitNotIn(vs ...int32) predicate.Reward {
	return predicate.Reward(sql.FieldNotIn(FieldUsageLimit, vs...))
}

// UsageLimitGT applies the GT predicate on the "usage_limit" field.
func UsageLimitGT(v int32) predicate.Reward {
	return predicate.Reward(sql.FieldGT(FieldUsageLimit, v))
}

// UsageLimitGTE applies the GTE predicate on the "usage_limit" field.
func UsageLimitGTE(v int32) predicate.Reward {
	return predicate.Reward(sql.FieldGTE(FieldUsageLimit, v))
}

// UsageLimitLT applies the LT predicate on the "usage_limit" field.
func UsageLimitLT(v int32) predicate.Reward {
	return predicate.Reward(sql.FieldLT(FieldUsageLimit, v))
}

// UsageLimitLTE applies the LTE predicate on the "usage_limit" field.
func UsageLimitLTE(v int32) predicate.Reward {
	return predicate.Reward(sql.FieldLTE(FieldUsageLimit, v))
}

// UsageLimitIsNil applies the IsNil predicate on the "usage_limit" field.
func UsageLimitIsNil() predicate.Reward {
	return predicate.Reward(sql.FieldIsNull(FieldUsageLimit))
}

// UsageLimitNotNil applies the NotNil predicate on the "usage_limit" field.
func UsageLimitNotNil() predicate.Reward {
	return predicate.Reward(sql.FieldNotNull(FieldUsageLimit))
}

// CouponValueEQ applies the EQ predicate on the "coupon_value" field.
func CouponValueEQ(v float64) predicate.Reward {
	return predicate.Reward(sql.FieldEQ(FieldCouponValue, v))
}

// CouponValueNEQ applies the NEQ predicate on the "coupon_value" field.
func CouponValueNEQ(v float64) predicate.Reward {
	return predicate.Reward(sql.FieldNEQ(FieldCouponValue, v))
}

// CouponValueIn applies the In predicate on the "coupon_value" field.
func CouponValueIn(vs ...float64) predicate.Reward {
	return predicate.Reward(sql.FieldIn(FieldCouponValue, vs...))
}

// CouponValueNotIn applies the NotIn predicate on the "coupon_value" field.
func CouponValueNotIn(vs ...float64) predicate.Reward {
	return predicate.Reward(sql.FieldNotIn(FieldCouponValue, vs...))
}

// CouponValueGT applies the GT predicate on the "coupon_value" field.
func CouponValueGT(v float64) predicate.Reward {
	return predicate.Reward(sql.FieldGT(FieldCouponValue, v))
}

// CouponValueGTE applies the GTE predicate on the "coupon_value" field.
func CouponValueGTE(v float64) predicate.Reward {
	return predicate.Reward(sql.FieldGTE(FieldCouponValue, v))
}

// CouponValueLT applies the LT predicate on the "coupon_value" field.
func CouponValueLT(v float64) predicate.Reward {
	return predicate.Reward(sql.FieldLT(FieldCouponValue, v))
}

// CouponValueLTE applies the LTE predicate on the "coupon_value" field.
func CouponValueLTE(v float64) predicate.Reward {
	return predicate.Reward(sql.FieldLTE(FieldCouponValue, v))
}

// HasCurrency applies the HasEdge predicate on the "currency" edge.
func HasCurrency() predicate.Reward {
	return predicate.Reward(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, CurrencyTable, CurrencyColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCurrencyWith applies the HasEdge predicate on the "currency" edge with a given conditions (other predicates).
func HasCurrencyWith(preds ...predicate.Currency) predicate.Reward {
	return predicate.Reward(func(s *sql.Selector) {
		step := newCurrencyStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasMilestone applies the HasEdge predicate on the "milestone" edge.
func HasMilestone() predicate.Reward {
	return predicate.Reward(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, MilestoneTable, MilestoneColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMilestoneWith applies the HasEdge predicate on the "milestone" edge with a given conditions (other predicates).
func HasMilestoneWith(preds ...predicate.Milestone) predicate.Reward {
	return predicate.Reward(func(s *sql.Selector) {
		step := newMilestoneStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Reward) predicate.Reward {
	return predicate.Reward(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Reward) predicate.Reward {
	return predicate.Reward(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Reward) predicate.Reward {
	return predicate.Reward(sql.NotPredicates(p))
}
