// Code generated by ent, DO NOT EDIT.

package reward

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the reward type in the database.
	Label = "reward"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldMilestoneID holds the string denoting the milestone_id field in the database.
	FieldMilestoneID = "milestone_id"
	// FieldExpiredDuration holds the string denoting the expired_duration field in the database.
	FieldExpiredDuration = "expired_duration"
	// FieldServiceIds holds the string denoting the service_ids field in the database.
	FieldServiceIds = "service_ids"
	// FieldCouponType holds the string denoting the coupon_type field in the database.
	FieldCouponType = "coupon_type"
	// FieldCurrencyID holds the string denoting the currency_id field in the database.
	FieldCurrencyID = "currency_id"
	// FieldUsageLimit holds the string denoting the usage_limit field in the database.
	FieldUsageLimit = "usage_limit"
	// FieldCouponValue holds the string denoting the coupon_value field in the database.
	FieldCouponValue = "coupon_value"
	// EdgeCurrency holds the string denoting the currency edge name in mutations.
	EdgeCurrency = "currency"
	// EdgeMilestone holds the string denoting the milestone edge name in mutations.
	EdgeMilestone = "milestone"
	// Table holds the table name of the reward in the database.
	Table = "rewards"
	// CurrencyTable is the table that holds the currency relation/edge.
	CurrencyTable = "rewards"
	// CurrencyInverseTable is the table name for the Currency entity.
	// It exists in this package in order to avoid circular dependency with the "currency" package.
	CurrencyInverseTable = "currencies"
	// CurrencyColumn is the table column denoting the currency relation/edge.
	CurrencyColumn = "currency_id"
	// MilestoneTable is the table that holds the milestone relation/edge.
	MilestoneTable = "rewards"
	// MilestoneInverseTable is the table name for the Milestone entity.
	// It exists in this package in order to avoid circular dependency with the "milestone" package.
	MilestoneInverseTable = "milestones"
	// MilestoneColumn is the table column denoting the milestone relation/edge.
	MilestoneColumn = "milestone_id"
)

// Columns holds all SQL columns for reward fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldMilestoneID,
	FieldExpiredDuration,
	FieldServiceIds,
	FieldCouponType,
	FieldCurrencyID,
	FieldUsageLimit,
	FieldCouponValue,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultServiceIds holds the default value on creation for the "service_ids" field.
	DefaultServiceIds []uint64
	// DefaultUsageLimit holds the default value on creation for the "usage_limit" field.
	DefaultUsageLimit int32
	// DefaultCouponValue holds the default value on creation for the "coupon_value" field.
	DefaultCouponValue float64
)

// OrderOption defines the ordering options for the Reward queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByMilestoneID orders the results by the milestone_id field.
func ByMilestoneID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMilestoneID, opts...).ToFunc()
}

// ByExpiredDuration orders the results by the expired_duration field.
func ByExpiredDuration(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExpiredDuration, opts...).ToFunc()
}

// ByCouponType orders the results by the coupon_type field.
func ByCouponType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCouponType, opts...).ToFunc()
}

// ByCurrencyID orders the results by the currency_id field.
func ByCurrencyID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCurrencyID, opts...).ToFunc()
}

// ByUsageLimit orders the results by the usage_limit field.
func ByUsageLimit(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUsageLimit, opts...).ToFunc()
}

// ByCouponValue orders the results by the coupon_value field.
func ByCouponValue(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCouponValue, opts...).ToFunc()
}

// ByCurrencyField orders the results by currency field.
func ByCurrencyField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCurrencyStep(), sql.OrderByField(field, opts...))
	}
}

// ByMilestoneField orders the results by milestone field.
func ByMilestoneField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newMilestoneStep(), sql.OrderByField(field, opts...))
	}
}
func newCurrencyStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CurrencyInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, CurrencyTable, CurrencyColumn),
	)
}
func newMilestoneStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(MilestoneInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, MilestoneTable, MilestoneColumn),
	)
}
