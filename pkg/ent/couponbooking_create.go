// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	coupon "github.com/chisdev/coupon/api"
	entcoupon "github.com/chisdev/coupon/pkg/ent/coupon"
	"github.com/chisdev/coupon/pkg/ent/couponbooking"
)

// CouponBookingCreate is the builder for creating a CouponBooking entity.
type CouponBookingCreate struct {
	config
	mutation *CouponBookingMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (_c *CouponBookingCreate) SetCreatedAt(v time.Time) *CouponBookingCreate {
	_c.mutation.SetCreatedAt(v)
	return _c
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_c *CouponBookingCreate) SetNillableCreatedAt(v *time.Time) *CouponBookingCreate {
	if v != nil {
		_c.SetCreatedAt(*v)
	}
	return _c
}

// SetUpdatedAt sets the "updated_at" field.
func (_c *CouponBookingCreate) SetUpdatedAt(v time.Time) *CouponBookingCreate {
	_c.mutation.SetUpdatedAt(v)
	return _c
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_c *CouponBookingCreate) SetNillableUpdatedAt(v *time.Time) *CouponBookingCreate {
	if v != nil {
		_c.SetUpdatedAt(*v)
	}
	return _c
}

// SetCouponID sets the "coupon_id" field.
func (_c *CouponBookingCreate) SetCouponID(v uint64) *CouponBookingCreate {
	_c.mutation.SetCouponID(v)
	return _c
}

// SetBookingID sets the "booking_id" field.
func (_c *CouponBookingCreate) SetBookingID(v string) *CouponBookingCreate {
	_c.mutation.SetBookingID(v)
	return _c
}

// SetStatus sets the "status" field.
func (_c *CouponBookingCreate) SetStatus(v coupon.CouponUsedStatus) *CouponBookingCreate {
	_c.mutation.SetStatus(v)
	return _c
}

// SetServiceIds sets the "service_ids" field.
func (_c *CouponBookingCreate) SetServiceIds(v []string) *CouponBookingCreate {
	_c.mutation.SetServiceIds(v)
	return _c
}

// SetCustomerID sets the "customer_id" field.
func (_c *CouponBookingCreate) SetCustomerID(v string) *CouponBookingCreate {
	_c.mutation.SetCustomerID(v)
	return _c
}

// SetNillableCustomerID sets the "customer_id" field if the given value is not nil.
func (_c *CouponBookingCreate) SetNillableCustomerID(v *string) *CouponBookingCreate {
	if v != nil {
		_c.SetCustomerID(*v)
	}
	return _c
}

// SetID sets the "id" field.
func (_c *CouponBookingCreate) SetID(v uint64) *CouponBookingCreate {
	_c.mutation.SetID(v)
	return _c
}

// SetCoupon sets the "coupon" edge to the Coupon entity.
func (_c *CouponBookingCreate) SetCoupon(v *Coupon) *CouponBookingCreate {
	return _c.SetCouponID(v.ID)
}

// Mutation returns the CouponBookingMutation object of the builder.
func (_c *CouponBookingCreate) Mutation() *CouponBookingMutation {
	return _c.mutation
}

// Save creates the CouponBooking in the database.
func (_c *CouponBookingCreate) Save(ctx context.Context) (*CouponBooking, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *CouponBookingCreate) SaveX(ctx context.Context) *CouponBooking {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *CouponBookingCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *CouponBookingCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *CouponBookingCreate) defaults() {
	if _, ok := _c.mutation.CreatedAt(); !ok {
		v := couponbooking.DefaultCreatedAt()
		_c.mutation.SetCreatedAt(v)
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		v := couponbooking.DefaultUpdatedAt()
		_c.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *CouponBookingCreate) check() error {
	if _, ok := _c.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "CouponBooking.created_at"`)}
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "CouponBooking.updated_at"`)}
	}
	if _, ok := _c.mutation.CouponID(); !ok {
		return &ValidationError{Name: "coupon_id", err: errors.New(`ent: missing required field "CouponBooking.coupon_id"`)}
	}
	if _, ok := _c.mutation.BookingID(); !ok {
		return &ValidationError{Name: "booking_id", err: errors.New(`ent: missing required field "CouponBooking.booking_id"`)}
	}
	if _, ok := _c.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "CouponBooking.status"`)}
	}
	if _, ok := _c.mutation.ServiceIds(); !ok {
		return &ValidationError{Name: "service_ids", err: errors.New(`ent: missing required field "CouponBooking.service_ids"`)}
	}
	if len(_c.mutation.CouponIDs()) == 0 {
		return &ValidationError{Name: "coupon", err: errors.New(`ent: missing required edge "CouponBooking.coupon"`)}
	}
	return nil
}

func (_c *CouponBookingCreate) sqlSave(ctx context.Context) (*CouponBooking, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint64(id)
	}
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *CouponBookingCreate) createSpec() (*CouponBooking, *sqlgraph.CreateSpec) {
	var (
		_node = &CouponBooking{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(couponbooking.Table, sqlgraph.NewFieldSpec(couponbooking.FieldID, field.TypeUint64))
	)
	_spec.OnConflict = _c.conflict
	if id, ok := _c.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := _c.mutation.CreatedAt(); ok {
		_spec.SetField(couponbooking.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := _c.mutation.UpdatedAt(); ok {
		_spec.SetField(couponbooking.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := _c.mutation.BookingID(); ok {
		_spec.SetField(couponbooking.FieldBookingID, field.TypeString, value)
		_node.BookingID = value
	}
	if value, ok := _c.mutation.Status(); ok {
		_spec.SetField(couponbooking.FieldStatus, field.TypeInt32, value)
		_node.Status = value
	}
	if value, ok := _c.mutation.ServiceIds(); ok {
		_spec.SetField(couponbooking.FieldServiceIds, field.TypeJSON, value)
		_node.ServiceIds = value
	}
	if value, ok := _c.mutation.CustomerID(); ok {
		_spec.SetField(couponbooking.FieldCustomerID, field.TypeString, value)
		_node.CustomerID = &value
	}
	if nodes := _c.mutation.CouponIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   couponbooking.CouponTable,
			Columns: []string{couponbooking.CouponColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entcoupon.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.CouponID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.CouponBooking.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CouponBookingUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (_c *CouponBookingCreate) OnConflict(opts ...sql.ConflictOption) *CouponBookingUpsertOne {
	_c.conflict = opts
	return &CouponBookingUpsertOne{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.CouponBooking.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *CouponBookingCreate) OnConflictColumns(columns ...string) *CouponBookingUpsertOne {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &CouponBookingUpsertOne{
		create: _c,
	}
}

type (
	// CouponBookingUpsertOne is the builder for "upsert"-ing
	//  one CouponBooking node.
	CouponBookingUpsertOne struct {
		create *CouponBookingCreate
	}

	// CouponBookingUpsert is the "OnConflict" setter.
	CouponBookingUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *CouponBookingUpsert) SetUpdatedAt(v time.Time) *CouponBookingUpsert {
	u.Set(couponbooking.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *CouponBookingUpsert) UpdateUpdatedAt() *CouponBookingUpsert {
	u.SetExcluded(couponbooking.FieldUpdatedAt)
	return u
}

// SetCouponID sets the "coupon_id" field.
func (u *CouponBookingUpsert) SetCouponID(v uint64) *CouponBookingUpsert {
	u.Set(couponbooking.FieldCouponID, v)
	return u
}

// UpdateCouponID sets the "coupon_id" field to the value that was provided on create.
func (u *CouponBookingUpsert) UpdateCouponID() *CouponBookingUpsert {
	u.SetExcluded(couponbooking.FieldCouponID)
	return u
}

// SetBookingID sets the "booking_id" field.
func (u *CouponBookingUpsert) SetBookingID(v string) *CouponBookingUpsert {
	u.Set(couponbooking.FieldBookingID, v)
	return u
}

// UpdateBookingID sets the "booking_id" field to the value that was provided on create.
func (u *CouponBookingUpsert) UpdateBookingID() *CouponBookingUpsert {
	u.SetExcluded(couponbooking.FieldBookingID)
	return u
}

// SetStatus sets the "status" field.
func (u *CouponBookingUpsert) SetStatus(v coupon.CouponUsedStatus) *CouponBookingUpsert {
	u.Set(couponbooking.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *CouponBookingUpsert) UpdateStatus() *CouponBookingUpsert {
	u.SetExcluded(couponbooking.FieldStatus)
	return u
}

// AddStatus adds v to the "status" field.
func (u *CouponBookingUpsert) AddStatus(v coupon.CouponUsedStatus) *CouponBookingUpsert {
	u.Add(couponbooking.FieldStatus, v)
	return u
}

// SetServiceIds sets the "service_ids" field.
func (u *CouponBookingUpsert) SetServiceIds(v []string) *CouponBookingUpsert {
	u.Set(couponbooking.FieldServiceIds, v)
	return u
}

// UpdateServiceIds sets the "service_ids" field to the value that was provided on create.
func (u *CouponBookingUpsert) UpdateServiceIds() *CouponBookingUpsert {
	u.SetExcluded(couponbooking.FieldServiceIds)
	return u
}

// SetCustomerID sets the "customer_id" field.
func (u *CouponBookingUpsert) SetCustomerID(v string) *CouponBookingUpsert {
	u.Set(couponbooking.FieldCustomerID, v)
	return u
}

// UpdateCustomerID sets the "customer_id" field to the value that was provided on create.
func (u *CouponBookingUpsert) UpdateCustomerID() *CouponBookingUpsert {
	u.SetExcluded(couponbooking.FieldCustomerID)
	return u
}

// ClearCustomerID clears the value of the "customer_id" field.
func (u *CouponBookingUpsert) ClearCustomerID() *CouponBookingUpsert {
	u.SetNull(couponbooking.FieldCustomerID)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.CouponBooking.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(couponbooking.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *CouponBookingUpsertOne) UpdateNewValues() *CouponBookingUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(couponbooking.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(couponbooking.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.CouponBooking.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *CouponBookingUpsertOne) Ignore() *CouponBookingUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CouponBookingUpsertOne) DoNothing() *CouponBookingUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CouponBookingCreate.OnConflict
// documentation for more info.
func (u *CouponBookingUpsertOne) Update(set func(*CouponBookingUpsert)) *CouponBookingUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CouponBookingUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *CouponBookingUpsertOne) SetUpdatedAt(v time.Time) *CouponBookingUpsertOne {
	return u.Update(func(s *CouponBookingUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *CouponBookingUpsertOne) UpdateUpdatedAt() *CouponBookingUpsertOne {
	return u.Update(func(s *CouponBookingUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetCouponID sets the "coupon_id" field.
func (u *CouponBookingUpsertOne) SetCouponID(v uint64) *CouponBookingUpsertOne {
	return u.Update(func(s *CouponBookingUpsert) {
		s.SetCouponID(v)
	})
}

// UpdateCouponID sets the "coupon_id" field to the value that was provided on create.
func (u *CouponBookingUpsertOne) UpdateCouponID() *CouponBookingUpsertOne {
	return u.Update(func(s *CouponBookingUpsert) {
		s.UpdateCouponID()
	})
}

// SetBookingID sets the "booking_id" field.
func (u *CouponBookingUpsertOne) SetBookingID(v string) *CouponBookingUpsertOne {
	return u.Update(func(s *CouponBookingUpsert) {
		s.SetBookingID(v)
	})
}

// UpdateBookingID sets the "booking_id" field to the value that was provided on create.
func (u *CouponBookingUpsertOne) UpdateBookingID() *CouponBookingUpsertOne {
	return u.Update(func(s *CouponBookingUpsert) {
		s.UpdateBookingID()
	})
}

// SetStatus sets the "status" field.
func (u *CouponBookingUpsertOne) SetStatus(v coupon.CouponUsedStatus) *CouponBookingUpsertOne {
	return u.Update(func(s *CouponBookingUpsert) {
		s.SetStatus(v)
	})
}

// AddStatus adds v to the "status" field.
func (u *CouponBookingUpsertOne) AddStatus(v coupon.CouponUsedStatus) *CouponBookingUpsertOne {
	return u.Update(func(s *CouponBookingUpsert) {
		s.AddStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *CouponBookingUpsertOne) UpdateStatus() *CouponBookingUpsertOne {
	return u.Update(func(s *CouponBookingUpsert) {
		s.UpdateStatus()
	})
}

// SetServiceIds sets the "service_ids" field.
func (u *CouponBookingUpsertOne) SetServiceIds(v []string) *CouponBookingUpsertOne {
	return u.Update(func(s *CouponBookingUpsert) {
		s.SetServiceIds(v)
	})
}

// UpdateServiceIds sets the "service_ids" field to the value that was provided on create.
func (u *CouponBookingUpsertOne) UpdateServiceIds() *CouponBookingUpsertOne {
	return u.Update(func(s *CouponBookingUpsert) {
		s.UpdateServiceIds()
	})
}

// SetCustomerID sets the "customer_id" field.
func (u *CouponBookingUpsertOne) SetCustomerID(v string) *CouponBookingUpsertOne {
	return u.Update(func(s *CouponBookingUpsert) {
		s.SetCustomerID(v)
	})
}

// UpdateCustomerID sets the "customer_id" field to the value that was provided on create.
func (u *CouponBookingUpsertOne) UpdateCustomerID() *CouponBookingUpsertOne {
	return u.Update(func(s *CouponBookingUpsert) {
		s.UpdateCustomerID()
	})
}

// ClearCustomerID clears the value of the "customer_id" field.
func (u *CouponBookingUpsertOne) ClearCustomerID() *CouponBookingUpsertOne {
	return u.Update(func(s *CouponBookingUpsert) {
		s.ClearCustomerID()
	})
}

// Exec executes the query.
func (u *CouponBookingUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for CouponBookingCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CouponBookingUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *CouponBookingUpsertOne) ID(ctx context.Context) (id uint64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *CouponBookingUpsertOne) IDX(ctx context.Context) uint64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// CouponBookingCreateBulk is the builder for creating many CouponBooking entities in bulk.
type CouponBookingCreateBulk struct {
	config
	err      error
	builders []*CouponBookingCreate
	conflict []sql.ConflictOption
}

// Save creates the CouponBooking entities in the database.
func (_c *CouponBookingCreateBulk) Save(ctx context.Context) ([]*CouponBooking, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*CouponBooking, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CouponBookingMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = _c.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *CouponBookingCreateBulk) SaveX(ctx context.Context) []*CouponBooking {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *CouponBookingCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *CouponBookingCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.CouponBooking.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CouponBookingUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (_c *CouponBookingCreateBulk) OnConflict(opts ...sql.ConflictOption) *CouponBookingUpsertBulk {
	_c.conflict = opts
	return &CouponBookingUpsertBulk{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.CouponBooking.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *CouponBookingCreateBulk) OnConflictColumns(columns ...string) *CouponBookingUpsertBulk {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &CouponBookingUpsertBulk{
		create: _c,
	}
}

// CouponBookingUpsertBulk is the builder for "upsert"-ing
// a bulk of CouponBooking nodes.
type CouponBookingUpsertBulk struct {
	create *CouponBookingCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.CouponBooking.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(couponbooking.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *CouponBookingUpsertBulk) UpdateNewValues() *CouponBookingUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(couponbooking.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(couponbooking.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.CouponBooking.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *CouponBookingUpsertBulk) Ignore() *CouponBookingUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CouponBookingUpsertBulk) DoNothing() *CouponBookingUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CouponBookingCreateBulk.OnConflict
// documentation for more info.
func (u *CouponBookingUpsertBulk) Update(set func(*CouponBookingUpsert)) *CouponBookingUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CouponBookingUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *CouponBookingUpsertBulk) SetUpdatedAt(v time.Time) *CouponBookingUpsertBulk {
	return u.Update(func(s *CouponBookingUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *CouponBookingUpsertBulk) UpdateUpdatedAt() *CouponBookingUpsertBulk {
	return u.Update(func(s *CouponBookingUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetCouponID sets the "coupon_id" field.
func (u *CouponBookingUpsertBulk) SetCouponID(v uint64) *CouponBookingUpsertBulk {
	return u.Update(func(s *CouponBookingUpsert) {
		s.SetCouponID(v)
	})
}

// UpdateCouponID sets the "coupon_id" field to the value that was provided on create.
func (u *CouponBookingUpsertBulk) UpdateCouponID() *CouponBookingUpsertBulk {
	return u.Update(func(s *CouponBookingUpsert) {
		s.UpdateCouponID()
	})
}

// SetBookingID sets the "booking_id" field.
func (u *CouponBookingUpsertBulk) SetBookingID(v string) *CouponBookingUpsertBulk {
	return u.Update(func(s *CouponBookingUpsert) {
		s.SetBookingID(v)
	})
}

// UpdateBookingID sets the "booking_id" field to the value that was provided on create.
func (u *CouponBookingUpsertBulk) UpdateBookingID() *CouponBookingUpsertBulk {
	return u.Update(func(s *CouponBookingUpsert) {
		s.UpdateBookingID()
	})
}

// SetStatus sets the "status" field.
func (u *CouponBookingUpsertBulk) SetStatus(v coupon.CouponUsedStatus) *CouponBookingUpsertBulk {
	return u.Update(func(s *CouponBookingUpsert) {
		s.SetStatus(v)
	})
}

// AddStatus adds v to the "status" field.
func (u *CouponBookingUpsertBulk) AddStatus(v coupon.CouponUsedStatus) *CouponBookingUpsertBulk {
	return u.Update(func(s *CouponBookingUpsert) {
		s.AddStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *CouponBookingUpsertBulk) UpdateStatus() *CouponBookingUpsertBulk {
	return u.Update(func(s *CouponBookingUpsert) {
		s.UpdateStatus()
	})
}

// SetServiceIds sets the "service_ids" field.
func (u *CouponBookingUpsertBulk) SetServiceIds(v []string) *CouponBookingUpsertBulk {
	return u.Update(func(s *CouponBookingUpsert) {
		s.SetServiceIds(v)
	})
}

// UpdateServiceIds sets the "service_ids" field to the value that was provided on create.
func (u *CouponBookingUpsertBulk) UpdateServiceIds() *CouponBookingUpsertBulk {
	return u.Update(func(s *CouponBookingUpsert) {
		s.UpdateServiceIds()
	})
}

// SetCustomerID sets the "customer_id" field.
func (u *CouponBookingUpsertBulk) SetCustomerID(v string) *CouponBookingUpsertBulk {
	return u.Update(func(s *CouponBookingUpsert) {
		s.SetCustomerID(v)
	})
}

// UpdateCustomerID sets the "customer_id" field to the value that was provided on create.
func (u *CouponBookingUpsertBulk) UpdateCustomerID() *CouponBookingUpsertBulk {
	return u.Update(func(s *CouponBookingUpsert) {
		s.UpdateCustomerID()
	})
}

// ClearCustomerID clears the value of the "customer_id" field.
func (u *CouponBookingUpsertBulk) ClearCustomerID() *CouponBookingUpsertBulk {
	return u.Update(func(s *CouponBookingUpsert) {
		s.ClearCustomerID()
	})
}

// Exec executes the query.
func (u *CouponBookingUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the CouponBookingCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for CouponBookingCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CouponBookingUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
