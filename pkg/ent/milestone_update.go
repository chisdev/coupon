// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	coupon "github.com/chisdev/coupon/api"
	"github.com/chisdev/coupon/pkg/ent/milestone"
	"github.com/chisdev/coupon/pkg/ent/predicate"
	"github.com/chisdev/coupon/pkg/ent/progress"
	"github.com/chisdev/coupon/pkg/ent/reward"
)

// MilestoneUpdate is the builder for updating Milestone entities.
type MilestoneUpdate struct {
	config
	hooks     []Hook
	mutation  *MilestoneMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the MilestoneUpdate builder.
func (_u *MilestoneUpdate) Where(ps ...predicate.Milestone) *MilestoneUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *MilestoneUpdate) SetUpdatedAt(v time.Time) *MilestoneUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetName sets the "name" field.
func (_u *MilestoneUpdate) SetName(v string) *MilestoneUpdate {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *MilestoneUpdate) SetNillableName(v *string) *MilestoneUpdate {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// ClearName clears the value of the "name" field.
func (_u *MilestoneUpdate) ClearName() *MilestoneUpdate {
	_u.mutation.ClearName()
	return _u
}

// SetStoreID sets the "store_id" field.
func (_u *MilestoneUpdate) SetStoreID(v string) *MilestoneUpdate {
	_u.mutation.SetStoreID(v)
	return _u
}

// SetNillableStoreID sets the "store_id" field if the given value is not nil.
func (_u *MilestoneUpdate) SetNillableStoreID(v *string) *MilestoneUpdate {
	if v != nil {
		_u.SetStoreID(*v)
	}
	return _u
}

// SetMilestoneType sets the "milestone_type" field.
func (_u *MilestoneUpdate) SetMilestoneType(v coupon.MilestoneType) *MilestoneUpdate {
	_u.mutation.ResetMilestoneType()
	_u.mutation.SetMilestoneType(v)
	return _u
}

// SetNillableMilestoneType sets the "milestone_type" field if the given value is not nil.
func (_u *MilestoneUpdate) SetNillableMilestoneType(v *coupon.MilestoneType) *MilestoneUpdate {
	if v != nil {
		_u.SetMilestoneType(*v)
	}
	return _u
}

// AddMilestoneType adds value to the "milestone_type" field.
func (_u *MilestoneUpdate) AddMilestoneType(v coupon.MilestoneType) *MilestoneUpdate {
	_u.mutation.AddMilestoneType(v)
	return _u
}

// SetThreshold sets the "threshold" field.
func (_u *MilestoneUpdate) SetThreshold(v int32) *MilestoneUpdate {
	_u.mutation.ResetThreshold()
	_u.mutation.SetThreshold(v)
	return _u
}

// SetNillableThreshold sets the "threshold" field if the given value is not nil.
func (_u *MilestoneUpdate) SetNillableThreshold(v *int32) *MilestoneUpdate {
	if v != nil {
		_u.SetThreshold(*v)
	}
	return _u
}

// AddThreshold adds value to the "threshold" field.
func (_u *MilestoneUpdate) AddThreshold(v int32) *MilestoneUpdate {
	_u.mutation.AddThreshold(v)
	return _u
}

// SetStep sets the "step" field.
func (_u *MilestoneUpdate) SetStep(v int32) *MilestoneUpdate {
	_u.mutation.ResetStep()
	_u.mutation.SetStep(v)
	return _u
}

// SetNillableStep sets the "step" field if the given value is not nil.
func (_u *MilestoneUpdate) SetNillableStep(v *int32) *MilestoneUpdate {
	if v != nil {
		_u.SetStep(*v)
	}
	return _u
}

// AddStep adds value to the "step" field.
func (_u *MilestoneUpdate) AddStep(v int32) *MilestoneUpdate {
	_u.mutation.AddStep(v)
	return _u
}

// AddRewardIDs adds the "reward" edge to the Reward entity by IDs.
func (_u *MilestoneUpdate) AddRewardIDs(ids ...uint64) *MilestoneUpdate {
	_u.mutation.AddRewardIDs(ids...)
	return _u
}

// AddReward adds the "reward" edges to the Reward entity.
func (_u *MilestoneUpdate) AddReward(v ...*Reward) *MilestoneUpdate {
	ids := make([]uint64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddRewardIDs(ids...)
}

// AddProgresIDs adds the "progress" edge to the Progress entity by IDs.
func (_u *MilestoneUpdate) AddProgresIDs(ids ...uint64) *MilestoneUpdate {
	_u.mutation.AddProgresIDs(ids...)
	return _u
}

// AddProgress adds the "progress" edges to the Progress entity.
func (_u *MilestoneUpdate) AddProgress(v ...*Progress) *MilestoneUpdate {
	ids := make([]uint64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddProgresIDs(ids...)
}

// Mutation returns the MilestoneMutation object of the builder.
func (_u *MilestoneUpdate) Mutation() *MilestoneMutation {
	return _u.mutation
}

// ClearReward clears all "reward" edges to the Reward entity.
func (_u *MilestoneUpdate) ClearReward() *MilestoneUpdate {
	_u.mutation.ClearReward()
	return _u
}

// RemoveRewardIDs removes the "reward" edge to Reward entities by IDs.
func (_u *MilestoneUpdate) RemoveRewardIDs(ids ...uint64) *MilestoneUpdate {
	_u.mutation.RemoveRewardIDs(ids...)
	return _u
}

// RemoveReward removes "reward" edges to Reward entities.
func (_u *MilestoneUpdate) RemoveReward(v ...*Reward) *MilestoneUpdate {
	ids := make([]uint64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveRewardIDs(ids...)
}

// ClearProgress clears all "progress" edges to the Progress entity.
func (_u *MilestoneUpdate) ClearProgress() *MilestoneUpdate {
	_u.mutation.ClearProgress()
	return _u
}

// RemoveProgresIDs removes the "progress" edge to Progress entities by IDs.
func (_u *MilestoneUpdate) RemoveProgresIDs(ids ...uint64) *MilestoneUpdate {
	_u.mutation.RemoveProgresIDs(ids...)
	return _u
}

// RemoveProgress removes "progress" edges to Progress entities.
func (_u *MilestoneUpdate) RemoveProgress(v ...*Progress) *MilestoneUpdate {
	ids := make([]uint64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveProgresIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *MilestoneUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *MilestoneUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *MilestoneUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *MilestoneUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *MilestoneUpdate) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := milestone.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *MilestoneUpdate) check() error {
	if v, ok := _u.mutation.StoreID(); ok {
		if err := milestone.StoreIDValidator(v); err != nil {
			return &ValidationError{Name: "store_id", err: fmt.Errorf(`ent: validator failed for field "Milestone.store_id": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *MilestoneUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *MilestoneUpdate {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *MilestoneUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(milestone.Table, milestone.Columns, sqlgraph.NewFieldSpec(milestone.FieldID, field.TypeUint64))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(milestone.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(milestone.FieldName, field.TypeString, value)
	}
	if _u.mutation.NameCleared() {
		_spec.ClearField(milestone.FieldName, field.TypeString)
	}
	if value, ok := _u.mutation.StoreID(); ok {
		_spec.SetField(milestone.FieldStoreID, field.TypeString, value)
	}
	if value, ok := _u.mutation.MilestoneType(); ok {
		_spec.SetField(milestone.FieldMilestoneType, field.TypeInt32, value)
	}
	if value, ok := _u.mutation.AddedMilestoneType(); ok {
		_spec.AddField(milestone.FieldMilestoneType, field.TypeInt32, value)
	}
	if value, ok := _u.mutation.Threshold(); ok {
		_spec.SetField(milestone.FieldThreshold, field.TypeInt32, value)
	}
	if value, ok := _u.mutation.AddedThreshold(); ok {
		_spec.AddField(milestone.FieldThreshold, field.TypeInt32, value)
	}
	if value, ok := _u.mutation.Step(); ok {
		_spec.SetField(milestone.FieldStep, field.TypeInt32, value)
	}
	if value, ok := _u.mutation.AddedStep(); ok {
		_spec.AddField(milestone.FieldStep, field.TypeInt32, value)
	}
	if _u.mutation.RewardCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   milestone.RewardTable,
			Columns: []string{milestone.RewardColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(reward.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedRewardIDs(); len(nodes) > 0 && !_u.mutation.RewardCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   milestone.RewardTable,
			Columns: []string{milestone.RewardColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(reward.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RewardIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   milestone.RewardTable,
			Columns: []string{milestone.RewardColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(reward.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ProgressCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   milestone.ProgressTable,
			Columns: []string{milestone.ProgressColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(progress.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedProgressIDs(); len(nodes) > 0 && !_u.mutation.ProgressCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   milestone.ProgressTable,
			Columns: []string{milestone.ProgressColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(progress.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ProgressIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   milestone.ProgressTable,
			Columns: []string{milestone.ProgressColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(progress.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(_u.modifiers...)
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{milestone.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// MilestoneUpdateOne is the builder for updating a single Milestone entity.
type MilestoneUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *MilestoneMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *MilestoneUpdateOne) SetUpdatedAt(v time.Time) *MilestoneUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetName sets the "name" field.
func (_u *MilestoneUpdateOne) SetName(v string) *MilestoneUpdateOne {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *MilestoneUpdateOne) SetNillableName(v *string) *MilestoneUpdateOne {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// ClearName clears the value of the "name" field.
func (_u *MilestoneUpdateOne) ClearName() *MilestoneUpdateOne {
	_u.mutation.ClearName()
	return _u
}

// SetStoreID sets the "store_id" field.
func (_u *MilestoneUpdateOne) SetStoreID(v string) *MilestoneUpdateOne {
	_u.mutation.SetStoreID(v)
	return _u
}

// SetNillableStoreID sets the "store_id" field if the given value is not nil.
func (_u *MilestoneUpdateOne) SetNillableStoreID(v *string) *MilestoneUpdateOne {
	if v != nil {
		_u.SetStoreID(*v)
	}
	return _u
}

// SetMilestoneType sets the "milestone_type" field.
func (_u *MilestoneUpdateOne) SetMilestoneType(v coupon.MilestoneType) *MilestoneUpdateOne {
	_u.mutation.ResetMilestoneType()
	_u.mutation.SetMilestoneType(v)
	return _u
}

// SetNillableMilestoneType sets the "milestone_type" field if the given value is not nil.
func (_u *MilestoneUpdateOne) SetNillableMilestoneType(v *coupon.MilestoneType) *MilestoneUpdateOne {
	if v != nil {
		_u.SetMilestoneType(*v)
	}
	return _u
}

// AddMilestoneType adds value to the "milestone_type" field.
func (_u *MilestoneUpdateOne) AddMilestoneType(v coupon.MilestoneType) *MilestoneUpdateOne {
	_u.mutation.AddMilestoneType(v)
	return _u
}

// SetThreshold sets the "threshold" field.
func (_u *MilestoneUpdateOne) SetThreshold(v int32) *MilestoneUpdateOne {
	_u.mutation.ResetThreshold()
	_u.mutation.SetThreshold(v)
	return _u
}

// SetNillableThreshold sets the "threshold" field if the given value is not nil.
func (_u *MilestoneUpdateOne) SetNillableThreshold(v *int32) *MilestoneUpdateOne {
	if v != nil {
		_u.SetThreshold(*v)
	}
	return _u
}

// AddThreshold adds value to the "threshold" field.
func (_u *MilestoneUpdateOne) AddThreshold(v int32) *MilestoneUpdateOne {
	_u.mutation.AddThreshold(v)
	return _u
}

// SetStep sets the "step" field.
func (_u *MilestoneUpdateOne) SetStep(v int32) *MilestoneUpdateOne {
	_u.mutation.ResetStep()
	_u.mutation.SetStep(v)
	return _u
}

// SetNillableStep sets the "step" field if the given value is not nil.
func (_u *MilestoneUpdateOne) SetNillableStep(v *int32) *MilestoneUpdateOne {
	if v != nil {
		_u.SetStep(*v)
	}
	return _u
}

// AddStep adds value to the "step" field.
func (_u *MilestoneUpdateOne) AddStep(v int32) *MilestoneUpdateOne {
	_u.mutation.AddStep(v)
	return _u
}

// AddRewardIDs adds the "reward" edge to the Reward entity by IDs.
func (_u *MilestoneUpdateOne) AddRewardIDs(ids ...uint64) *MilestoneUpdateOne {
	_u.mutation.AddRewardIDs(ids...)
	return _u
}

// AddReward adds the "reward" edges to the Reward entity.
func (_u *MilestoneUpdateOne) AddReward(v ...*Reward) *MilestoneUpdateOne {
	ids := make([]uint64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddRewardIDs(ids...)
}

// AddProgresIDs adds the "progress" edge to the Progress entity by IDs.
func (_u *MilestoneUpdateOne) AddProgresIDs(ids ...uint64) *MilestoneUpdateOne {
	_u.mutation.AddProgresIDs(ids...)
	return _u
}

// AddProgress adds the "progress" edges to the Progress entity.
func (_u *MilestoneUpdateOne) AddProgress(v ...*Progress) *MilestoneUpdateOne {
	ids := make([]uint64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddProgresIDs(ids...)
}

// Mutation returns the MilestoneMutation object of the builder.
func (_u *MilestoneUpdateOne) Mutation() *MilestoneMutation {
	return _u.mutation
}

// ClearReward clears all "reward" edges to the Reward entity.
func (_u *MilestoneUpdateOne) ClearReward() *MilestoneUpdateOne {
	_u.mutation.ClearReward()
	return _u
}

// RemoveRewardIDs removes the "reward" edge to Reward entities by IDs.
func (_u *MilestoneUpdateOne) RemoveRewardIDs(ids ...uint64) *MilestoneUpdateOne {
	_u.mutation.RemoveRewardIDs(ids...)
	return _u
}

// RemoveReward removes "reward" edges to Reward entities.
func (_u *MilestoneUpdateOne) RemoveReward(v ...*Reward) *MilestoneUpdateOne {
	ids := make([]uint64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveRewardIDs(ids...)
}

// ClearProgress clears all "progress" edges to the Progress entity.
func (_u *MilestoneUpdateOne) ClearProgress() *MilestoneUpdateOne {
	_u.mutation.ClearProgress()
	return _u
}

// RemoveProgresIDs removes the "progress" edge to Progress entities by IDs.
func (_u *MilestoneUpdateOne) RemoveProgresIDs(ids ...uint64) *MilestoneUpdateOne {
	_u.mutation.RemoveProgresIDs(ids...)
	return _u
}

// RemoveProgress removes "progress" edges to Progress entities.
func (_u *MilestoneUpdateOne) RemoveProgress(v ...*Progress) *MilestoneUpdateOne {
	ids := make([]uint64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveProgresIDs(ids...)
}

// Where appends a list predicates to the MilestoneUpdate builder.
func (_u *MilestoneUpdateOne) Where(ps ...predicate.Milestone) *MilestoneUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *MilestoneUpdateOne) Select(field string, fields ...string) *MilestoneUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated Milestone entity.
func (_u *MilestoneUpdateOne) Save(ctx context.Context) (*Milestone, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *MilestoneUpdateOne) SaveX(ctx context.Context) *Milestone {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *MilestoneUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *MilestoneUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *MilestoneUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := milestone.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *MilestoneUpdateOne) check() error {
	if v, ok := _u.mutation.StoreID(); ok {
		if err := milestone.StoreIDValidator(v); err != nil {
			return &ValidationError{Name: "store_id", err: fmt.Errorf(`ent: validator failed for field "Milestone.store_id": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *MilestoneUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *MilestoneUpdateOne {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *MilestoneUpdateOne) sqlSave(ctx context.Context) (_node *Milestone, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(milestone.Table, milestone.Columns, sqlgraph.NewFieldSpec(milestone.FieldID, field.TypeUint64))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Milestone.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, milestone.FieldID)
		for _, f := range fields {
			if !milestone.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != milestone.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(milestone.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(milestone.FieldName, field.TypeString, value)
	}
	if _u.mutation.NameCleared() {
		_spec.ClearField(milestone.FieldName, field.TypeString)
	}
	if value, ok := _u.mutation.StoreID(); ok {
		_spec.SetField(milestone.FieldStoreID, field.TypeString, value)
	}
	if value, ok := _u.mutation.MilestoneType(); ok {
		_spec.SetField(milestone.FieldMilestoneType, field.TypeInt32, value)
	}
	if value, ok := _u.mutation.AddedMilestoneType(); ok {
		_spec.AddField(milestone.FieldMilestoneType, field.TypeInt32, value)
	}
	if value, ok := _u.mutation.Threshold(); ok {
		_spec.SetField(milestone.FieldThreshold, field.TypeInt32, value)
	}
	if value, ok := _u.mutation.AddedThreshold(); ok {
		_spec.AddField(milestone.FieldThreshold, field.TypeInt32, value)
	}
	if value, ok := _u.mutation.Step(); ok {
		_spec.SetField(milestone.FieldStep, field.TypeInt32, value)
	}
	if value, ok := _u.mutation.AddedStep(); ok {
		_spec.AddField(milestone.FieldStep, field.TypeInt32, value)
	}
	if _u.mutation.RewardCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   milestone.RewardTable,
			Columns: []string{milestone.RewardColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(reward.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedRewardIDs(); len(nodes) > 0 && !_u.mutation.RewardCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   milestone.RewardTable,
			Columns: []string{milestone.RewardColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(reward.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RewardIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   milestone.RewardTable,
			Columns: []string{milestone.RewardColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(reward.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ProgressCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   milestone.ProgressTable,
			Columns: []string{milestone.ProgressColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(progress.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedProgressIDs(); len(nodes) > 0 && !_u.mutation.ProgressCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   milestone.ProgressTable,
			Columns: []string{milestone.ProgressColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(progress.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ProgressIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   milestone.ProgressTable,
			Columns: []string{milestone.ProgressColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(progress.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(_u.modifiers...)
	_node = &Milestone{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{milestone.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
