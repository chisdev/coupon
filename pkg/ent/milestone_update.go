// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	coupon "github.com/chisdev/coupon/api"
	"github.com/chisdev/coupon/pkg/ent/currency"
	"github.com/chisdev/coupon/pkg/ent/milestone"
	"github.com/chisdev/coupon/pkg/ent/predicate"
)

// MilestoneUpdate is the builder for updating Milestone entities.
type MilestoneUpdate struct {
	config
	hooks     []Hook
	mutation  *MilestoneMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the MilestoneUpdate builder.
func (_u *MilestoneUpdate) Where(ps ...predicate.Milestone) *MilestoneUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *MilestoneUpdate) SetUpdatedAt(v time.Time) *MilestoneUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetName sets the "name" field.
func (_u *MilestoneUpdate) SetName(v string) *MilestoneUpdate {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *MilestoneUpdate) SetNillableName(v *string) *MilestoneUpdate {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// ClearName clears the value of the "name" field.
func (_u *MilestoneUpdate) ClearName() *MilestoneUpdate {
	_u.mutation.ClearName()
	return _u
}

// SetStoreID sets the "store_id" field.
func (_u *MilestoneUpdate) SetStoreID(v string) *MilestoneUpdate {
	_u.mutation.SetStoreID(v)
	return _u
}

// SetNillableStoreID sets the "store_id" field if the given value is not nil.
func (_u *MilestoneUpdate) SetNillableStoreID(v *string) *MilestoneUpdate {
	if v != nil {
		_u.SetStoreID(*v)
	}
	return _u
}

// SetExpireAt sets the "expire_at" field.
func (_u *MilestoneUpdate) SetExpireAt(v time.Time) *MilestoneUpdate {
	_u.mutation.SetExpireAt(v)
	return _u
}

// SetNillableExpireAt sets the "expire_at" field if the given value is not nil.
func (_u *MilestoneUpdate) SetNillableExpireAt(v *time.Time) *MilestoneUpdate {
	if v != nil {
		_u.SetExpireAt(*v)
	}
	return _u
}

// ClearExpireAt clears the value of the "expire_at" field.
func (_u *MilestoneUpdate) ClearExpireAt() *MilestoneUpdate {
	_u.mutation.ClearExpireAt()
	return _u
}

// SetServiceIds sets the "service_ids" field.
func (_u *MilestoneUpdate) SetServiceIds(v []string) *MilestoneUpdate {
	_u.mutation.SetServiceIds(v)
	return _u
}

// AppendServiceIds appends value to the "service_ids" field.
func (_u *MilestoneUpdate) AppendServiceIds(v []string) *MilestoneUpdate {
	_u.mutation.AppendServiceIds(v)
	return _u
}

// SetCouponType sets the "coupon_type" field.
func (_u *MilestoneUpdate) SetCouponType(v coupon.CouponType) *MilestoneUpdate {
	_u.mutation.ResetCouponType()
	_u.mutation.SetCouponType(v)
	return _u
}

// SetNillableCouponType sets the "coupon_type" field if the given value is not nil.
func (_u *MilestoneUpdate) SetNillableCouponType(v *coupon.CouponType) *MilestoneUpdate {
	if v != nil {
		_u.SetCouponType(*v)
	}
	return _u
}

// AddCouponType adds value to the "coupon_type" field.
func (_u *MilestoneUpdate) AddCouponType(v coupon.CouponType) *MilestoneUpdate {
	_u.mutation.AddCouponType(v)
	return _u
}

// SetMilestoneType sets the "milestone_type" field.
func (_u *MilestoneUpdate) SetMilestoneType(v coupon.MilestoneType) *MilestoneUpdate {
	_u.mutation.ResetMilestoneType()
	_u.mutation.SetMilestoneType(v)
	return _u
}

// SetNillableMilestoneType sets the "milestone_type" field if the given value is not nil.
func (_u *MilestoneUpdate) SetNillableMilestoneType(v *coupon.MilestoneType) *MilestoneUpdate {
	if v != nil {
		_u.SetMilestoneType(*v)
	}
	return _u
}

// AddMilestoneType adds value to the "milestone_type" field.
func (_u *MilestoneUpdate) AddMilestoneType(v coupon.MilestoneType) *MilestoneUpdate {
	_u.mutation.AddMilestoneType(v)
	return _u
}

// SetCurrencyID sets the "currency_id" field.
func (_u *MilestoneUpdate) SetCurrencyID(v uint64) *MilestoneUpdate {
	_u.mutation.SetCurrencyID(v)
	return _u
}

// SetNillableCurrencyID sets the "currency_id" field if the given value is not nil.
func (_u *MilestoneUpdate) SetNillableCurrencyID(v *uint64) *MilestoneUpdate {
	if v != nil {
		_u.SetCurrencyID(*v)
	}
	return _u
}

// ClearCurrencyID clears the value of the "currency_id" field.
func (_u *MilestoneUpdate) ClearCurrencyID() *MilestoneUpdate {
	_u.mutation.ClearCurrencyID()
	return _u
}

// SetUsageLimit sets the "usage_limit" field.
func (_u *MilestoneUpdate) SetUsageLimit(v int32) *MilestoneUpdate {
	_u.mutation.ResetUsageLimit()
	_u.mutation.SetUsageLimit(v)
	return _u
}

// SetNillableUsageLimit sets the "usage_limit" field if the given value is not nil.
func (_u *MilestoneUpdate) SetNillableUsageLimit(v *int32) *MilestoneUpdate {
	if v != nil {
		_u.SetUsageLimit(*v)
	}
	return _u
}

// AddUsageLimit adds value to the "usage_limit" field.
func (_u *MilestoneUpdate) AddUsageLimit(v int32) *MilestoneUpdate {
	_u.mutation.AddUsageLimit(v)
	return _u
}

// SetThreshold sets the "threshold" field.
func (_u *MilestoneUpdate) SetThreshold(v int32) *MilestoneUpdate {
	_u.mutation.ResetThreshold()
	_u.mutation.SetThreshold(v)
	return _u
}

// SetNillableThreshold sets the "threshold" field if the given value is not nil.
func (_u *MilestoneUpdate) SetNillableThreshold(v *int32) *MilestoneUpdate {
	if v != nil {
		_u.SetThreshold(*v)
	}
	return _u
}

// AddThreshold adds value to the "threshold" field.
func (_u *MilestoneUpdate) AddThreshold(v int32) *MilestoneUpdate {
	_u.mutation.AddThreshold(v)
	return _u
}

// SetStep sets the "step" field.
func (_u *MilestoneUpdate) SetStep(v int32) *MilestoneUpdate {
	_u.mutation.ResetStep()
	_u.mutation.SetStep(v)
	return _u
}

// SetNillableStep sets the "step" field if the given value is not nil.
func (_u *MilestoneUpdate) SetNillableStep(v *int32) *MilestoneUpdate {
	if v != nil {
		_u.SetStep(*v)
	}
	return _u
}

// AddStep adds value to the "step" field.
func (_u *MilestoneUpdate) AddStep(v int32) *MilestoneUpdate {
	_u.mutation.AddStep(v)
	return _u
}

// SetCouponValue sets the "coupon_value" field.
func (_u *MilestoneUpdate) SetCouponValue(v float64) *MilestoneUpdate {
	_u.mutation.ResetCouponValue()
	_u.mutation.SetCouponValue(v)
	return _u
}

// SetNillableCouponValue sets the "coupon_value" field if the given value is not nil.
func (_u *MilestoneUpdate) SetNillableCouponValue(v *float64) *MilestoneUpdate {
	if v != nil {
		_u.SetCouponValue(*v)
	}
	return _u
}

// AddCouponValue adds value to the "coupon_value" field.
func (_u *MilestoneUpdate) AddCouponValue(v float64) *MilestoneUpdate {
	_u.mutation.AddCouponValue(v)
	return _u
}

// SetCurrency sets the "currency" edge to the Currency entity.
func (_u *MilestoneUpdate) SetCurrency(v *Currency) *MilestoneUpdate {
	return _u.SetCurrencyID(v.ID)
}

// Mutation returns the MilestoneMutation object of the builder.
func (_u *MilestoneUpdate) Mutation() *MilestoneMutation {
	return _u.mutation
}

// ClearCurrency clears the "currency" edge to the Currency entity.
func (_u *MilestoneUpdate) ClearCurrency() *MilestoneUpdate {
	_u.mutation.ClearCurrency()
	return _u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *MilestoneUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *MilestoneUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *MilestoneUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *MilestoneUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *MilestoneUpdate) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := milestone.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *MilestoneUpdate) check() error {
	if v, ok := _u.mutation.StoreID(); ok {
		if err := milestone.StoreIDValidator(v); err != nil {
			return &ValidationError{Name: "store_id", err: fmt.Errorf(`ent: validator failed for field "Milestone.store_id": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *MilestoneUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *MilestoneUpdate {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *MilestoneUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(milestone.Table, milestone.Columns, sqlgraph.NewFieldSpec(milestone.FieldID, field.TypeUint64))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(milestone.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(milestone.FieldName, field.TypeString, value)
	}
	if _u.mutation.NameCleared() {
		_spec.ClearField(milestone.FieldName, field.TypeString)
	}
	if value, ok := _u.mutation.StoreID(); ok {
		_spec.SetField(milestone.FieldStoreID, field.TypeString, value)
	}
	if value, ok := _u.mutation.ExpireAt(); ok {
		_spec.SetField(milestone.FieldExpireAt, field.TypeTime, value)
	}
	if _u.mutation.ExpireAtCleared() {
		_spec.ClearField(milestone.FieldExpireAt, field.TypeTime)
	}
	if value, ok := _u.mutation.ServiceIds(); ok {
		_spec.SetField(milestone.FieldServiceIds, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedServiceIds(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, milestone.FieldServiceIds, value)
		})
	}
	if value, ok := _u.mutation.CouponType(); ok {
		_spec.SetField(milestone.FieldCouponType, field.TypeInt32, value)
	}
	if value, ok := _u.mutation.AddedCouponType(); ok {
		_spec.AddField(milestone.FieldCouponType, field.TypeInt32, value)
	}
	if value, ok := _u.mutation.MilestoneType(); ok {
		_spec.SetField(milestone.FieldMilestoneType, field.TypeInt32, value)
	}
	if value, ok := _u.mutation.AddedMilestoneType(); ok {
		_spec.AddField(milestone.FieldMilestoneType, field.TypeInt32, value)
	}
	if value, ok := _u.mutation.UsageLimit(); ok {
		_spec.SetField(milestone.FieldUsageLimit, field.TypeInt32, value)
	}
	if value, ok := _u.mutation.AddedUsageLimit(); ok {
		_spec.AddField(milestone.FieldUsageLimit, field.TypeInt32, value)
	}
	if value, ok := _u.mutation.Threshold(); ok {
		_spec.SetField(milestone.FieldThreshold, field.TypeInt32, value)
	}
	if value, ok := _u.mutation.AddedThreshold(); ok {
		_spec.AddField(milestone.FieldThreshold, field.TypeInt32, value)
	}
	if value, ok := _u.mutation.Step(); ok {
		_spec.SetField(milestone.FieldStep, field.TypeInt32, value)
	}
	if value, ok := _u.mutation.AddedStep(); ok {
		_spec.AddField(milestone.FieldStep, field.TypeInt32, value)
	}
	if value, ok := _u.mutation.CouponValue(); ok {
		_spec.SetField(milestone.FieldCouponValue, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.AddedCouponValue(); ok {
		_spec.AddField(milestone.FieldCouponValue, field.TypeFloat64, value)
	}
	if _u.mutation.CurrencyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   milestone.CurrencyTable,
			Columns: []string{milestone.CurrencyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(currency.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.CurrencyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   milestone.CurrencyTable,
			Columns: []string{milestone.CurrencyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(currency.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(_u.modifiers...)
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{milestone.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// MilestoneUpdateOne is the builder for updating a single Milestone entity.
type MilestoneUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *MilestoneMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *MilestoneUpdateOne) SetUpdatedAt(v time.Time) *MilestoneUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetName sets the "name" field.
func (_u *MilestoneUpdateOne) SetName(v string) *MilestoneUpdateOne {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *MilestoneUpdateOne) SetNillableName(v *string) *MilestoneUpdateOne {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// ClearName clears the value of the "name" field.
func (_u *MilestoneUpdateOne) ClearName() *MilestoneUpdateOne {
	_u.mutation.ClearName()
	return _u
}

// SetStoreID sets the "store_id" field.
func (_u *MilestoneUpdateOne) SetStoreID(v string) *MilestoneUpdateOne {
	_u.mutation.SetStoreID(v)
	return _u
}

// SetNillableStoreID sets the "store_id" field if the given value is not nil.
func (_u *MilestoneUpdateOne) SetNillableStoreID(v *string) *MilestoneUpdateOne {
	if v != nil {
		_u.SetStoreID(*v)
	}
	return _u
}

// SetExpireAt sets the "expire_at" field.
func (_u *MilestoneUpdateOne) SetExpireAt(v time.Time) *MilestoneUpdateOne {
	_u.mutation.SetExpireAt(v)
	return _u
}

// SetNillableExpireAt sets the "expire_at" field if the given value is not nil.
func (_u *MilestoneUpdateOne) SetNillableExpireAt(v *time.Time) *MilestoneUpdateOne {
	if v != nil {
		_u.SetExpireAt(*v)
	}
	return _u
}

// ClearExpireAt clears the value of the "expire_at" field.
func (_u *MilestoneUpdateOne) ClearExpireAt() *MilestoneUpdateOne {
	_u.mutation.ClearExpireAt()
	return _u
}

// SetServiceIds sets the "service_ids" field.
func (_u *MilestoneUpdateOne) SetServiceIds(v []string) *MilestoneUpdateOne {
	_u.mutation.SetServiceIds(v)
	return _u
}

// AppendServiceIds appends value to the "service_ids" field.
func (_u *MilestoneUpdateOne) AppendServiceIds(v []string) *MilestoneUpdateOne {
	_u.mutation.AppendServiceIds(v)
	return _u
}

// SetCouponType sets the "coupon_type" field.
func (_u *MilestoneUpdateOne) SetCouponType(v coupon.CouponType) *MilestoneUpdateOne {
	_u.mutation.ResetCouponType()
	_u.mutation.SetCouponType(v)
	return _u
}

// SetNillableCouponType sets the "coupon_type" field if the given value is not nil.
func (_u *MilestoneUpdateOne) SetNillableCouponType(v *coupon.CouponType) *MilestoneUpdateOne {
	if v != nil {
		_u.SetCouponType(*v)
	}
	return _u
}

// AddCouponType adds value to the "coupon_type" field.
func (_u *MilestoneUpdateOne) AddCouponType(v coupon.CouponType) *MilestoneUpdateOne {
	_u.mutation.AddCouponType(v)
	return _u
}

// SetMilestoneType sets the "milestone_type" field.
func (_u *MilestoneUpdateOne) SetMilestoneType(v coupon.MilestoneType) *MilestoneUpdateOne {
	_u.mutation.ResetMilestoneType()
	_u.mutation.SetMilestoneType(v)
	return _u
}

// SetNillableMilestoneType sets the "milestone_type" field if the given value is not nil.
func (_u *MilestoneUpdateOne) SetNillableMilestoneType(v *coupon.MilestoneType) *MilestoneUpdateOne {
	if v != nil {
		_u.SetMilestoneType(*v)
	}
	return _u
}

// AddMilestoneType adds value to the "milestone_type" field.
func (_u *MilestoneUpdateOne) AddMilestoneType(v coupon.MilestoneType) *MilestoneUpdateOne {
	_u.mutation.AddMilestoneType(v)
	return _u
}

// SetCurrencyID sets the "currency_id" field.
func (_u *MilestoneUpdateOne) SetCurrencyID(v uint64) *MilestoneUpdateOne {
	_u.mutation.SetCurrencyID(v)
	return _u
}

// SetNillableCurrencyID sets the "currency_id" field if the given value is not nil.
func (_u *MilestoneUpdateOne) SetNillableCurrencyID(v *uint64) *MilestoneUpdateOne {
	if v != nil {
		_u.SetCurrencyID(*v)
	}
	return _u
}

// ClearCurrencyID clears the value of the "currency_id" field.
func (_u *MilestoneUpdateOne) ClearCurrencyID() *MilestoneUpdateOne {
	_u.mutation.ClearCurrencyID()
	return _u
}

// SetUsageLimit sets the "usage_limit" field.
func (_u *MilestoneUpdateOne) SetUsageLimit(v int32) *MilestoneUpdateOne {
	_u.mutation.ResetUsageLimit()
	_u.mutation.SetUsageLimit(v)
	return _u
}

// SetNillableUsageLimit sets the "usage_limit" field if the given value is not nil.
func (_u *MilestoneUpdateOne) SetNillableUsageLimit(v *int32) *MilestoneUpdateOne {
	if v != nil {
		_u.SetUsageLimit(*v)
	}
	return _u
}

// AddUsageLimit adds value to the "usage_limit" field.
func (_u *MilestoneUpdateOne) AddUsageLimit(v int32) *MilestoneUpdateOne {
	_u.mutation.AddUsageLimit(v)
	return _u
}

// SetThreshold sets the "threshold" field.
func (_u *MilestoneUpdateOne) SetThreshold(v int32) *MilestoneUpdateOne {
	_u.mutation.ResetThreshold()
	_u.mutation.SetThreshold(v)
	return _u
}

// SetNillableThreshold sets the "threshold" field if the given value is not nil.
func (_u *MilestoneUpdateOne) SetNillableThreshold(v *int32) *MilestoneUpdateOne {
	if v != nil {
		_u.SetThreshold(*v)
	}
	return _u
}

// AddThreshold adds value to the "threshold" field.
func (_u *MilestoneUpdateOne) AddThreshold(v int32) *MilestoneUpdateOne {
	_u.mutation.AddThreshold(v)
	return _u
}

// SetStep sets the "step" field.
func (_u *MilestoneUpdateOne) SetStep(v int32) *MilestoneUpdateOne {
	_u.mutation.ResetStep()
	_u.mutation.SetStep(v)
	return _u
}

// SetNillableStep sets the "step" field if the given value is not nil.
func (_u *MilestoneUpdateOne) SetNillableStep(v *int32) *MilestoneUpdateOne {
	if v != nil {
		_u.SetStep(*v)
	}
	return _u
}

// AddStep adds value to the "step" field.
func (_u *MilestoneUpdateOne) AddStep(v int32) *MilestoneUpdateOne {
	_u.mutation.AddStep(v)
	return _u
}

// SetCouponValue sets the "coupon_value" field.
func (_u *MilestoneUpdateOne) SetCouponValue(v float64) *MilestoneUpdateOne {
	_u.mutation.ResetCouponValue()
	_u.mutation.SetCouponValue(v)
	return _u
}

// SetNillableCouponValue sets the "coupon_value" field if the given value is not nil.
func (_u *MilestoneUpdateOne) SetNillableCouponValue(v *float64) *MilestoneUpdateOne {
	if v != nil {
		_u.SetCouponValue(*v)
	}
	return _u
}

// AddCouponValue adds value to the "coupon_value" field.
func (_u *MilestoneUpdateOne) AddCouponValue(v float64) *MilestoneUpdateOne {
	_u.mutation.AddCouponValue(v)
	return _u
}

// SetCurrency sets the "currency" edge to the Currency entity.
func (_u *MilestoneUpdateOne) SetCurrency(v *Currency) *MilestoneUpdateOne {
	return _u.SetCurrencyID(v.ID)
}

// Mutation returns the MilestoneMutation object of the builder.
func (_u *MilestoneUpdateOne) Mutation() *MilestoneMutation {
	return _u.mutation
}

// ClearCurrency clears the "currency" edge to the Currency entity.
func (_u *MilestoneUpdateOne) ClearCurrency() *MilestoneUpdateOne {
	_u.mutation.ClearCurrency()
	return _u
}

// Where appends a list predicates to the MilestoneUpdate builder.
func (_u *MilestoneUpdateOne) Where(ps ...predicate.Milestone) *MilestoneUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *MilestoneUpdateOne) Select(field string, fields ...string) *MilestoneUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated Milestone entity.
func (_u *MilestoneUpdateOne) Save(ctx context.Context) (*Milestone, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *MilestoneUpdateOne) SaveX(ctx context.Context) *Milestone {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *MilestoneUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *MilestoneUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *MilestoneUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := milestone.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *MilestoneUpdateOne) check() error {
	if v, ok := _u.mutation.StoreID(); ok {
		if err := milestone.StoreIDValidator(v); err != nil {
			return &ValidationError{Name: "store_id", err: fmt.Errorf(`ent: validator failed for field "Milestone.store_id": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *MilestoneUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *MilestoneUpdateOne {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *MilestoneUpdateOne) sqlSave(ctx context.Context) (_node *Milestone, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(milestone.Table, milestone.Columns, sqlgraph.NewFieldSpec(milestone.FieldID, field.TypeUint64))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Milestone.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, milestone.FieldID)
		for _, f := range fields {
			if !milestone.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != milestone.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(milestone.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(milestone.FieldName, field.TypeString, value)
	}
	if _u.mutation.NameCleared() {
		_spec.ClearField(milestone.FieldName, field.TypeString)
	}
	if value, ok := _u.mutation.StoreID(); ok {
		_spec.SetField(milestone.FieldStoreID, field.TypeString, value)
	}
	if value, ok := _u.mutation.ExpireAt(); ok {
		_spec.SetField(milestone.FieldExpireAt, field.TypeTime, value)
	}
	if _u.mutation.ExpireAtCleared() {
		_spec.ClearField(milestone.FieldExpireAt, field.TypeTime)
	}
	if value, ok := _u.mutation.ServiceIds(); ok {
		_spec.SetField(milestone.FieldServiceIds, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedServiceIds(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, milestone.FieldServiceIds, value)
		})
	}
	if value, ok := _u.mutation.CouponType(); ok {
		_spec.SetField(milestone.FieldCouponType, field.TypeInt32, value)
	}
	if value, ok := _u.mutation.AddedCouponType(); ok {
		_spec.AddField(milestone.FieldCouponType, field.TypeInt32, value)
	}
	if value, ok := _u.mutation.MilestoneType(); ok {
		_spec.SetField(milestone.FieldMilestoneType, field.TypeInt32, value)
	}
	if value, ok := _u.mutation.AddedMilestoneType(); ok {
		_spec.AddField(milestone.FieldMilestoneType, field.TypeInt32, value)
	}
	if value, ok := _u.mutation.UsageLimit(); ok {
		_spec.SetField(milestone.FieldUsageLimit, field.TypeInt32, value)
	}
	if value, ok := _u.mutation.AddedUsageLimit(); ok {
		_spec.AddField(milestone.FieldUsageLimit, field.TypeInt32, value)
	}
	if value, ok := _u.mutation.Threshold(); ok {
		_spec.SetField(milestone.FieldThreshold, field.TypeInt32, value)
	}
	if value, ok := _u.mutation.AddedThreshold(); ok {
		_spec.AddField(milestone.FieldThreshold, field.TypeInt32, value)
	}
	if value, ok := _u.mutation.Step(); ok {
		_spec.SetField(milestone.FieldStep, field.TypeInt32, value)
	}
	if value, ok := _u.mutation.AddedStep(); ok {
		_spec.AddField(milestone.FieldStep, field.TypeInt32, value)
	}
	if value, ok := _u.mutation.CouponValue(); ok {
		_spec.SetField(milestone.FieldCouponValue, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.AddedCouponValue(); ok {
		_spec.AddField(milestone.FieldCouponValue, field.TypeFloat64, value)
	}
	if _u.mutation.CurrencyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   milestone.CurrencyTable,
			Columns: []string{milestone.CurrencyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(currency.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.CurrencyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   milestone.CurrencyTable,
			Columns: []string{milestone.CurrencyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(currency.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(_u.modifiers...)
	_node = &Milestone{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{milestone.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
