// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	coupon "github.com/chisdev/coupon/api"
	entcoupon "github.com/chisdev/coupon/pkg/ent/coupon"
	"github.com/chisdev/coupon/pkg/ent/currency"
)

// Coupon is the model entity for the Coupon schema.
type Coupon struct {
	config `json:"-"`
	// ID of the ent.
	ID uint64 `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Code holds the value of the "code" field.
	Code string `json:"code,omitempty"`
	// Value holds the value of the "value" field.
	Value float64 `json:"value,omitempty"`
	// StoreID holds the value of the "store_id" field.
	StoreID string `json:"store_id,omitempty"`
	// ExpireAt holds the value of the "expire_at" field.
	ExpireAt *time.Time `json:"expire_at,omitempty"`
	// CustomerID holds the value of the "customer_id" field.
	CustomerID *string `json:"customer_id,omitempty"`
	// ServiceIds holds the value of the "service_ids" field.
	ServiceIds []string `json:"service_ids,omitempty"`
	// Type holds the value of the "type" field.
	Type coupon.CouponType `json:"type,omitempty"`
	// CurrencyID holds the value of the "currency_id" field.
	CurrencyID *uint64 `json:"currency_id,omitempty"`
	// UsageLimit holds the value of the "usage_limit" field.
	UsageLimit *int32 `json:"usage_limit,omitempty"`
	// Status holds the value of the "status" field.
	Status coupon.CouponStatus `json:"status,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CouponQuery when eager-loading is set.
	Edges        CouponEdges `json:"edges"`
	selectValues sql.SelectValues
}

// CouponEdges holds the relations/edges for other nodes in the graph.
type CouponEdges struct {
	// Currency holds the value of the currency edge.
	Currency *Currency `json:"currency,omitempty"`
	// CouponBookings holds the value of the coupon_bookings edge.
	CouponBookings []*CouponBooking `json:"coupon_bookings,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// CurrencyOrErr returns the Currency value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CouponEdges) CurrencyOrErr() (*Currency, error) {
	if e.Currency != nil {
		return e.Currency, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: currency.Label}
	}
	return nil, &NotLoadedError{edge: "currency"}
}

// CouponBookingsOrErr returns the CouponBookings value or an error if the edge
// was not loaded in eager-loading.
func (e CouponEdges) CouponBookingsOrErr() ([]*CouponBooking, error) {
	if e.loadedTypes[1] {
		return e.CouponBookings, nil
	}
	return nil, &NotLoadedError{edge: "coupon_bookings"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Coupon) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case entcoupon.FieldServiceIds:
			values[i] = new([]byte)
		case entcoupon.FieldValue:
			values[i] = new(sql.NullFloat64)
		case entcoupon.FieldID, entcoupon.FieldType, entcoupon.FieldCurrencyID, entcoupon.FieldUsageLimit, entcoupon.FieldStatus:
			values[i] = new(sql.NullInt64)
		case entcoupon.FieldCode, entcoupon.FieldStoreID, entcoupon.FieldCustomerID:
			values[i] = new(sql.NullString)
		case entcoupon.FieldCreatedAt, entcoupon.FieldUpdatedAt, entcoupon.FieldExpireAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Coupon fields.
func (_m *Coupon) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case entcoupon.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			_m.ID = uint64(value.Int64)
		case entcoupon.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				_m.CreatedAt = value.Time
			}
		case entcoupon.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				_m.UpdatedAt = value.Time
			}
		case entcoupon.FieldCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field code", values[i])
			} else if value.Valid {
				_m.Code = value.String
			}
		case entcoupon.FieldValue:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field value", values[i])
			} else if value.Valid {
				_m.Value = value.Float64
			}
		case entcoupon.FieldStoreID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field store_id", values[i])
			} else if value.Valid {
				_m.StoreID = value.String
			}
		case entcoupon.FieldExpireAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field expire_at", values[i])
			} else if value.Valid {
				_m.ExpireAt = new(time.Time)
				*_m.ExpireAt = value.Time
			}
		case entcoupon.FieldCustomerID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field customer_id", values[i])
			} else if value.Valid {
				_m.CustomerID = new(string)
				*_m.CustomerID = value.String
			}
		case entcoupon.FieldServiceIds:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field service_ids", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.ServiceIds); err != nil {
					return fmt.Errorf("unmarshal field service_ids: %w", err)
				}
			}
		case entcoupon.FieldType:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				_m.Type = coupon.CouponType(value.Int64)
			}
		case entcoupon.FieldCurrencyID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field currency_id", values[i])
			} else if value.Valid {
				_m.CurrencyID = new(uint64)
				*_m.CurrencyID = uint64(value.Int64)
			}
		case entcoupon.FieldUsageLimit:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field usage_limit", values[i])
			} else if value.Valid {
				_m.UsageLimit = new(int32)
				*_m.UsageLimit = int32(value.Int64)
			}
		case entcoupon.FieldStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				_m.Status = coupon.CouponStatus(value.Int64)
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// GetValue returns the ent.Value that was dynamically selected and assigned to the Coupon.
// This includes values selected through modifiers, order, etc.
func (_m *Coupon) GetValue(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryCurrency queries the "currency" edge of the Coupon entity.
func (_m *Coupon) QueryCurrency() *CurrencyQuery {
	return NewCouponClient(_m.config).QueryCurrency(_m)
}

// QueryCouponBookings queries the "coupon_bookings" edge of the Coupon entity.
func (_m *Coupon) QueryCouponBookings() *CouponBookingQuery {
	return NewCouponClient(_m.config).QueryCouponBookings(_m)
}

// Update returns a builder for updating this Coupon.
// Note that you need to call Coupon.Unwrap() before calling this method if this Coupon
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *Coupon) Update() *CouponUpdateOne {
	return NewCouponClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the Coupon entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *Coupon) Unwrap() *Coupon {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: Coupon is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *Coupon) String() string {
	var builder strings.Builder
	builder.WriteString("Coupon(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("created_at=")
	builder.WriteString(_m.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(_m.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("code=")
	builder.WriteString(_m.Code)
	builder.WriteString(", ")
	builder.WriteString("value=")
	builder.WriteString(fmt.Sprintf("%v", _m.Value))
	builder.WriteString(", ")
	builder.WriteString("store_id=")
	builder.WriteString(_m.StoreID)
	builder.WriteString(", ")
	if v := _m.ExpireAt; v != nil {
		builder.WriteString("expire_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := _m.CustomerID; v != nil {
		builder.WriteString("customer_id=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("service_ids=")
	builder.WriteString(fmt.Sprintf("%v", _m.ServiceIds))
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(fmt.Sprintf("%v", _m.Type))
	builder.WriteString(", ")
	if v := _m.CurrencyID; v != nil {
		builder.WriteString("currency_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := _m.UsageLimit; v != nil {
		builder.WriteString("usage_limit=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", _m.Status))
	builder.WriteByte(')')
	return builder.String()
}

// Coupons is a parsable slice of Coupon.
type Coupons []*Coupon
