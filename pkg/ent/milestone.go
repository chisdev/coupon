// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	coupon "github.com/chisdev/coupon/api"
	"github.com/chisdev/coupon/pkg/ent/currency"
	"github.com/chisdev/coupon/pkg/ent/milestone"
)

// Milestone is the model entity for the Milestone schema.
type Milestone struct {
	config `json:"-"`
	// ID of the ent.
	ID uint64 `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Name holds the value of the "name" field.
	Name *string `json:"name,omitempty"`
	// StoreID holds the value of the "store_id" field.
	StoreID string `json:"store_id,omitempty"`
	// ExpireAt holds the value of the "expire_at" field.
	ExpireAt *time.Time `json:"expire_at,omitempty"`
	// ServiceIds holds the value of the "service_ids" field.
	ServiceIds []string `json:"service_ids,omitempty"`
	// CouponType holds the value of the "coupon_type" field.
	CouponType coupon.CouponType `json:"coupon_type,omitempty"`
	// MilestoneType holds the value of the "milestone_type" field.
	MilestoneType coupon.MilestoneType `json:"milestone_type,omitempty"`
	// CurrencyID holds the value of the "currency_id" field.
	CurrencyID uint64 `json:"currency_id,omitempty"`
	// UsageLimit holds the value of the "usage_limit" field.
	UsageLimit int32 `json:"usage_limit,omitempty"`
	// Threshold holds the value of the "threshold" field.
	Threshold int32 `json:"threshold,omitempty"`
	// Step holds the value of the "step" field.
	Step int32 `json:"step,omitempty"`
	// CouponValue holds the value of the "coupon_value" field.
	CouponValue float64 `json:"coupon_value,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the MilestoneQuery when eager-loading is set.
	Edges        MilestoneEdges `json:"edges"`
	selectValues sql.SelectValues
}

// MilestoneEdges holds the relations/edges for other nodes in the graph.
type MilestoneEdges struct {
	// Currency holds the value of the currency edge.
	Currency *Currency `json:"currency,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// CurrencyOrErr returns the Currency value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e MilestoneEdges) CurrencyOrErr() (*Currency, error) {
	if e.Currency != nil {
		return e.Currency, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: currency.Label}
	}
	return nil, &NotLoadedError{edge: "currency"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Milestone) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case milestone.FieldServiceIds:
			values[i] = new([]byte)
		case milestone.FieldCouponValue:
			values[i] = new(sql.NullFloat64)
		case milestone.FieldID, milestone.FieldCouponType, milestone.FieldMilestoneType, milestone.FieldCurrencyID, milestone.FieldUsageLimit, milestone.FieldThreshold, milestone.FieldStep:
			values[i] = new(sql.NullInt64)
		case milestone.FieldName, milestone.FieldStoreID:
			values[i] = new(sql.NullString)
		case milestone.FieldCreatedAt, milestone.FieldUpdatedAt, milestone.FieldExpireAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Milestone fields.
func (_m *Milestone) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case milestone.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			_m.ID = uint64(value.Int64)
		case milestone.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				_m.CreatedAt = value.Time
			}
		case milestone.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				_m.UpdatedAt = value.Time
			}
		case milestone.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				_m.Name = new(string)
				*_m.Name = value.String
			}
		case milestone.FieldStoreID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field store_id", values[i])
			} else if value.Valid {
				_m.StoreID = value.String
			}
		case milestone.FieldExpireAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field expire_at", values[i])
			} else if value.Valid {
				_m.ExpireAt = new(time.Time)
				*_m.ExpireAt = value.Time
			}
		case milestone.FieldServiceIds:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field service_ids", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.ServiceIds); err != nil {
					return fmt.Errorf("unmarshal field service_ids: %w", err)
				}
			}
		case milestone.FieldCouponType:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field coupon_type", values[i])
			} else if value.Valid {
				_m.CouponType = coupon.CouponType(value.Int64)
			}
		case milestone.FieldMilestoneType:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field milestone_type", values[i])
			} else if value.Valid {
				_m.MilestoneType = coupon.MilestoneType(value.Int64)
			}
		case milestone.FieldCurrencyID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field currency_id", values[i])
			} else if value.Valid {
				_m.CurrencyID = uint64(value.Int64)
			}
		case milestone.FieldUsageLimit:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field usage_limit", values[i])
			} else if value.Valid {
				_m.UsageLimit = int32(value.Int64)
			}
		case milestone.FieldThreshold:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field threshold", values[i])
			} else if value.Valid {
				_m.Threshold = int32(value.Int64)
			}
		case milestone.FieldStep:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field step", values[i])
			} else if value.Valid {
				_m.Step = int32(value.Int64)
			}
		case milestone.FieldCouponValue:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field coupon_value", values[i])
			} else if value.Valid {
				_m.CouponValue = value.Float64
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Milestone.
// This includes values selected through modifiers, order, etc.
func (_m *Milestone) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryCurrency queries the "currency" edge of the Milestone entity.
func (_m *Milestone) QueryCurrency() *CurrencyQuery {
	return NewMilestoneClient(_m.config).QueryCurrency(_m)
}

// Update returns a builder for updating this Milestone.
// Note that you need to call Milestone.Unwrap() before calling this method if this Milestone
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *Milestone) Update() *MilestoneUpdateOne {
	return NewMilestoneClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the Milestone entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *Milestone) Unwrap() *Milestone {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: Milestone is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *Milestone) String() string {
	var builder strings.Builder
	builder.WriteString("Milestone(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("created_at=")
	builder.WriteString(_m.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(_m.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := _m.Name; v != nil {
		builder.WriteString("name=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("store_id=")
	builder.WriteString(_m.StoreID)
	builder.WriteString(", ")
	if v := _m.ExpireAt; v != nil {
		builder.WriteString("expire_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("service_ids=")
	builder.WriteString(fmt.Sprintf("%v", _m.ServiceIds))
	builder.WriteString(", ")
	builder.WriteString("coupon_type=")
	builder.WriteString(fmt.Sprintf("%v", _m.CouponType))
	builder.WriteString(", ")
	builder.WriteString("milestone_type=")
	builder.WriteString(fmt.Sprintf("%v", _m.MilestoneType))
	builder.WriteString(", ")
	builder.WriteString("currency_id=")
	builder.WriteString(fmt.Sprintf("%v", _m.CurrencyID))
	builder.WriteString(", ")
	builder.WriteString("usage_limit=")
	builder.WriteString(fmt.Sprintf("%v", _m.UsageLimit))
	builder.WriteString(", ")
	builder.WriteString("threshold=")
	builder.WriteString(fmt.Sprintf("%v", _m.Threshold))
	builder.WriteString(", ")
	builder.WriteString("step=")
	builder.WriteString(fmt.Sprintf("%v", _m.Step))
	builder.WriteString(", ")
	builder.WriteString("coupon_value=")
	builder.WriteString(fmt.Sprintf("%v", _m.CouponValue))
	builder.WriteByte(')')
	return builder.String()
}

// Milestones is a parsable slice of Milestone.
type Milestones []*Milestone
