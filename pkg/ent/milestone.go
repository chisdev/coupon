// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	coupon "github.com/chisdev/coupon/api"
	"github.com/chisdev/coupon/pkg/ent/milestone"
)

// Milestone is the model entity for the Milestone schema.
type Milestone struct {
	config `json:"-"`
	// ID of the ent.
	ID uint64 `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// StoreID holds the value of the "store_id" field.
	StoreID string `json:"store_id,omitempty"`
	// MilestoneType holds the value of the "milestone_type" field.
	MilestoneType coupon.MilestoneType `json:"milestone_type,omitempty"`
	// Threshold holds the value of the "threshold" field.
	Threshold *int32 `json:"threshold,omitempty"`
	// Step holds the value of the "step" field.
	Step *int32 `json:"step,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the MilestoneQuery when eager-loading is set.
	Edges        MilestoneEdges `json:"edges"`
	selectValues sql.SelectValues
}

// MilestoneEdges holds the relations/edges for other nodes in the graph.
type MilestoneEdges struct {
	// Reward holds the value of the reward edge.
	Reward []*Reward `json:"reward,omitempty"`
	// Progress holds the value of the progress edge.
	Progress []*Progress `json:"progress,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// RewardOrErr returns the Reward value or an error if the edge
// was not loaded in eager-loading.
func (e MilestoneEdges) RewardOrErr() ([]*Reward, error) {
	if e.loadedTypes[0] {
		return e.Reward, nil
	}
	return nil, &NotLoadedError{edge: "reward"}
}

// ProgressOrErr returns the Progress value or an error if the edge
// was not loaded in eager-loading.
func (e MilestoneEdges) ProgressOrErr() ([]*Progress, error) {
	if e.loadedTypes[1] {
		return e.Progress, nil
	}
	return nil, &NotLoadedError{edge: "progress"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Milestone) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case milestone.FieldID, milestone.FieldMilestoneType, milestone.FieldThreshold, milestone.FieldStep:
			values[i] = new(sql.NullInt64)
		case milestone.FieldName, milestone.FieldStoreID:
			values[i] = new(sql.NullString)
		case milestone.FieldCreatedAt, milestone.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Milestone fields.
func (_m *Milestone) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case milestone.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			_m.ID = uint64(value.Int64)
		case milestone.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				_m.CreatedAt = value.Time
			}
		case milestone.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				_m.UpdatedAt = value.Time
			}
		case milestone.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				_m.Name = value.String
			}
		case milestone.FieldStoreID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field store_id", values[i])
			} else if value.Valid {
				_m.StoreID = value.String
			}
		case milestone.FieldMilestoneType:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field milestone_type", values[i])
			} else if value.Valid {
				_m.MilestoneType = coupon.MilestoneType(value.Int64)
			}
		case milestone.FieldThreshold:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field threshold", values[i])
			} else if value.Valid {
				_m.Threshold = new(int32)
				*_m.Threshold = int32(value.Int64)
			}
		case milestone.FieldStep:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field step", values[i])
			} else if value.Valid {
				_m.Step = new(int32)
				*_m.Step = int32(value.Int64)
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Milestone.
// This includes values selected through modifiers, order, etc.
func (_m *Milestone) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryReward queries the "reward" edge of the Milestone entity.
func (_m *Milestone) QueryReward() *RewardQuery {
	return NewMilestoneClient(_m.config).QueryReward(_m)
}

// QueryProgress queries the "progress" edge of the Milestone entity.
func (_m *Milestone) QueryProgress() *ProgressQuery {
	return NewMilestoneClient(_m.config).QueryProgress(_m)
}

// Update returns a builder for updating this Milestone.
// Note that you need to call Milestone.Unwrap() before calling this method if this Milestone
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *Milestone) Update() *MilestoneUpdateOne {
	return NewMilestoneClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the Milestone entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *Milestone) Unwrap() *Milestone {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: Milestone is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *Milestone) String() string {
	var builder strings.Builder
	builder.WriteString("Milestone(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("created_at=")
	builder.WriteString(_m.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(_m.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(_m.Name)
	builder.WriteString(", ")
	builder.WriteString("store_id=")
	builder.WriteString(_m.StoreID)
	builder.WriteString(", ")
	builder.WriteString("milestone_type=")
	builder.WriteString(fmt.Sprintf("%v", _m.MilestoneType))
	builder.WriteString(", ")
	if v := _m.Threshold; v != nil {
		builder.WriteString("threshold=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := _m.Step; v != nil {
		builder.WriteString("step=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteByte(')')
	return builder.String()
}

// Milestones is a parsable slice of Milestone.
type Milestones []*Milestone
