// Code generated by ent, DO NOT EDIT.

package couponbooking

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the couponbooking type in the database.
	Label = "coupon_booking"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldCouponID holds the string denoting the coupon_id field in the database.
	FieldCouponID = "coupon_id"
	// FieldBookingID holds the string denoting the booking_id field in the database.
	FieldBookingID = "booking_id"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// EdgeCoupon holds the string denoting the coupon edge name in mutations.
	EdgeCoupon = "coupon"
	// Table holds the table name of the couponbooking in the database.
	Table = "coupon_bookings"
	// CouponTable is the table that holds the coupon relation/edge.
	CouponTable = "coupon_bookings"
	// CouponInverseTable is the table name for the Coupon entity.
	// It exists in this package in order to avoid circular dependency with the "entcoupon" package.
	CouponInverseTable = "coupons"
	// CouponColumn is the table column denoting the coupon relation/edge.
	CouponColumn = "coupon_id"
)

// Columns holds all SQL columns for couponbooking fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldCouponID,
	FieldBookingID,
	FieldStatus,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
)

// OrderOption defines the ordering options for the CouponBooking queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByCouponID orders the results by the coupon_id field.
func ByCouponID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCouponID, opts...).ToFunc()
}

// ByBookingID orders the results by the booking_id field.
func ByBookingID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBookingID, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByCouponField orders the results by coupon field.
func ByCouponField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCouponStep(), sql.OrderByField(field, opts...))
	}
}
func newCouponStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CouponInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, CouponTable, CouponColumn),
	)
}
