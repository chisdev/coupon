// Code generated by ent, DO NOT EDIT.

package couponbooking

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	coupon "github.com/chisdev/coupon/api"
	"github.com/chisdev/coupon/pkg/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uint64) predicate.CouponBooking {
	return predicate.CouponBooking(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint64) predicate.CouponBooking {
	return predicate.CouponBooking(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint64) predicate.CouponBooking {
	return predicate.CouponBooking(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint64) predicate.CouponBooking {
	return predicate.CouponBooking(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint64) predicate.CouponBooking {
	return predicate.CouponBooking(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint64) predicate.CouponBooking {
	return predicate.CouponBooking(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint64) predicate.CouponBooking {
	return predicate.CouponBooking(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint64) predicate.CouponBooking {
	return predicate.CouponBooking(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint64) predicate.CouponBooking {
	return predicate.CouponBooking(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.CouponBooking {
	return predicate.CouponBooking(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.CouponBooking {
	return predicate.CouponBooking(sql.FieldEQ(FieldUpdatedAt, v))
}

// CouponID applies equality check predicate on the "coupon_id" field. It's identical to CouponIDEQ.
func CouponID(v uint64) predicate.CouponBooking {
	return predicate.CouponBooking(sql.FieldEQ(FieldCouponID, v))
}

// BookingID applies equality check predicate on the "booking_id" field. It's identical to BookingIDEQ.
func BookingID(v uint64) predicate.CouponBooking {
	return predicate.CouponBooking(sql.FieldEQ(FieldBookingID, v))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v coupon.CouponUsedStatus) predicate.CouponBooking {
	vc := int32(v)
	return predicate.CouponBooking(sql.FieldEQ(FieldStatus, vc))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.CouponBooking {
	return predicate.CouponBooking(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.CouponBooking {
	return predicate.CouponBooking(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.CouponBooking {
	return predicate.CouponBooking(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.CouponBooking {
	return predicate.CouponBooking(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.CouponBooking {
	return predicate.CouponBooking(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.CouponBooking {
	return predicate.CouponBooking(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.CouponBooking {
	return predicate.CouponBooking(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.CouponBooking {
	return predicate.CouponBooking(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.CouponBooking {
	return predicate.CouponBooking(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.CouponBooking {
	return predicate.CouponBooking(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.CouponBooking {
	return predicate.CouponBooking(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.CouponBooking {
	return predicate.CouponBooking(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.CouponBooking {
	return predicate.CouponBooking(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.CouponBooking {
	return predicate.CouponBooking(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.CouponBooking {
	return predicate.CouponBooking(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.CouponBooking {
	return predicate.CouponBooking(sql.FieldLTE(FieldUpdatedAt, v))
}

// CouponIDEQ applies the EQ predicate on the "coupon_id" field.
func CouponIDEQ(v uint64) predicate.CouponBooking {
	return predicate.CouponBooking(sql.FieldEQ(FieldCouponID, v))
}

// CouponIDNEQ applies the NEQ predicate on the "coupon_id" field.
func CouponIDNEQ(v uint64) predicate.CouponBooking {
	return predicate.CouponBooking(sql.FieldNEQ(FieldCouponID, v))
}

// CouponIDIn applies the In predicate on the "coupon_id" field.
func CouponIDIn(vs ...uint64) predicate.CouponBooking {
	return predicate.CouponBooking(sql.FieldIn(FieldCouponID, vs...))
}

// CouponIDNotIn applies the NotIn predicate on the "coupon_id" field.
func CouponIDNotIn(vs ...uint64) predicate.CouponBooking {
	return predicate.CouponBooking(sql.FieldNotIn(FieldCouponID, vs...))
}

// BookingIDEQ applies the EQ predicate on the "booking_id" field.
func BookingIDEQ(v uint64) predicate.CouponBooking {
	return predicate.CouponBooking(sql.FieldEQ(FieldBookingID, v))
}

// BookingIDNEQ applies the NEQ predicate on the "booking_id" field.
func BookingIDNEQ(v uint64) predicate.CouponBooking {
	return predicate.CouponBooking(sql.FieldNEQ(FieldBookingID, v))
}

// BookingIDIn applies the In predicate on the "booking_id" field.
func BookingIDIn(vs ...uint64) predicate.CouponBooking {
	return predicate.CouponBooking(sql.FieldIn(FieldBookingID, vs...))
}

// BookingIDNotIn applies the NotIn predicate on the "booking_id" field.
func BookingIDNotIn(vs ...uint64) predicate.CouponBooking {
	return predicate.CouponBooking(sql.FieldNotIn(FieldBookingID, vs...))
}

// BookingIDGT applies the GT predicate on the "booking_id" field.
func BookingIDGT(v uint64) predicate.CouponBooking {
	return predicate.CouponBooking(sql.FieldGT(FieldBookingID, v))
}

// BookingIDGTE applies the GTE predicate on the "booking_id" field.
func BookingIDGTE(v uint64) predicate.CouponBooking {
	return predicate.CouponBooking(sql.FieldGTE(FieldBookingID, v))
}

// BookingIDLT applies the LT predicate on the "booking_id" field.
func BookingIDLT(v uint64) predicate.CouponBooking {
	return predicate.CouponBooking(sql.FieldLT(FieldBookingID, v))
}

// BookingIDLTE applies the LTE predicate on the "booking_id" field.
func BookingIDLTE(v uint64) predicate.CouponBooking {
	return predicate.CouponBooking(sql.FieldLTE(FieldBookingID, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v coupon.CouponUsedStatus) predicate.CouponBooking {
	vc := int32(v)
	return predicate.CouponBooking(sql.FieldEQ(FieldStatus, vc))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v coupon.CouponUsedStatus) predicate.CouponBooking {
	vc := int32(v)
	return predicate.CouponBooking(sql.FieldNEQ(FieldStatus, vc))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...coupon.CouponUsedStatus) predicate.CouponBooking {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = int32(vs[i])
	}
	return predicate.CouponBooking(sql.FieldIn(FieldStatus, v...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...coupon.CouponUsedStatus) predicate.CouponBooking {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = int32(vs[i])
	}
	return predicate.CouponBooking(sql.FieldNotIn(FieldStatus, v...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v coupon.CouponUsedStatus) predicate.CouponBooking {
	vc := int32(v)
	return predicate.CouponBooking(sql.FieldGT(FieldStatus, vc))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v coupon.CouponUsedStatus) predicate.CouponBooking {
	vc := int32(v)
	return predicate.CouponBooking(sql.FieldGTE(FieldStatus, vc))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v coupon.CouponUsedStatus) predicate.CouponBooking {
	vc := int32(v)
	return predicate.CouponBooking(sql.FieldLT(FieldStatus, vc))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v coupon.CouponUsedStatus) predicate.CouponBooking {
	vc := int32(v)
	return predicate.CouponBooking(sql.FieldLTE(FieldStatus, vc))
}

// HasCoupon applies the HasEdge predicate on the "coupon" edge.
func HasCoupon() predicate.CouponBooking {
	return predicate.CouponBooking(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, CouponTable, CouponColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCouponWith applies the HasEdge predicate on the "coupon" edge with a given conditions (other predicates).
func HasCouponWith(preds ...predicate.Coupon) predicate.CouponBooking {
	return predicate.CouponBooking(func(s *sql.Selector) {
		step := newCouponStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.CouponBooking) predicate.CouponBooking {
	return predicate.CouponBooking(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.CouponBooking) predicate.CouponBooking {
	return predicate.CouponBooking(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.CouponBooking) predicate.CouponBooking {
	return predicate.CouponBooking(sql.NotPredicates(p))
}
