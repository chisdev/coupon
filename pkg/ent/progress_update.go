// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/chisdev/coupon/pkg/ent/milestone"
	"github.com/chisdev/coupon/pkg/ent/predicate"
	"github.com/chisdev/coupon/pkg/ent/progress"
)

// ProgressUpdate is the builder for updating Progress entities.
type ProgressUpdate struct {
	config
	hooks     []Hook
	mutation  *ProgressMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the ProgressUpdate builder.
func (_u *ProgressUpdate) Where(ps ...predicate.Progress) *ProgressUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *ProgressUpdate) SetUpdatedAt(v time.Time) *ProgressUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetCustomerID sets the "customer_id" field.
func (_u *ProgressUpdate) SetCustomerID(v string) *ProgressUpdate {
	_u.mutation.SetCustomerID(v)
	return _u
}

// SetNillableCustomerID sets the "customer_id" field if the given value is not nil.
func (_u *ProgressUpdate) SetNillableCustomerID(v *string) *ProgressUpdate {
	if v != nil {
		_u.SetCustomerID(*v)
	}
	return _u
}

// SetMilestoneID sets the "milestone_id" field.
func (_u *ProgressUpdate) SetMilestoneID(v uint64) *ProgressUpdate {
	_u.mutation.SetMilestoneID(v)
	return _u
}

// SetNillableMilestoneID sets the "milestone_id" field if the given value is not nil.
func (_u *ProgressUpdate) SetNillableMilestoneID(v *uint64) *ProgressUpdate {
	if v != nil {
		_u.SetMilestoneID(*v)
	}
	return _u
}

// SetProgress sets the "progress" field.
func (_u *ProgressUpdate) SetProgress(v int32) *ProgressUpdate {
	_u.mutation.ResetProgress()
	_u.mutation.SetProgress(v)
	return _u
}

// SetNillableProgress sets the "progress" field if the given value is not nil.
func (_u *ProgressUpdate) SetNillableProgress(v *int32) *ProgressUpdate {
	if v != nil {
		_u.SetProgress(*v)
	}
	return _u
}

// AddProgress adds value to the "progress" field.
func (_u *ProgressUpdate) AddProgress(v int32) *ProgressUpdate {
	_u.mutation.AddProgress(v)
	return _u
}

// SetPassCount sets the "pass_count" field.
func (_u *ProgressUpdate) SetPassCount(v int32) *ProgressUpdate {
	_u.mutation.ResetPassCount()
	_u.mutation.SetPassCount(v)
	return _u
}

// SetNillablePassCount sets the "pass_count" field if the given value is not nil.
func (_u *ProgressUpdate) SetNillablePassCount(v *int32) *ProgressUpdate {
	if v != nil {
		_u.SetPassCount(*v)
	}
	return _u
}

// AddPassCount adds value to the "pass_count" field.
func (_u *ProgressUpdate) AddPassCount(v int32) *ProgressUpdate {
	_u.mutation.AddPassCount(v)
	return _u
}

// SetMilestone sets the "milestone" edge to the Milestone entity.
func (_u *ProgressUpdate) SetMilestone(v *Milestone) *ProgressUpdate {
	return _u.SetMilestoneID(v.ID)
}

// Mutation returns the ProgressMutation object of the builder.
func (_u *ProgressUpdate) Mutation() *ProgressMutation {
	return _u.mutation
}

// ClearMilestone clears the "milestone" edge to the Milestone entity.
func (_u *ProgressUpdate) ClearMilestone() *ProgressUpdate {
	_u.mutation.ClearMilestone()
	return _u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *ProgressUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *ProgressUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *ProgressUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *ProgressUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *ProgressUpdate) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := progress.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *ProgressUpdate) check() error {
	if v, ok := _u.mutation.CustomerID(); ok {
		if err := progress.CustomerIDValidator(v); err != nil {
			return &ValidationError{Name: "customer_id", err: fmt.Errorf(`ent: validator failed for field "Progress.customer_id": %w`, err)}
		}
	}
	if _u.mutation.MilestoneCleared() && len(_u.mutation.MilestoneIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Progress.milestone"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *ProgressUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ProgressUpdate {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *ProgressUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(progress.Table, progress.Columns, sqlgraph.NewFieldSpec(progress.FieldID, field.TypeUint64))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(progress.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.CustomerID(); ok {
		_spec.SetField(progress.FieldCustomerID, field.TypeString, value)
	}
	if value, ok := _u.mutation.Progress(); ok {
		_spec.SetField(progress.FieldProgress, field.TypeInt32, value)
	}
	if value, ok := _u.mutation.AddedProgress(); ok {
		_spec.AddField(progress.FieldProgress, field.TypeInt32, value)
	}
	if value, ok := _u.mutation.PassCount(); ok {
		_spec.SetField(progress.FieldPassCount, field.TypeInt32, value)
	}
	if value, ok := _u.mutation.AddedPassCount(); ok {
		_spec.AddField(progress.FieldPassCount, field.TypeInt32, value)
	}
	if _u.mutation.MilestoneCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   progress.MilestoneTable,
			Columns: []string{progress.MilestoneColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(milestone.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.MilestoneIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   progress.MilestoneTable,
			Columns: []string{progress.MilestoneColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(milestone.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(_u.modifiers...)
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{progress.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// ProgressUpdateOne is the builder for updating a single Progress entity.
type ProgressUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *ProgressMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *ProgressUpdateOne) SetUpdatedAt(v time.Time) *ProgressUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetCustomerID sets the "customer_id" field.
func (_u *ProgressUpdateOne) SetCustomerID(v string) *ProgressUpdateOne {
	_u.mutation.SetCustomerID(v)
	return _u
}

// SetNillableCustomerID sets the "customer_id" field if the given value is not nil.
func (_u *ProgressUpdateOne) SetNillableCustomerID(v *string) *ProgressUpdateOne {
	if v != nil {
		_u.SetCustomerID(*v)
	}
	return _u
}

// SetMilestoneID sets the "milestone_id" field.
func (_u *ProgressUpdateOne) SetMilestoneID(v uint64) *ProgressUpdateOne {
	_u.mutation.SetMilestoneID(v)
	return _u
}

// SetNillableMilestoneID sets the "milestone_id" field if the given value is not nil.
func (_u *ProgressUpdateOne) SetNillableMilestoneID(v *uint64) *ProgressUpdateOne {
	if v != nil {
		_u.SetMilestoneID(*v)
	}
	return _u
}

// SetProgress sets the "progress" field.
func (_u *ProgressUpdateOne) SetProgress(v int32) *ProgressUpdateOne {
	_u.mutation.ResetProgress()
	_u.mutation.SetProgress(v)
	return _u
}

// SetNillableProgress sets the "progress" field if the given value is not nil.
func (_u *ProgressUpdateOne) SetNillableProgress(v *int32) *ProgressUpdateOne {
	if v != nil {
		_u.SetProgress(*v)
	}
	return _u
}

// AddProgress adds value to the "progress" field.
func (_u *ProgressUpdateOne) AddProgress(v int32) *ProgressUpdateOne {
	_u.mutation.AddProgress(v)
	return _u
}

// SetPassCount sets the "pass_count" field.
func (_u *ProgressUpdateOne) SetPassCount(v int32) *ProgressUpdateOne {
	_u.mutation.ResetPassCount()
	_u.mutation.SetPassCount(v)
	return _u
}

// SetNillablePassCount sets the "pass_count" field if the given value is not nil.
func (_u *ProgressUpdateOne) SetNillablePassCount(v *int32) *ProgressUpdateOne {
	if v != nil {
		_u.SetPassCount(*v)
	}
	return _u
}

// AddPassCount adds value to the "pass_count" field.
func (_u *ProgressUpdateOne) AddPassCount(v int32) *ProgressUpdateOne {
	_u.mutation.AddPassCount(v)
	return _u
}

// SetMilestone sets the "milestone" edge to the Milestone entity.
func (_u *ProgressUpdateOne) SetMilestone(v *Milestone) *ProgressUpdateOne {
	return _u.SetMilestoneID(v.ID)
}

// Mutation returns the ProgressMutation object of the builder.
func (_u *ProgressUpdateOne) Mutation() *ProgressMutation {
	return _u.mutation
}

// ClearMilestone clears the "milestone" edge to the Milestone entity.
func (_u *ProgressUpdateOne) ClearMilestone() *ProgressUpdateOne {
	_u.mutation.ClearMilestone()
	return _u
}

// Where appends a list predicates to the ProgressUpdate builder.
func (_u *ProgressUpdateOne) Where(ps ...predicate.Progress) *ProgressUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *ProgressUpdateOne) Select(field string, fields ...string) *ProgressUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated Progress entity.
func (_u *ProgressUpdateOne) Save(ctx context.Context) (*Progress, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *ProgressUpdateOne) SaveX(ctx context.Context) *Progress {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *ProgressUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *ProgressUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *ProgressUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := progress.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *ProgressUpdateOne) check() error {
	if v, ok := _u.mutation.CustomerID(); ok {
		if err := progress.CustomerIDValidator(v); err != nil {
			return &ValidationError{Name: "customer_id", err: fmt.Errorf(`ent: validator failed for field "Progress.customer_id": %w`, err)}
		}
	}
	if _u.mutation.MilestoneCleared() && len(_u.mutation.MilestoneIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Progress.milestone"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *ProgressUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ProgressUpdateOne {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *ProgressUpdateOne) sqlSave(ctx context.Context) (_node *Progress, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(progress.Table, progress.Columns, sqlgraph.NewFieldSpec(progress.FieldID, field.TypeUint64))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Progress.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, progress.FieldID)
		for _, f := range fields {
			if !progress.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != progress.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(progress.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.CustomerID(); ok {
		_spec.SetField(progress.FieldCustomerID, field.TypeString, value)
	}
	if value, ok := _u.mutation.Progress(); ok {
		_spec.SetField(progress.FieldProgress, field.TypeInt32, value)
	}
	if value, ok := _u.mutation.AddedProgress(); ok {
		_spec.AddField(progress.FieldProgress, field.TypeInt32, value)
	}
	if value, ok := _u.mutation.PassCount(); ok {
		_spec.SetField(progress.FieldPassCount, field.TypeInt32, value)
	}
	if value, ok := _u.mutation.AddedPassCount(); ok {
		_spec.AddField(progress.FieldPassCount, field.TypeInt32, value)
	}
	if _u.mutation.MilestoneCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   progress.MilestoneTable,
			Columns: []string{progress.MilestoneColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(milestone.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.MilestoneIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   progress.MilestoneTable,
			Columns: []string{progress.MilestoneColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(milestone.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(_u.modifiers...)
	_node = &Progress{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{progress.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
