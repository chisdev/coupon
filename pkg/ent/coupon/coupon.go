// Code generated by ent, DO NOT EDIT.

package entcoupon

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the coupon type in the database.
	Label = "coupon"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldCode holds the string denoting the code field in the database.
	FieldCode = "code"
	// FieldValue holds the string denoting the value field in the database.
	FieldValue = "value"
	// FieldStoreID holds the string denoting the store_id field in the database.
	FieldStoreID = "store_id"
	// FieldExpireAt holds the string denoting the expire_at field in the database.
	FieldExpireAt = "expire_at"
	// FieldCustomerID holds the string denoting the customer_id field in the database.
	FieldCustomerID = "customer_id"
	// FieldServiceIds holds the string denoting the service_ids field in the database.
	FieldServiceIds = "service_ids"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldCurrencyID holds the string denoting the currency_id field in the database.
	FieldCurrencyID = "currency_id"
	// FieldUsageLimit holds the string denoting the usage_limit field in the database.
	FieldUsageLimit = "usage_limit"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// EdgeCurrency holds the string denoting the currency edge name in mutations.
	EdgeCurrency = "currency"
	// EdgeCouponBookings holds the string denoting the coupon_bookings edge name in mutations.
	EdgeCouponBookings = "coupon_bookings"
	// Table holds the table name of the coupon in the database.
	Table = "coupons"
	// CurrencyTable is the table that holds the currency relation/edge.
	CurrencyTable = "coupons"
	// CurrencyInverseTable is the table name for the Currency entity.
	// It exists in this package in order to avoid circular dependency with the "currency" package.
	CurrencyInverseTable = "currencies"
	// CurrencyColumn is the table column denoting the currency relation/edge.
	CurrencyColumn = "currency_id"
	// CouponBookingsTable is the table that holds the coupon_bookings relation/edge.
	CouponBookingsTable = "coupon_bookings"
	// CouponBookingsInverseTable is the table name for the CouponBooking entity.
	// It exists in this package in order to avoid circular dependency with the "couponbooking" package.
	CouponBookingsInverseTable = "coupon_bookings"
	// CouponBookingsColumn is the table column denoting the coupon_bookings relation/edge.
	CouponBookingsColumn = "coupon_id"
)

// Columns holds all SQL columns for coupon fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldCode,
	FieldValue,
	FieldStoreID,
	FieldExpireAt,
	FieldCustomerID,
	FieldServiceIds,
	FieldType,
	FieldCurrencyID,
	FieldUsageLimit,
	FieldStatus,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultValue holds the default value on creation for the "value" field.
	DefaultValue float64
	// StoreIDValidator is a validator for the "store_id" field. It is called by the builders before save.
	StoreIDValidator func(string) error
	// DefaultServiceIds holds the default value on creation for the "service_ids" field.
	DefaultServiceIds []uint64
	// DefaultUsageLimit holds the default value on creation for the "usage_limit" field.
	DefaultUsageLimit int32
)

// OrderOption defines the ordering options for the Coupon queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByCode orders the results by the code field.
func ByCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCode, opts...).ToFunc()
}

// ByValue orders the results by the value field.
func ByValue(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldValue, opts...).ToFunc()
}

// ByStoreID orders the results by the store_id field.
func ByStoreID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStoreID, opts...).ToFunc()
}

// ByExpireAt orders the results by the expire_at field.
func ByExpireAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExpireAt, opts...).ToFunc()
}

// ByCustomerID orders the results by the customer_id field.
func ByCustomerID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCustomerID, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// ByCurrencyID orders the results by the currency_id field.
func ByCurrencyID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCurrencyID, opts...).ToFunc()
}

// ByUsageLimit orders the results by the usage_limit field.
func ByUsageLimit(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUsageLimit, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByCurrencyField orders the results by currency field.
func ByCurrencyField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCurrencyStep(), sql.OrderByField(field, opts...))
	}
}

// ByCouponBookingsCount orders the results by coupon_bookings count.
func ByCouponBookingsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newCouponBookingsStep(), opts...)
	}
}

// ByCouponBookings orders the results by coupon_bookings terms.
func ByCouponBookings(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCouponBookingsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newCurrencyStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CurrencyInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, CurrencyTable, CurrencyColumn),
	)
}
func newCouponBookingsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CouponBookingsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, CouponBookingsTable, CouponBookingsColumn),
	)
}
