// Code generated by ent, DO NOT EDIT.

package entcoupon

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	coupon "github.com/chisdev/coupon/api"
	"github.com/chisdev/coupon/pkg/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uint64) predicate.Coupon {
	return predicate.Coupon(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint64) predicate.Coupon {
	return predicate.Coupon(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint64) predicate.Coupon {
	return predicate.Coupon(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint64) predicate.Coupon {
	return predicate.Coupon(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint64) predicate.Coupon {
	return predicate.Coupon(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint64) predicate.Coupon {
	return predicate.Coupon(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint64) predicate.Coupon {
	return predicate.Coupon(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint64) predicate.Coupon {
	return predicate.Coupon(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint64) predicate.Coupon {
	return predicate.Coupon(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Coupon {
	return predicate.Coupon(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Coupon {
	return predicate.Coupon(sql.FieldEQ(FieldUpdatedAt, v))
}

// Code applies equality check predicate on the "code" field. It's identical to CodeEQ.
func Code(v string) predicate.Coupon {
	return predicate.Coupon(sql.FieldEQ(FieldCode, v))
}

// Value applies equality check predicate on the "value" field. It's identical to ValueEQ.
func Value(v float64) predicate.Coupon {
	return predicate.Coupon(sql.FieldEQ(FieldValue, v))
}

// StoreID applies equality check predicate on the "store_id" field. It's identical to StoreIDEQ.
func StoreID(v string) predicate.Coupon {
	return predicate.Coupon(sql.FieldEQ(FieldStoreID, v))
}

// ExpireAt applies equality check predicate on the "expire_at" field. It's identical to ExpireAtEQ.
func ExpireAt(v time.Time) predicate.Coupon {
	return predicate.Coupon(sql.FieldEQ(FieldExpireAt, v))
}

// CustomerID applies equality check predicate on the "customer_id" field. It's identical to CustomerIDEQ.
func CustomerID(v string) predicate.Coupon {
	return predicate.Coupon(sql.FieldEQ(FieldCustomerID, v))
}

// Type applies equality check predicate on the "type" field. It's identical to TypeEQ.
func Type(v coupon.CouponType) predicate.Coupon {
	vc := int32(v)
	return predicate.Coupon(sql.FieldEQ(FieldType, vc))
}

// CurrencyID applies equality check predicate on the "currency_id" field. It's identical to CurrencyIDEQ.
func CurrencyID(v uint64) predicate.Coupon {
	return predicate.Coupon(sql.FieldEQ(FieldCurrencyID, v))
}

// UsageLimit applies equality check predicate on the "usage_limit" field. It's identical to UsageLimitEQ.
func UsageLimit(v int32) predicate.Coupon {
	return predicate.Coupon(sql.FieldEQ(FieldUsageLimit, v))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v coupon.CouponStatus) predicate.Coupon {
	vc := int32(v)
	return predicate.Coupon(sql.FieldEQ(FieldStatus, vc))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Coupon {
	return predicate.Coupon(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Coupon {
	return predicate.Coupon(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Coupon {
	return predicate.Coupon(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Coupon {
	return predicate.Coupon(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Coupon {
	return predicate.Coupon(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Coupon {
	return predicate.Coupon(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Coupon {
	return predicate.Coupon(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Coupon {
	return predicate.Coupon(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Coupon {
	return predicate.Coupon(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Coupon {
	return predicate.Coupon(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Coupon {
	return predicate.Coupon(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Coupon {
	return predicate.Coupon(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Coupon {
	return predicate.Coupon(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Coupon {
	return predicate.Coupon(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Coupon {
	return predicate.Coupon(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Coupon {
	return predicate.Coupon(sql.FieldLTE(FieldUpdatedAt, v))
}

// CodeEQ applies the EQ predicate on the "code" field.
func CodeEQ(v string) predicate.Coupon {
	return predicate.Coupon(sql.FieldEQ(FieldCode, v))
}

// CodeNEQ applies the NEQ predicate on the "code" field.
func CodeNEQ(v string) predicate.Coupon {
	return predicate.Coupon(sql.FieldNEQ(FieldCode, v))
}

// CodeIn applies the In predicate on the "code" field.
func CodeIn(vs ...string) predicate.Coupon {
	return predicate.Coupon(sql.FieldIn(FieldCode, vs...))
}

// CodeNotIn applies the NotIn predicate on the "code" field.
func CodeNotIn(vs ...string) predicate.Coupon {
	return predicate.Coupon(sql.FieldNotIn(FieldCode, vs...))
}

// CodeGT applies the GT predicate on the "code" field.
func CodeGT(v string) predicate.Coupon {
	return predicate.Coupon(sql.FieldGT(FieldCode, v))
}

// CodeGTE applies the GTE predicate on the "code" field.
func CodeGTE(v string) predicate.Coupon {
	return predicate.Coupon(sql.FieldGTE(FieldCode, v))
}

// CodeLT applies the LT predicate on the "code" field.
func CodeLT(v string) predicate.Coupon {
	return predicate.Coupon(sql.FieldLT(FieldCode, v))
}

// CodeLTE applies the LTE predicate on the "code" field.
func CodeLTE(v string) predicate.Coupon {
	return predicate.Coupon(sql.FieldLTE(FieldCode, v))
}

// CodeContains applies the Contains predicate on the "code" field.
func CodeContains(v string) predicate.Coupon {
	return predicate.Coupon(sql.FieldContains(FieldCode, v))
}

// CodeHasPrefix applies the HasPrefix predicate on the "code" field.
func CodeHasPrefix(v string) predicate.Coupon {
	return predicate.Coupon(sql.FieldHasPrefix(FieldCode, v))
}

// CodeHasSuffix applies the HasSuffix predicate on the "code" field.
func CodeHasSuffix(v string) predicate.Coupon {
	return predicate.Coupon(sql.FieldHasSuffix(FieldCode, v))
}

// CodeEqualFold applies the EqualFold predicate on the "code" field.
func CodeEqualFold(v string) predicate.Coupon {
	return predicate.Coupon(sql.FieldEqualFold(FieldCode, v))
}

// CodeContainsFold applies the ContainsFold predicate on the "code" field.
func CodeContainsFold(v string) predicate.Coupon {
	return predicate.Coupon(sql.FieldContainsFold(FieldCode, v))
}

// ValueEQ applies the EQ predicate on the "value" field.
func ValueEQ(v float64) predicate.Coupon {
	return predicate.Coupon(sql.FieldEQ(FieldValue, v))
}

// ValueNEQ applies the NEQ predicate on the "value" field.
func ValueNEQ(v float64) predicate.Coupon {
	return predicate.Coupon(sql.FieldNEQ(FieldValue, v))
}

// ValueIn applies the In predicate on the "value" field.
func ValueIn(vs ...float64) predicate.Coupon {
	return predicate.Coupon(sql.FieldIn(FieldValue, vs...))
}

// ValueNotIn applies the NotIn predicate on the "value" field.
func ValueNotIn(vs ...float64) predicate.Coupon {
	return predicate.Coupon(sql.FieldNotIn(FieldValue, vs...))
}

// ValueGT applies the GT predicate on the "value" field.
func ValueGT(v float64) predicate.Coupon {
	return predicate.Coupon(sql.FieldGT(FieldValue, v))
}

// ValueGTE applies the GTE predicate on the "value" field.
func ValueGTE(v float64) predicate.Coupon {
	return predicate.Coupon(sql.FieldGTE(FieldValue, v))
}

// ValueLT applies the LT predicate on the "value" field.
func ValueLT(v float64) predicate.Coupon {
	return predicate.Coupon(sql.FieldLT(FieldValue, v))
}

// ValueLTE applies the LTE predicate on the "value" field.
func ValueLTE(v float64) predicate.Coupon {
	return predicate.Coupon(sql.FieldLTE(FieldValue, v))
}

// StoreIDEQ applies the EQ predicate on the "store_id" field.
func StoreIDEQ(v string) predicate.Coupon {
	return predicate.Coupon(sql.FieldEQ(FieldStoreID, v))
}

// StoreIDNEQ applies the NEQ predicate on the "store_id" field.
func StoreIDNEQ(v string) predicate.Coupon {
	return predicate.Coupon(sql.FieldNEQ(FieldStoreID, v))
}

// StoreIDIn applies the In predicate on the "store_id" field.
func StoreIDIn(vs ...string) predicate.Coupon {
	return predicate.Coupon(sql.FieldIn(FieldStoreID, vs...))
}

// StoreIDNotIn applies the NotIn predicate on the "store_id" field.
func StoreIDNotIn(vs ...string) predicate.Coupon {
	return predicate.Coupon(sql.FieldNotIn(FieldStoreID, vs...))
}

// StoreIDGT applies the GT predicate on the "store_id" field.
func StoreIDGT(v string) predicate.Coupon {
	return predicate.Coupon(sql.FieldGT(FieldStoreID, v))
}

// StoreIDGTE applies the GTE predicate on the "store_id" field.
func StoreIDGTE(v string) predicate.Coupon {
	return predicate.Coupon(sql.FieldGTE(FieldStoreID, v))
}

// StoreIDLT applies the LT predicate on the "store_id" field.
func StoreIDLT(v string) predicate.Coupon {
	return predicate.Coupon(sql.FieldLT(FieldStoreID, v))
}

// StoreIDLTE applies the LTE predicate on the "store_id" field.
func StoreIDLTE(v string) predicate.Coupon {
	return predicate.Coupon(sql.FieldLTE(FieldStoreID, v))
}

// StoreIDContains applies the Contains predicate on the "store_id" field.
func StoreIDContains(v string) predicate.Coupon {
	return predicate.Coupon(sql.FieldContains(FieldStoreID, v))
}

// StoreIDHasPrefix applies the HasPrefix predicate on the "store_id" field.
func StoreIDHasPrefix(v string) predicate.Coupon {
	return predicate.Coupon(sql.FieldHasPrefix(FieldStoreID, v))
}

// StoreIDHasSuffix applies the HasSuffix predicate on the "store_id" field.
func StoreIDHasSuffix(v string) predicate.Coupon {
	return predicate.Coupon(sql.FieldHasSuffix(FieldStoreID, v))
}

// StoreIDEqualFold applies the EqualFold predicate on the "store_id" field.
func StoreIDEqualFold(v string) predicate.Coupon {
	return predicate.Coupon(sql.FieldEqualFold(FieldStoreID, v))
}

// StoreIDContainsFold applies the ContainsFold predicate on the "store_id" field.
func StoreIDContainsFold(v string) predicate.Coupon {
	return predicate.Coupon(sql.FieldContainsFold(FieldStoreID, v))
}

// ExpireAtEQ applies the EQ predicate on the "expire_at" field.
func ExpireAtEQ(v time.Time) predicate.Coupon {
	return predicate.Coupon(sql.FieldEQ(FieldExpireAt, v))
}

// ExpireAtNEQ applies the NEQ predicate on the "expire_at" field.
func ExpireAtNEQ(v time.Time) predicate.Coupon {
	return predicate.Coupon(sql.FieldNEQ(FieldExpireAt, v))
}

// ExpireAtIn applies the In predicate on the "expire_at" field.
func ExpireAtIn(vs ...time.Time) predicate.Coupon {
	return predicate.Coupon(sql.FieldIn(FieldExpireAt, vs...))
}

// ExpireAtNotIn applies the NotIn predicate on the "expire_at" field.
func ExpireAtNotIn(vs ...time.Time) predicate.Coupon {
	return predicate.Coupon(sql.FieldNotIn(FieldExpireAt, vs...))
}

// ExpireAtGT applies the GT predicate on the "expire_at" field.
func ExpireAtGT(v time.Time) predicate.Coupon {
	return predicate.Coupon(sql.FieldGT(FieldExpireAt, v))
}

// ExpireAtGTE applies the GTE predicate on the "expire_at" field.
func ExpireAtGTE(v time.Time) predicate.Coupon {
	return predicate.Coupon(sql.FieldGTE(FieldExpireAt, v))
}

// ExpireAtLT applies the LT predicate on the "expire_at" field.
func ExpireAtLT(v time.Time) predicate.Coupon {
	return predicate.Coupon(sql.FieldLT(FieldExpireAt, v))
}

// ExpireAtLTE applies the LTE predicate on the "expire_at" field.
func ExpireAtLTE(v time.Time) predicate.Coupon {
	return predicate.Coupon(sql.FieldLTE(FieldExpireAt, v))
}

// ExpireAtIsNil applies the IsNil predicate on the "expire_at" field.
func ExpireAtIsNil() predicate.Coupon {
	return predicate.Coupon(sql.FieldIsNull(FieldExpireAt))
}

// ExpireAtNotNil applies the NotNil predicate on the "expire_at" field.
func ExpireAtNotNil() predicate.Coupon {
	return predicate.Coupon(sql.FieldNotNull(FieldExpireAt))
}

// CustomerIDEQ applies the EQ predicate on the "customer_id" field.
func CustomerIDEQ(v string) predicate.Coupon {
	return predicate.Coupon(sql.FieldEQ(FieldCustomerID, v))
}

// CustomerIDNEQ applies the NEQ predicate on the "customer_id" field.
func CustomerIDNEQ(v string) predicate.Coupon {
	return predicate.Coupon(sql.FieldNEQ(FieldCustomerID, v))
}

// CustomerIDIn applies the In predicate on the "customer_id" field.
func CustomerIDIn(vs ...string) predicate.Coupon {
	return predicate.Coupon(sql.FieldIn(FieldCustomerID, vs...))
}

// CustomerIDNotIn applies the NotIn predicate on the "customer_id" field.
func CustomerIDNotIn(vs ...string) predicate.Coupon {
	return predicate.Coupon(sql.FieldNotIn(FieldCustomerID, vs...))
}

// CustomerIDGT applies the GT predicate on the "customer_id" field.
func CustomerIDGT(v string) predicate.Coupon {
	return predicate.Coupon(sql.FieldGT(FieldCustomerID, v))
}

// CustomerIDGTE applies the GTE predicate on the "customer_id" field.
func CustomerIDGTE(v string) predicate.Coupon {
	return predicate.Coupon(sql.FieldGTE(FieldCustomerID, v))
}

// CustomerIDLT applies the LT predicate on the "customer_id" field.
func CustomerIDLT(v string) predicate.Coupon {
	return predicate.Coupon(sql.FieldLT(FieldCustomerID, v))
}

// CustomerIDLTE applies the LTE predicate on the "customer_id" field.
func CustomerIDLTE(v string) predicate.Coupon {
	return predicate.Coupon(sql.FieldLTE(FieldCustomerID, v))
}

// CustomerIDContains applies the Contains predicate on the "customer_id" field.
func CustomerIDContains(v string) predicate.Coupon {
	return predicate.Coupon(sql.FieldContains(FieldCustomerID, v))
}

// CustomerIDHasPrefix applies the HasPrefix predicate on the "customer_id" field.
func CustomerIDHasPrefix(v string) predicate.Coupon {
	return predicate.Coupon(sql.FieldHasPrefix(FieldCustomerID, v))
}

// CustomerIDHasSuffix applies the HasSuffix predicate on the "customer_id" field.
func CustomerIDHasSuffix(v string) predicate.Coupon {
	return predicate.Coupon(sql.FieldHasSuffix(FieldCustomerID, v))
}

// CustomerIDIsNil applies the IsNil predicate on the "customer_id" field.
func CustomerIDIsNil() predicate.Coupon {
	return predicate.Coupon(sql.FieldIsNull(FieldCustomerID))
}

// CustomerIDNotNil applies the NotNil predicate on the "customer_id" field.
func CustomerIDNotNil() predicate.Coupon {
	return predicate.Coupon(sql.FieldNotNull(FieldCustomerID))
}

// CustomerIDEqualFold applies the EqualFold predicate on the "customer_id" field.
func CustomerIDEqualFold(v string) predicate.Coupon {
	return predicate.Coupon(sql.FieldEqualFold(FieldCustomerID, v))
}

// CustomerIDContainsFold applies the ContainsFold predicate on the "customer_id" field.
func CustomerIDContainsFold(v string) predicate.Coupon {
	return predicate.Coupon(sql.FieldContainsFold(FieldCustomerID, v))
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v coupon.CouponType) predicate.Coupon {
	vc := int32(v)
	return predicate.Coupon(sql.FieldEQ(FieldType, vc))
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v coupon.CouponType) predicate.Coupon {
	vc := int32(v)
	return predicate.Coupon(sql.FieldNEQ(FieldType, vc))
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...coupon.CouponType) predicate.Coupon {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = int32(vs[i])
	}
	return predicate.Coupon(sql.FieldIn(FieldType, v...))
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...coupon.CouponType) predicate.Coupon {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = int32(vs[i])
	}
	return predicate.Coupon(sql.FieldNotIn(FieldType, v...))
}

// TypeGT applies the GT predicate on the "type" field.
func TypeGT(v coupon.CouponType) predicate.Coupon {
	vc := int32(v)
	return predicate.Coupon(sql.FieldGT(FieldType, vc))
}

// TypeGTE applies the GTE predicate on the "type" field.
func TypeGTE(v coupon.CouponType) predicate.Coupon {
	vc := int32(v)
	return predicate.Coupon(sql.FieldGTE(FieldType, vc))
}

// TypeLT applies the LT predicate on the "type" field.
func TypeLT(v coupon.CouponType) predicate.Coupon {
	vc := int32(v)
	return predicate.Coupon(sql.FieldLT(FieldType, vc))
}

// TypeLTE applies the LTE predicate on the "type" field.
func TypeLTE(v coupon.CouponType) predicate.Coupon {
	vc := int32(v)
	return predicate.Coupon(sql.FieldLTE(FieldType, vc))
}

// CurrencyIDEQ applies the EQ predicate on the "currency_id" field.
func CurrencyIDEQ(v uint64) predicate.Coupon {
	return predicate.Coupon(sql.FieldEQ(FieldCurrencyID, v))
}

// CurrencyIDNEQ applies the NEQ predicate on the "currency_id" field.
func CurrencyIDNEQ(v uint64) predicate.Coupon {
	return predicate.Coupon(sql.FieldNEQ(FieldCurrencyID, v))
}

// CurrencyIDIn applies the In predicate on the "currency_id" field.
func CurrencyIDIn(vs ...uint64) predicate.Coupon {
	return predicate.Coupon(sql.FieldIn(FieldCurrencyID, vs...))
}

// CurrencyIDNotIn applies the NotIn predicate on the "currency_id" field.
func CurrencyIDNotIn(vs ...uint64) predicate.Coupon {
	return predicate.Coupon(sql.FieldNotIn(FieldCurrencyID, vs...))
}

// CurrencyIDIsNil applies the IsNil predicate on the "currency_id" field.
func CurrencyIDIsNil() predicate.Coupon {
	return predicate.Coupon(sql.FieldIsNull(FieldCurrencyID))
}

// CurrencyIDNotNil applies the NotNil predicate on the "currency_id" field.
func CurrencyIDNotNil() predicate.Coupon {
	return predicate.Coupon(sql.FieldNotNull(FieldCurrencyID))
}

// UsageLimitEQ applies the EQ predicate on the "usage_limit" field.
func UsageLimitEQ(v int32) predicate.Coupon {
	return predicate.Coupon(sql.FieldEQ(FieldUsageLimit, v))
}

// UsageLimitNEQ applies the NEQ predicate on the "usage_limit" field.
func UsageLimitNEQ(v int32) predicate.Coupon {
	return predicate.Coupon(sql.FieldNEQ(FieldUsageLimit, v))
}

// UsageLimitIn applies the In predicate on the "usage_limit" field.
func UsageLimitIn(vs ...int32) predicate.Coupon {
	return predicate.Coupon(sql.FieldIn(FieldUsageLimit, vs...))
}

// UsageLimitNotIn applies the NotIn predicate on the "usage_limit" field.
func UsageLimitNotIn(vs ...int32) predicate.Coupon {
	return predicate.Coupon(sql.FieldNotIn(FieldUsageLimit, vs...))
}

// UsageLimitGT applies the GT predicate on the "usage_limit" field.
func UsageLimitGT(v int32) predicate.Coupon {
	return predicate.Coupon(sql.FieldGT(FieldUsageLimit, v))
}

// UsageLimitGTE applies the GTE predicate on the "usage_limit" field.
func UsageLimitGTE(v int32) predicate.Coupon {
	return predicate.Coupon(sql.FieldGTE(FieldUsageLimit, v))
}

// UsageLimitLT applies the LT predicate on the "usage_limit" field.
func UsageLimitLT(v int32) predicate.Coupon {
	return predicate.Coupon(sql.FieldLT(FieldUsageLimit, v))
}

// UsageLimitLTE applies the LTE predicate on the "usage_limit" field.
func UsageLimitLTE(v int32) predicate.Coupon {
	return predicate.Coupon(sql.FieldLTE(FieldUsageLimit, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v coupon.CouponStatus) predicate.Coupon {
	vc := int32(v)
	return predicate.Coupon(sql.FieldEQ(FieldStatus, vc))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v coupon.CouponStatus) predicate.Coupon {
	vc := int32(v)
	return predicate.Coupon(sql.FieldNEQ(FieldStatus, vc))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...coupon.CouponStatus) predicate.Coupon {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = int32(vs[i])
	}
	return predicate.Coupon(sql.FieldIn(FieldStatus, v...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...coupon.CouponStatus) predicate.Coupon {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = int32(vs[i])
	}
	return predicate.Coupon(sql.FieldNotIn(FieldStatus, v...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v coupon.CouponStatus) predicate.Coupon {
	vc := int32(v)
	return predicate.Coupon(sql.FieldGT(FieldStatus, vc))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v coupon.CouponStatus) predicate.Coupon {
	vc := int32(v)
	return predicate.Coupon(sql.FieldGTE(FieldStatus, vc))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v coupon.CouponStatus) predicate.Coupon {
	vc := int32(v)
	return predicate.Coupon(sql.FieldLT(FieldStatus, vc))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v coupon.CouponStatus) predicate.Coupon {
	vc := int32(v)
	return predicate.Coupon(sql.FieldLTE(FieldStatus, vc))
}

// HasCurrency applies the HasEdge predicate on the "currency" edge.
func HasCurrency() predicate.Coupon {
	return predicate.Coupon(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, CurrencyTable, CurrencyColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCurrencyWith applies the HasEdge predicate on the "currency" edge with a given conditions (other predicates).
func HasCurrencyWith(preds ...predicate.Currency) predicate.Coupon {
	return predicate.Coupon(func(s *sql.Selector) {
		step := newCurrencyStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCouponBookings applies the HasEdge predicate on the "coupon_bookings" edge.
func HasCouponBookings() predicate.Coupon {
	return predicate.Coupon(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, CouponBookingsTable, CouponBookingsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCouponBookingsWith applies the HasEdge predicate on the "coupon_bookings" edge with a given conditions (other predicates).
func HasCouponBookingsWith(preds ...predicate.CouponBooking) predicate.Coupon {
	return predicate.Coupon(func(s *sql.Selector) {
		step := newCouponBookingsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Coupon) predicate.Coupon {
	return predicate.Coupon(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Coupon) predicate.Coupon {
	return predicate.Coupon(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Coupon) predicate.Coupon {
	return predicate.Coupon(sql.NotPredicates(p))
}
