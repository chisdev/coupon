// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"
	"reflect"

	"github.com/chisdev/coupon/pkg/ent/migrate"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	entcoupon "github.com/chisdev/coupon/pkg/ent/coupon"
	"github.com/chisdev/coupon/pkg/ent/currency"
	"github.com/chisdev/coupon/pkg/ent/milestone"
	"github.com/chisdev/coupon/pkg/ent/progress"
	"github.com/chisdev/coupon/pkg/ent/reward"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Coupon is the client for interacting with the Coupon builders.
	Coupon *CouponClient
	// Currency is the client for interacting with the Currency builders.
	Currency *CurrencyClient
	// Milestone is the client for interacting with the Milestone builders.
	Milestone *MilestoneClient
	// Progress is the client for interacting with the Progress builders.
	Progress *ProgressClient
	// Reward is the client for interacting with the Reward builders.
	Reward *RewardClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	client := &Client{config: newConfig(opts...)}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Coupon = NewCouponClient(c.config)
	c.Currency = NewCurrencyClient(c.config)
	c.Milestone = NewMilestoneClient(c.config)
	c.Progress = NewProgressClient(c.config)
	c.Reward = NewRewardClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// newConfig creates a new config for the client.
func newConfig(opts ...Option) config {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	return cfg
}

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// ErrTxStarted is returned when trying to start a new transaction from a transactional client.
var ErrTxStarted = errors.New("ent: cannot start a transaction within a transaction")

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, ErrTxStarted
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:       ctx,
		config:    cfg,
		Coupon:    NewCouponClient(cfg),
		Currency:  NewCurrencyClient(cfg),
		Milestone: NewMilestoneClient(cfg),
		Progress:  NewProgressClient(cfg),
		Reward:    NewRewardClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:       ctx,
		config:    cfg,
		Coupon:    NewCouponClient(cfg),
		Currency:  NewCurrencyClient(cfg),
		Milestone: NewMilestoneClient(cfg),
		Progress:  NewProgressClient(cfg),
		Reward:    NewRewardClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Coupon.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Coupon.Use(hooks...)
	c.Currency.Use(hooks...)
	c.Milestone.Use(hooks...)
	c.Progress.Use(hooks...)
	c.Reward.Use(hooks...)
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	c.Coupon.Intercept(interceptors...)
	c.Currency.Intercept(interceptors...)
	c.Milestone.Intercept(interceptors...)
	c.Progress.Intercept(interceptors...)
	c.Reward.Intercept(interceptors...)
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *CouponMutation:
		return c.Coupon.mutate(ctx, m)
	case *CurrencyMutation:
		return c.Currency.mutate(ctx, m)
	case *MilestoneMutation:
		return c.Milestone.mutate(ctx, m)
	case *ProgressMutation:
		return c.Progress.mutate(ctx, m)
	case *RewardMutation:
		return c.Reward.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// CouponClient is a client for the Coupon schema.
type CouponClient struct {
	config
}

// NewCouponClient returns a client for the Coupon from the given config.
func NewCouponClient(c config) *CouponClient {
	return &CouponClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `entcoupon.Hooks(f(g(h())))`.
func (c *CouponClient) Use(hooks ...Hook) {
	c.hooks.Coupon = append(c.hooks.Coupon, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `entcoupon.Intercept(f(g(h())))`.
func (c *CouponClient) Intercept(interceptors ...Interceptor) {
	c.inters.Coupon = append(c.inters.Coupon, interceptors...)
}

// Create returns a builder for creating a Coupon entity.
func (c *CouponClient) Create() *CouponCreate {
	mutation := newCouponMutation(c.config, OpCreate)
	return &CouponCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Coupon entities.
func (c *CouponClient) CreateBulk(builders ...*CouponCreate) *CouponCreateBulk {
	return &CouponCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *CouponClient) MapCreateBulk(slice any, setFunc func(*CouponCreate, int)) *CouponCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &CouponCreateBulk{err: fmt.Errorf("calling to CouponClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*CouponCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &CouponCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Coupon.
func (c *CouponClient) Update() *CouponUpdate {
	mutation := newCouponMutation(c.config, OpUpdate)
	return &CouponUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CouponClient) UpdateOne(_m *Coupon) *CouponUpdateOne {
	mutation := newCouponMutation(c.config, OpUpdateOne, withCoupon(_m))
	return &CouponUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CouponClient) UpdateOneID(id uint64) *CouponUpdateOne {
	mutation := newCouponMutation(c.config, OpUpdateOne, withCouponID(id))
	return &CouponUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Coupon.
func (c *CouponClient) Delete() *CouponDelete {
	mutation := newCouponMutation(c.config, OpDelete)
	return &CouponDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CouponClient) DeleteOne(_m *Coupon) *CouponDeleteOne {
	return c.DeleteOneID(_m.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *CouponClient) DeleteOneID(id uint64) *CouponDeleteOne {
	builder := c.Delete().Where(entcoupon.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CouponDeleteOne{builder}
}

// Query returns a query builder for Coupon.
func (c *CouponClient) Query() *CouponQuery {
	return &CouponQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeCoupon},
		inters: c.Interceptors(),
	}
}

// Get returns a Coupon entity by its id.
func (c *CouponClient) Get(ctx context.Context, id uint64) (*Coupon, error) {
	return c.Query().Where(entcoupon.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CouponClient) GetX(ctx context.Context, id uint64) *Coupon {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryCurrency queries the currency edge of a Coupon.
func (c *CouponClient) QueryCurrency(_m *Coupon) *CurrencyQuery {
	query := (&CurrencyClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := _m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(entcoupon.Table, entcoupon.FieldID, id),
			sqlgraph.To(currency.Table, currency.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, entcoupon.CurrencyTable, entcoupon.CurrencyColumn),
		)
		fromV = sqlgraph.Neighbors(_m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CouponClient) Hooks() []Hook {
	return c.hooks.Coupon
}

// Interceptors returns the client interceptors.
func (c *CouponClient) Interceptors() []Interceptor {
	return c.inters.Coupon
}

func (c *CouponClient) mutate(ctx context.Context, m *CouponMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&CouponCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&CouponUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&CouponUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&CouponDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Coupon mutation op: %q", m.Op())
	}
}

// CurrencyClient is a client for the Currency schema.
type CurrencyClient struct {
	config
}

// NewCurrencyClient returns a client for the Currency from the given config.
func NewCurrencyClient(c config) *CurrencyClient {
	return &CurrencyClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `currency.Hooks(f(g(h())))`.
func (c *CurrencyClient) Use(hooks ...Hook) {
	c.hooks.Currency = append(c.hooks.Currency, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `currency.Intercept(f(g(h())))`.
func (c *CurrencyClient) Intercept(interceptors ...Interceptor) {
	c.inters.Currency = append(c.inters.Currency, interceptors...)
}

// Create returns a builder for creating a Currency entity.
func (c *CurrencyClient) Create() *CurrencyCreate {
	mutation := newCurrencyMutation(c.config, OpCreate)
	return &CurrencyCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Currency entities.
func (c *CurrencyClient) CreateBulk(builders ...*CurrencyCreate) *CurrencyCreateBulk {
	return &CurrencyCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *CurrencyClient) MapCreateBulk(slice any, setFunc func(*CurrencyCreate, int)) *CurrencyCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &CurrencyCreateBulk{err: fmt.Errorf("calling to CurrencyClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*CurrencyCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &CurrencyCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Currency.
func (c *CurrencyClient) Update() *CurrencyUpdate {
	mutation := newCurrencyMutation(c.config, OpUpdate)
	return &CurrencyUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CurrencyClient) UpdateOne(_m *Currency) *CurrencyUpdateOne {
	mutation := newCurrencyMutation(c.config, OpUpdateOne, withCurrency(_m))
	return &CurrencyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CurrencyClient) UpdateOneID(id uint64) *CurrencyUpdateOne {
	mutation := newCurrencyMutation(c.config, OpUpdateOne, withCurrencyID(id))
	return &CurrencyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Currency.
func (c *CurrencyClient) Delete() *CurrencyDelete {
	mutation := newCurrencyMutation(c.config, OpDelete)
	return &CurrencyDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CurrencyClient) DeleteOne(_m *Currency) *CurrencyDeleteOne {
	return c.DeleteOneID(_m.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *CurrencyClient) DeleteOneID(id uint64) *CurrencyDeleteOne {
	builder := c.Delete().Where(currency.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CurrencyDeleteOne{builder}
}

// Query returns a query builder for Currency.
func (c *CurrencyClient) Query() *CurrencyQuery {
	return &CurrencyQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeCurrency},
		inters: c.Interceptors(),
	}
}

// Get returns a Currency entity by its id.
func (c *CurrencyClient) Get(ctx context.Context, id uint64) (*Currency, error) {
	return c.Query().Where(currency.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CurrencyClient) GetX(ctx context.Context, id uint64) *Currency {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryCoupons queries the coupons edge of a Currency.
func (c *CurrencyClient) QueryCoupons(_m *Currency) *CouponQuery {
	query := (&CouponClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := _m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(currency.Table, currency.FieldID, id),
			sqlgraph.To(entcoupon.Table, entcoupon.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, currency.CouponsTable, currency.CouponsColumn),
		)
		fromV = sqlgraph.Neighbors(_m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryReward queries the reward edge of a Currency.
func (c *CurrencyClient) QueryReward(_m *Currency) *RewardQuery {
	query := (&RewardClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := _m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(currency.Table, currency.FieldID, id),
			sqlgraph.To(reward.Table, reward.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, currency.RewardTable, currency.RewardColumn),
		)
		fromV = sqlgraph.Neighbors(_m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CurrencyClient) Hooks() []Hook {
	return c.hooks.Currency
}

// Interceptors returns the client interceptors.
func (c *CurrencyClient) Interceptors() []Interceptor {
	return c.inters.Currency
}

func (c *CurrencyClient) mutate(ctx context.Context, m *CurrencyMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&CurrencyCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&CurrencyUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&CurrencyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&CurrencyDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Currency mutation op: %q", m.Op())
	}
}

// MilestoneClient is a client for the Milestone schema.
type MilestoneClient struct {
	config
}

// NewMilestoneClient returns a client for the Milestone from the given config.
func NewMilestoneClient(c config) *MilestoneClient {
	return &MilestoneClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `milestone.Hooks(f(g(h())))`.
func (c *MilestoneClient) Use(hooks ...Hook) {
	c.hooks.Milestone = append(c.hooks.Milestone, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `milestone.Intercept(f(g(h())))`.
func (c *MilestoneClient) Intercept(interceptors ...Interceptor) {
	c.inters.Milestone = append(c.inters.Milestone, interceptors...)
}

// Create returns a builder for creating a Milestone entity.
func (c *MilestoneClient) Create() *MilestoneCreate {
	mutation := newMilestoneMutation(c.config, OpCreate)
	return &MilestoneCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Milestone entities.
func (c *MilestoneClient) CreateBulk(builders ...*MilestoneCreate) *MilestoneCreateBulk {
	return &MilestoneCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *MilestoneClient) MapCreateBulk(slice any, setFunc func(*MilestoneCreate, int)) *MilestoneCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &MilestoneCreateBulk{err: fmt.Errorf("calling to MilestoneClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*MilestoneCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &MilestoneCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Milestone.
func (c *MilestoneClient) Update() *MilestoneUpdate {
	mutation := newMilestoneMutation(c.config, OpUpdate)
	return &MilestoneUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *MilestoneClient) UpdateOne(_m *Milestone) *MilestoneUpdateOne {
	mutation := newMilestoneMutation(c.config, OpUpdateOne, withMilestone(_m))
	return &MilestoneUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *MilestoneClient) UpdateOneID(id uint64) *MilestoneUpdateOne {
	mutation := newMilestoneMutation(c.config, OpUpdateOne, withMilestoneID(id))
	return &MilestoneUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Milestone.
func (c *MilestoneClient) Delete() *MilestoneDelete {
	mutation := newMilestoneMutation(c.config, OpDelete)
	return &MilestoneDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *MilestoneClient) DeleteOne(_m *Milestone) *MilestoneDeleteOne {
	return c.DeleteOneID(_m.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *MilestoneClient) DeleteOneID(id uint64) *MilestoneDeleteOne {
	builder := c.Delete().Where(milestone.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &MilestoneDeleteOne{builder}
}

// Query returns a query builder for Milestone.
func (c *MilestoneClient) Query() *MilestoneQuery {
	return &MilestoneQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeMilestone},
		inters: c.Interceptors(),
	}
}

// Get returns a Milestone entity by its id.
func (c *MilestoneClient) Get(ctx context.Context, id uint64) (*Milestone, error) {
	return c.Query().Where(milestone.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *MilestoneClient) GetX(ctx context.Context, id uint64) *Milestone {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryReward queries the reward edge of a Milestone.
func (c *MilestoneClient) QueryReward(_m *Milestone) *RewardQuery {
	query := (&RewardClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := _m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(milestone.Table, milestone.FieldID, id),
			sqlgraph.To(reward.Table, reward.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, milestone.RewardTable, milestone.RewardColumn),
		)
		fromV = sqlgraph.Neighbors(_m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryProgress queries the progress edge of a Milestone.
func (c *MilestoneClient) QueryProgress(_m *Milestone) *ProgressQuery {
	query := (&ProgressClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := _m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(milestone.Table, milestone.FieldID, id),
			sqlgraph.To(progress.Table, progress.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, milestone.ProgressTable, milestone.ProgressColumn),
		)
		fromV = sqlgraph.Neighbors(_m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *MilestoneClient) Hooks() []Hook {
	return c.hooks.Milestone
}

// Interceptors returns the client interceptors.
func (c *MilestoneClient) Interceptors() []Interceptor {
	return c.inters.Milestone
}

func (c *MilestoneClient) mutate(ctx context.Context, m *MilestoneMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&MilestoneCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&MilestoneUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&MilestoneUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&MilestoneDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Milestone mutation op: %q", m.Op())
	}
}

// ProgressClient is a client for the Progress schema.
type ProgressClient struct {
	config
}

// NewProgressClient returns a client for the Progress from the given config.
func NewProgressClient(c config) *ProgressClient {
	return &ProgressClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `progress.Hooks(f(g(h())))`.
func (c *ProgressClient) Use(hooks ...Hook) {
	c.hooks.Progress = append(c.hooks.Progress, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `progress.Intercept(f(g(h())))`.
func (c *ProgressClient) Intercept(interceptors ...Interceptor) {
	c.inters.Progress = append(c.inters.Progress, interceptors...)
}

// Create returns a builder for creating a Progress entity.
func (c *ProgressClient) Create() *ProgressCreate {
	mutation := newProgressMutation(c.config, OpCreate)
	return &ProgressCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Progress entities.
func (c *ProgressClient) CreateBulk(builders ...*ProgressCreate) *ProgressCreateBulk {
	return &ProgressCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ProgressClient) MapCreateBulk(slice any, setFunc func(*ProgressCreate, int)) *ProgressCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ProgressCreateBulk{err: fmt.Errorf("calling to ProgressClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ProgressCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ProgressCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Progress.
func (c *ProgressClient) Update() *ProgressUpdate {
	mutation := newProgressMutation(c.config, OpUpdate)
	return &ProgressUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ProgressClient) UpdateOne(_m *Progress) *ProgressUpdateOne {
	mutation := newProgressMutation(c.config, OpUpdateOne, withProgress(_m))
	return &ProgressUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ProgressClient) UpdateOneID(id uint64) *ProgressUpdateOne {
	mutation := newProgressMutation(c.config, OpUpdateOne, withProgressID(id))
	return &ProgressUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Progress.
func (c *ProgressClient) Delete() *ProgressDelete {
	mutation := newProgressMutation(c.config, OpDelete)
	return &ProgressDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ProgressClient) DeleteOne(_m *Progress) *ProgressDeleteOne {
	return c.DeleteOneID(_m.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ProgressClient) DeleteOneID(id uint64) *ProgressDeleteOne {
	builder := c.Delete().Where(progress.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ProgressDeleteOne{builder}
}

// Query returns a query builder for Progress.
func (c *ProgressClient) Query() *ProgressQuery {
	return &ProgressQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeProgress},
		inters: c.Interceptors(),
	}
}

// Get returns a Progress entity by its id.
func (c *ProgressClient) Get(ctx context.Context, id uint64) (*Progress, error) {
	return c.Query().Where(progress.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ProgressClient) GetX(ctx context.Context, id uint64) *Progress {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryMilestone queries the milestone edge of a Progress.
func (c *ProgressClient) QueryMilestone(_m *Progress) *MilestoneQuery {
	query := (&MilestoneClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := _m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(progress.Table, progress.FieldID, id),
			sqlgraph.To(milestone.Table, milestone.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, progress.MilestoneTable, progress.MilestoneColumn),
		)
		fromV = sqlgraph.Neighbors(_m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ProgressClient) Hooks() []Hook {
	return c.hooks.Progress
}

// Interceptors returns the client interceptors.
func (c *ProgressClient) Interceptors() []Interceptor {
	return c.inters.Progress
}

func (c *ProgressClient) mutate(ctx context.Context, m *ProgressMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ProgressCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ProgressUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ProgressUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ProgressDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Progress mutation op: %q", m.Op())
	}
}

// RewardClient is a client for the Reward schema.
type RewardClient struct {
	config
}

// NewRewardClient returns a client for the Reward from the given config.
func NewRewardClient(c config) *RewardClient {
	return &RewardClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `reward.Hooks(f(g(h())))`.
func (c *RewardClient) Use(hooks ...Hook) {
	c.hooks.Reward = append(c.hooks.Reward, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `reward.Intercept(f(g(h())))`.
func (c *RewardClient) Intercept(interceptors ...Interceptor) {
	c.inters.Reward = append(c.inters.Reward, interceptors...)
}

// Create returns a builder for creating a Reward entity.
func (c *RewardClient) Create() *RewardCreate {
	mutation := newRewardMutation(c.config, OpCreate)
	return &RewardCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Reward entities.
func (c *RewardClient) CreateBulk(builders ...*RewardCreate) *RewardCreateBulk {
	return &RewardCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *RewardClient) MapCreateBulk(slice any, setFunc func(*RewardCreate, int)) *RewardCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &RewardCreateBulk{err: fmt.Errorf("calling to RewardClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*RewardCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &RewardCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Reward.
func (c *RewardClient) Update() *RewardUpdate {
	mutation := newRewardMutation(c.config, OpUpdate)
	return &RewardUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *RewardClient) UpdateOne(_m *Reward) *RewardUpdateOne {
	mutation := newRewardMutation(c.config, OpUpdateOne, withReward(_m))
	return &RewardUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *RewardClient) UpdateOneID(id uint64) *RewardUpdateOne {
	mutation := newRewardMutation(c.config, OpUpdateOne, withRewardID(id))
	return &RewardUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Reward.
func (c *RewardClient) Delete() *RewardDelete {
	mutation := newRewardMutation(c.config, OpDelete)
	return &RewardDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *RewardClient) DeleteOne(_m *Reward) *RewardDeleteOne {
	return c.DeleteOneID(_m.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *RewardClient) DeleteOneID(id uint64) *RewardDeleteOne {
	builder := c.Delete().Where(reward.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &RewardDeleteOne{builder}
}

// Query returns a query builder for Reward.
func (c *RewardClient) Query() *RewardQuery {
	return &RewardQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeReward},
		inters: c.Interceptors(),
	}
}

// Get returns a Reward entity by its id.
func (c *RewardClient) Get(ctx context.Context, id uint64) (*Reward, error) {
	return c.Query().Where(reward.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *RewardClient) GetX(ctx context.Context, id uint64) *Reward {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryCurrency queries the currency edge of a Reward.
func (c *RewardClient) QueryCurrency(_m *Reward) *CurrencyQuery {
	query := (&CurrencyClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := _m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(reward.Table, reward.FieldID, id),
			sqlgraph.To(currency.Table, currency.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, reward.CurrencyTable, reward.CurrencyColumn),
		)
		fromV = sqlgraph.Neighbors(_m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryMilestone queries the milestone edge of a Reward.
func (c *RewardClient) QueryMilestone(_m *Reward) *MilestoneQuery {
	query := (&MilestoneClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := _m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(reward.Table, reward.FieldID, id),
			sqlgraph.To(milestone.Table, milestone.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, reward.MilestoneTable, reward.MilestoneColumn),
		)
		fromV = sqlgraph.Neighbors(_m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *RewardClient) Hooks() []Hook {
	return c.hooks.Reward
}

// Interceptors returns the client interceptors.
func (c *RewardClient) Interceptors() []Interceptor {
	return c.inters.Reward
}

func (c *RewardClient) mutate(ctx context.Context, m *RewardMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&RewardCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&RewardUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&RewardUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&RewardDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Reward mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		Coupon, Currency, Milestone, Progress, Reward []ent.Hook
	}
	inters struct {
		Coupon, Currency, Milestone, Progress, Reward []ent.Interceptor
	}
)
