// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	entcoupon "github.com/chisdev/coupon/pkg/ent/coupon"
	"github.com/chisdev/coupon/pkg/ent/currency"
	"github.com/chisdev/coupon/pkg/ent/predicate"
	"github.com/chisdev/coupon/pkg/ent/reward"
)

// CurrencyUpdate is the builder for updating Currency entities.
type CurrencyUpdate struct {
	config
	hooks     []Hook
	mutation  *CurrencyMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the CurrencyUpdate builder.
func (_u *CurrencyUpdate) Where(ps ...predicate.Currency) *CurrencyUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *CurrencyUpdate) SetUpdatedAt(v time.Time) *CurrencyUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetName sets the "name" field.
func (_u *CurrencyUpdate) SetName(v string) *CurrencyUpdate {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *CurrencyUpdate) SetNillableName(v *string) *CurrencyUpdate {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetCode sets the "code" field.
func (_u *CurrencyUpdate) SetCode(v string) *CurrencyUpdate {
	_u.mutation.SetCode(v)
	return _u
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (_u *CurrencyUpdate) SetNillableCode(v *string) *CurrencyUpdate {
	if v != nil {
		_u.SetCode(*v)
	}
	return _u
}

// AddCouponIDs adds the "coupons" edge to the Coupon entity by IDs.
func (_u *CurrencyUpdate) AddCouponIDs(ids ...uint64) *CurrencyUpdate {
	_u.mutation.AddCouponIDs(ids...)
	return _u
}

// AddCoupons adds the "coupons" edges to the Coupon entity.
func (_u *CurrencyUpdate) AddCoupons(v ...*Coupon) *CurrencyUpdate {
	ids := make([]uint64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddCouponIDs(ids...)
}

// AddRewardIDs adds the "reward" edge to the Reward entity by IDs.
func (_u *CurrencyUpdate) AddRewardIDs(ids ...uint64) *CurrencyUpdate {
	_u.mutation.AddRewardIDs(ids...)
	return _u
}

// AddReward adds the "reward" edges to the Reward entity.
func (_u *CurrencyUpdate) AddReward(v ...*Reward) *CurrencyUpdate {
	ids := make([]uint64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddRewardIDs(ids...)
}

// Mutation returns the CurrencyMutation object of the builder.
func (_u *CurrencyUpdate) Mutation() *CurrencyMutation {
	return _u.mutation
}

// ClearCoupons clears all "coupons" edges to the Coupon entity.
func (_u *CurrencyUpdate) ClearCoupons() *CurrencyUpdate {
	_u.mutation.ClearCoupons()
	return _u
}

// RemoveCouponIDs removes the "coupons" edge to Coupon entities by IDs.
func (_u *CurrencyUpdate) RemoveCouponIDs(ids ...uint64) *CurrencyUpdate {
	_u.mutation.RemoveCouponIDs(ids...)
	return _u
}

// RemoveCoupons removes "coupons" edges to Coupon entities.
func (_u *CurrencyUpdate) RemoveCoupons(v ...*Coupon) *CurrencyUpdate {
	ids := make([]uint64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveCouponIDs(ids...)
}

// ClearReward clears all "reward" edges to the Reward entity.
func (_u *CurrencyUpdate) ClearReward() *CurrencyUpdate {
	_u.mutation.ClearReward()
	return _u
}

// RemoveRewardIDs removes the "reward" edge to Reward entities by IDs.
func (_u *CurrencyUpdate) RemoveRewardIDs(ids ...uint64) *CurrencyUpdate {
	_u.mutation.RemoveRewardIDs(ids...)
	return _u
}

// RemoveReward removes "reward" edges to Reward entities.
func (_u *CurrencyUpdate) RemoveReward(v ...*Reward) *CurrencyUpdate {
	ids := make([]uint64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveRewardIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *CurrencyUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *CurrencyUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *CurrencyUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *CurrencyUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *CurrencyUpdate) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := currency.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *CurrencyUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *CurrencyUpdate {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *CurrencyUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	_spec := sqlgraph.NewUpdateSpec(currency.Table, currency.Columns, sqlgraph.NewFieldSpec(currency.FieldID, field.TypeUint64))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(currency.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(currency.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Code(); ok {
		_spec.SetField(currency.FieldCode, field.TypeString, value)
	}
	if _u.mutation.CouponsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   currency.CouponsTable,
			Columns: []string{currency.CouponsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entcoupon.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedCouponsIDs(); len(nodes) > 0 && !_u.mutation.CouponsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   currency.CouponsTable,
			Columns: []string{currency.CouponsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entcoupon.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.CouponsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   currency.CouponsTable,
			Columns: []string{currency.CouponsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entcoupon.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.RewardCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   currency.RewardTable,
			Columns: []string{currency.RewardColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(reward.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedRewardIDs(); len(nodes) > 0 && !_u.mutation.RewardCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   currency.RewardTable,
			Columns: []string{currency.RewardColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(reward.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RewardIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   currency.RewardTable,
			Columns: []string{currency.RewardColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(reward.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(_u.modifiers...)
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{currency.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// CurrencyUpdateOne is the builder for updating a single Currency entity.
type CurrencyUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *CurrencyMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *CurrencyUpdateOne) SetUpdatedAt(v time.Time) *CurrencyUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetName sets the "name" field.
func (_u *CurrencyUpdateOne) SetName(v string) *CurrencyUpdateOne {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *CurrencyUpdateOne) SetNillableName(v *string) *CurrencyUpdateOne {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetCode sets the "code" field.
func (_u *CurrencyUpdateOne) SetCode(v string) *CurrencyUpdateOne {
	_u.mutation.SetCode(v)
	return _u
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (_u *CurrencyUpdateOne) SetNillableCode(v *string) *CurrencyUpdateOne {
	if v != nil {
		_u.SetCode(*v)
	}
	return _u
}

// AddCouponIDs adds the "coupons" edge to the Coupon entity by IDs.
func (_u *CurrencyUpdateOne) AddCouponIDs(ids ...uint64) *CurrencyUpdateOne {
	_u.mutation.AddCouponIDs(ids...)
	return _u
}

// AddCoupons adds the "coupons" edges to the Coupon entity.
func (_u *CurrencyUpdateOne) AddCoupons(v ...*Coupon) *CurrencyUpdateOne {
	ids := make([]uint64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddCouponIDs(ids...)
}

// AddRewardIDs adds the "reward" edge to the Reward entity by IDs.
func (_u *CurrencyUpdateOne) AddRewardIDs(ids ...uint64) *CurrencyUpdateOne {
	_u.mutation.AddRewardIDs(ids...)
	return _u
}

// AddReward adds the "reward" edges to the Reward entity.
func (_u *CurrencyUpdateOne) AddReward(v ...*Reward) *CurrencyUpdateOne {
	ids := make([]uint64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddRewardIDs(ids...)
}

// Mutation returns the CurrencyMutation object of the builder.
func (_u *CurrencyUpdateOne) Mutation() *CurrencyMutation {
	return _u.mutation
}

// ClearCoupons clears all "coupons" edges to the Coupon entity.
func (_u *CurrencyUpdateOne) ClearCoupons() *CurrencyUpdateOne {
	_u.mutation.ClearCoupons()
	return _u
}

// RemoveCouponIDs removes the "coupons" edge to Coupon entities by IDs.
func (_u *CurrencyUpdateOne) RemoveCouponIDs(ids ...uint64) *CurrencyUpdateOne {
	_u.mutation.RemoveCouponIDs(ids...)
	return _u
}

// RemoveCoupons removes "coupons" edges to Coupon entities.
func (_u *CurrencyUpdateOne) RemoveCoupons(v ...*Coupon) *CurrencyUpdateOne {
	ids := make([]uint64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveCouponIDs(ids...)
}

// ClearReward clears all "reward" edges to the Reward entity.
func (_u *CurrencyUpdateOne) ClearReward() *CurrencyUpdateOne {
	_u.mutation.ClearReward()
	return _u
}

// RemoveRewardIDs removes the "reward" edge to Reward entities by IDs.
func (_u *CurrencyUpdateOne) RemoveRewardIDs(ids ...uint64) *CurrencyUpdateOne {
	_u.mutation.RemoveRewardIDs(ids...)
	return _u
}

// RemoveReward removes "reward" edges to Reward entities.
func (_u *CurrencyUpdateOne) RemoveReward(v ...*Reward) *CurrencyUpdateOne {
	ids := make([]uint64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveRewardIDs(ids...)
}

// Where appends a list predicates to the CurrencyUpdate builder.
func (_u *CurrencyUpdateOne) Where(ps ...predicate.Currency) *CurrencyUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *CurrencyUpdateOne) Select(field string, fields ...string) *CurrencyUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated Currency entity.
func (_u *CurrencyUpdateOne) Save(ctx context.Context) (*Currency, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *CurrencyUpdateOne) SaveX(ctx context.Context) *Currency {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *CurrencyUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *CurrencyUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *CurrencyUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := currency.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *CurrencyUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *CurrencyUpdateOne {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *CurrencyUpdateOne) sqlSave(ctx context.Context) (_node *Currency, err error) {
	_spec := sqlgraph.NewUpdateSpec(currency.Table, currency.Columns, sqlgraph.NewFieldSpec(currency.FieldID, field.TypeUint64))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Currency.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, currency.FieldID)
		for _, f := range fields {
			if !currency.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != currency.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(currency.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(currency.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Code(); ok {
		_spec.SetField(currency.FieldCode, field.TypeString, value)
	}
	if _u.mutation.CouponsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   currency.CouponsTable,
			Columns: []string{currency.CouponsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entcoupon.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedCouponsIDs(); len(nodes) > 0 && !_u.mutation.CouponsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   currency.CouponsTable,
			Columns: []string{currency.CouponsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entcoupon.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.CouponsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   currency.CouponsTable,
			Columns: []string{currency.CouponsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entcoupon.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.RewardCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   currency.RewardTable,
			Columns: []string{currency.RewardColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(reward.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedRewardIDs(); len(nodes) > 0 && !_u.mutation.RewardCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   currency.RewardTable,
			Columns: []string{currency.RewardColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(reward.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RewardIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   currency.RewardTable,
			Columns: []string{currency.RewardColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(reward.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(_u.modifiers...)
	_node = &Currency{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{currency.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
