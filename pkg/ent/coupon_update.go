// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	coupon "github.com/chisdev/coupon/api"
	entcoupon "github.com/chisdev/coupon/pkg/ent/coupon"
	"github.com/chisdev/coupon/pkg/ent/couponbooking"
	"github.com/chisdev/coupon/pkg/ent/currency"
	"github.com/chisdev/coupon/pkg/ent/predicate"
)

// CouponUpdate is the builder for updating Coupon entities.
type CouponUpdate struct {
	config
	hooks     []Hook
	mutation  *CouponMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the CouponUpdate builder.
func (_u *CouponUpdate) Where(ps ...predicate.Coupon) *CouponUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *CouponUpdate) SetUpdatedAt(v time.Time) *CouponUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetCode sets the "code" field.
func (_u *CouponUpdate) SetCode(v string) *CouponUpdate {
	_u.mutation.SetCode(v)
	return _u
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (_u *CouponUpdate) SetNillableCode(v *string) *CouponUpdate {
	if v != nil {
		_u.SetCode(*v)
	}
	return _u
}

// SetValue sets the "value" field.
func (_u *CouponUpdate) SetValue(v float64) *CouponUpdate {
	_u.mutation.ResetValue()
	_u.mutation.SetValue(v)
	return _u
}

// SetNillableValue sets the "value" field if the given value is not nil.
func (_u *CouponUpdate) SetNillableValue(v *float64) *CouponUpdate {
	if v != nil {
		_u.SetValue(*v)
	}
	return _u
}

// AddValue adds value to the "value" field.
func (_u *CouponUpdate) AddValue(v float64) *CouponUpdate {
	_u.mutation.AddValue(v)
	return _u
}

// SetStoreID sets the "store_id" field.
func (_u *CouponUpdate) SetStoreID(v string) *CouponUpdate {
	_u.mutation.SetStoreID(v)
	return _u
}

// SetNillableStoreID sets the "store_id" field if the given value is not nil.
func (_u *CouponUpdate) SetNillableStoreID(v *string) *CouponUpdate {
	if v != nil {
		_u.SetStoreID(*v)
	}
	return _u
}

// SetExpireAt sets the "expire_at" field.
func (_u *CouponUpdate) SetExpireAt(v time.Time) *CouponUpdate {
	_u.mutation.SetExpireAt(v)
	return _u
}

// SetNillableExpireAt sets the "expire_at" field if the given value is not nil.
func (_u *CouponUpdate) SetNillableExpireAt(v *time.Time) *CouponUpdate {
	if v != nil {
		_u.SetExpireAt(*v)
	}
	return _u
}

// ClearExpireAt clears the value of the "expire_at" field.
func (_u *CouponUpdate) ClearExpireAt() *CouponUpdate {
	_u.mutation.ClearExpireAt()
	return _u
}

// SetCustomerID sets the "customer_id" field.
func (_u *CouponUpdate) SetCustomerID(v string) *CouponUpdate {
	_u.mutation.SetCustomerID(v)
	return _u
}

// SetNillableCustomerID sets the "customer_id" field if the given value is not nil.
func (_u *CouponUpdate) SetNillableCustomerID(v *string) *CouponUpdate {
	if v != nil {
		_u.SetCustomerID(*v)
	}
	return _u
}

// ClearCustomerID clears the value of the "customer_id" field.
func (_u *CouponUpdate) ClearCustomerID() *CouponUpdate {
	_u.mutation.ClearCustomerID()
	return _u
}

// SetServiceIds sets the "service_ids" field.
func (_u *CouponUpdate) SetServiceIds(v []uint64) *CouponUpdate {
	_u.mutation.SetServiceIds(v)
	return _u
}

// AppendServiceIds appends value to the "service_ids" field.
func (_u *CouponUpdate) AppendServiceIds(v []uint64) *CouponUpdate {
	_u.mutation.AppendServiceIds(v)
	return _u
}

// SetType sets the "type" field.
func (_u *CouponUpdate) SetType(v coupon.CouponType) *CouponUpdate {
	_u.mutation.ResetType()
	_u.mutation.SetType(v)
	return _u
}

// SetNillableType sets the "type" field if the given value is not nil.
func (_u *CouponUpdate) SetNillableType(v *coupon.CouponType) *CouponUpdate {
	if v != nil {
		_u.SetType(*v)
	}
	return _u
}

// AddType adds value to the "type" field.
func (_u *CouponUpdate) AddType(v coupon.CouponType) *CouponUpdate {
	_u.mutation.AddType(v)
	return _u
}

// SetCurrencyID sets the "currency_id" field.
func (_u *CouponUpdate) SetCurrencyID(v uint64) *CouponUpdate {
	_u.mutation.SetCurrencyID(v)
	return _u
}

// SetNillableCurrencyID sets the "currency_id" field if the given value is not nil.
func (_u *CouponUpdate) SetNillableCurrencyID(v *uint64) *CouponUpdate {
	if v != nil {
		_u.SetCurrencyID(*v)
	}
	return _u
}

// ClearCurrencyID clears the value of the "currency_id" field.
func (_u *CouponUpdate) ClearCurrencyID() *CouponUpdate {
	_u.mutation.ClearCurrencyID()
	return _u
}

// SetUsageLimit sets the "usage_limit" field.
func (_u *CouponUpdate) SetUsageLimit(v int32) *CouponUpdate {
	_u.mutation.ResetUsageLimit()
	_u.mutation.SetUsageLimit(v)
	return _u
}

// SetNillableUsageLimit sets the "usage_limit" field if the given value is not nil.
func (_u *CouponUpdate) SetNillableUsageLimit(v *int32) *CouponUpdate {
	if v != nil {
		_u.SetUsageLimit(*v)
	}
	return _u
}

// AddUsageLimit adds value to the "usage_limit" field.
func (_u *CouponUpdate) AddUsageLimit(v int32) *CouponUpdate {
	_u.mutation.AddUsageLimit(v)
	return _u
}

// SetStatus sets the "status" field.
func (_u *CouponUpdate) SetStatus(v coupon.CouponStatus) *CouponUpdate {
	_u.mutation.ResetStatus()
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *CouponUpdate) SetNillableStatus(v *coupon.CouponStatus) *CouponUpdate {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// AddStatus adds value to the "status" field.
func (_u *CouponUpdate) AddStatus(v coupon.CouponStatus) *CouponUpdate {
	_u.mutation.AddStatus(v)
	return _u
}

// SetCurrency sets the "currency" edge to the Currency entity.
func (_u *CouponUpdate) SetCurrency(v *Currency) *CouponUpdate {
	return _u.SetCurrencyID(v.ID)
}

// AddCouponBookingIDs adds the "coupon_bookings" edge to the CouponBooking entity by IDs.
func (_u *CouponUpdate) AddCouponBookingIDs(ids ...uint64) *CouponUpdate {
	_u.mutation.AddCouponBookingIDs(ids...)
	return _u
}

// AddCouponBookings adds the "coupon_bookings" edges to the CouponBooking entity.
func (_u *CouponUpdate) AddCouponBookings(v ...*CouponBooking) *CouponUpdate {
	ids := make([]uint64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddCouponBookingIDs(ids...)
}

// Mutation returns the CouponMutation object of the builder.
func (_u *CouponUpdate) Mutation() *CouponMutation {
	return _u.mutation
}

// ClearCurrency clears the "currency" edge to the Currency entity.
func (_u *CouponUpdate) ClearCurrency() *CouponUpdate {
	_u.mutation.ClearCurrency()
	return _u
}

// ClearCouponBookings clears all "coupon_bookings" edges to the CouponBooking entity.
func (_u *CouponUpdate) ClearCouponBookings() *CouponUpdate {
	_u.mutation.ClearCouponBookings()
	return _u
}

// RemoveCouponBookingIDs removes the "coupon_bookings" edge to CouponBooking entities by IDs.
func (_u *CouponUpdate) RemoveCouponBookingIDs(ids ...uint64) *CouponUpdate {
	_u.mutation.RemoveCouponBookingIDs(ids...)
	return _u
}

// RemoveCouponBookings removes "coupon_bookings" edges to CouponBooking entities.
func (_u *CouponUpdate) RemoveCouponBookings(v ...*CouponBooking) *CouponUpdate {
	ids := make([]uint64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveCouponBookingIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *CouponUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *CouponUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *CouponUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *CouponUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *CouponUpdate) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := entcoupon.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *CouponUpdate) check() error {
	if v, ok := _u.mutation.StoreID(); ok {
		if err := entcoupon.StoreIDValidator(v); err != nil {
			return &ValidationError{Name: "store_id", err: fmt.Errorf(`ent: validator failed for field "Coupon.store_id": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *CouponUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *CouponUpdate {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *CouponUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(entcoupon.Table, entcoupon.Columns, sqlgraph.NewFieldSpec(entcoupon.FieldID, field.TypeUint64))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(entcoupon.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.Code(); ok {
		_spec.SetField(entcoupon.FieldCode, field.TypeString, value)
	}
	if value, ok := _u.mutation.Value(); ok {
		_spec.SetField(entcoupon.FieldValue, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.AddedValue(); ok {
		_spec.AddField(entcoupon.FieldValue, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.StoreID(); ok {
		_spec.SetField(entcoupon.FieldStoreID, field.TypeString, value)
	}
	if value, ok := _u.mutation.ExpireAt(); ok {
		_spec.SetField(entcoupon.FieldExpireAt, field.TypeTime, value)
	}
	if _u.mutation.ExpireAtCleared() {
		_spec.ClearField(entcoupon.FieldExpireAt, field.TypeTime)
	}
	if value, ok := _u.mutation.CustomerID(); ok {
		_spec.SetField(entcoupon.FieldCustomerID, field.TypeString, value)
	}
	if _u.mutation.CustomerIDCleared() {
		_spec.ClearField(entcoupon.FieldCustomerID, field.TypeString)
	}
	if value, ok := _u.mutation.ServiceIds(); ok {
		_spec.SetField(entcoupon.FieldServiceIds, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedServiceIds(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, entcoupon.FieldServiceIds, value)
		})
	}
	if value, ok := _u.mutation.GetType(); ok {
		_spec.SetField(entcoupon.FieldType, field.TypeInt32, value)
	}
	if value, ok := _u.mutation.AddedType(); ok {
		_spec.AddField(entcoupon.FieldType, field.TypeInt32, value)
	}
	if value, ok := _u.mutation.UsageLimit(); ok {
		_spec.SetField(entcoupon.FieldUsageLimit, field.TypeInt32, value)
	}
	if value, ok := _u.mutation.AddedUsageLimit(); ok {
		_spec.AddField(entcoupon.FieldUsageLimit, field.TypeInt32, value)
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(entcoupon.FieldStatus, field.TypeInt32, value)
	}
	if value, ok := _u.mutation.AddedStatus(); ok {
		_spec.AddField(entcoupon.FieldStatus, field.TypeInt32, value)
	}
	if _u.mutation.CurrencyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   entcoupon.CurrencyTable,
			Columns: []string{entcoupon.CurrencyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(currency.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.CurrencyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   entcoupon.CurrencyTable,
			Columns: []string{entcoupon.CurrencyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(currency.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.CouponBookingsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   entcoupon.CouponBookingsTable,
			Columns: []string{entcoupon.CouponBookingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(couponbooking.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedCouponBookingsIDs(); len(nodes) > 0 && !_u.mutation.CouponBookingsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   entcoupon.CouponBookingsTable,
			Columns: []string{entcoupon.CouponBookingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(couponbooking.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.CouponBookingsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   entcoupon.CouponBookingsTable,
			Columns: []string{entcoupon.CouponBookingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(couponbooking.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(_u.modifiers...)
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{entcoupon.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// CouponUpdateOne is the builder for updating a single Coupon entity.
type CouponUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *CouponMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *CouponUpdateOne) SetUpdatedAt(v time.Time) *CouponUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetCode sets the "code" field.
func (_u *CouponUpdateOne) SetCode(v string) *CouponUpdateOne {
	_u.mutation.SetCode(v)
	return _u
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (_u *CouponUpdateOne) SetNillableCode(v *string) *CouponUpdateOne {
	if v != nil {
		_u.SetCode(*v)
	}
	return _u
}

// SetValue sets the "value" field.
func (_u *CouponUpdateOne) SetValue(v float64) *CouponUpdateOne {
	_u.mutation.ResetValue()
	_u.mutation.SetValue(v)
	return _u
}

// SetNillableValue sets the "value" field if the given value is not nil.
func (_u *CouponUpdateOne) SetNillableValue(v *float64) *CouponUpdateOne {
	if v != nil {
		_u.SetValue(*v)
	}
	return _u
}

// AddValue adds value to the "value" field.
func (_u *CouponUpdateOne) AddValue(v float64) *CouponUpdateOne {
	_u.mutation.AddValue(v)
	return _u
}

// SetStoreID sets the "store_id" field.
func (_u *CouponUpdateOne) SetStoreID(v string) *CouponUpdateOne {
	_u.mutation.SetStoreID(v)
	return _u
}

// SetNillableStoreID sets the "store_id" field if the given value is not nil.
func (_u *CouponUpdateOne) SetNillableStoreID(v *string) *CouponUpdateOne {
	if v != nil {
		_u.SetStoreID(*v)
	}
	return _u
}

// SetExpireAt sets the "expire_at" field.
func (_u *CouponUpdateOne) SetExpireAt(v time.Time) *CouponUpdateOne {
	_u.mutation.SetExpireAt(v)
	return _u
}

// SetNillableExpireAt sets the "expire_at" field if the given value is not nil.
func (_u *CouponUpdateOne) SetNillableExpireAt(v *time.Time) *CouponUpdateOne {
	if v != nil {
		_u.SetExpireAt(*v)
	}
	return _u
}

// ClearExpireAt clears the value of the "expire_at" field.
func (_u *CouponUpdateOne) ClearExpireAt() *CouponUpdateOne {
	_u.mutation.ClearExpireAt()
	return _u
}

// SetCustomerID sets the "customer_id" field.
func (_u *CouponUpdateOne) SetCustomerID(v string) *CouponUpdateOne {
	_u.mutation.SetCustomerID(v)
	return _u
}

// SetNillableCustomerID sets the "customer_id" field if the given value is not nil.
func (_u *CouponUpdateOne) SetNillableCustomerID(v *string) *CouponUpdateOne {
	if v != nil {
		_u.SetCustomerID(*v)
	}
	return _u
}

// ClearCustomerID clears the value of the "customer_id" field.
func (_u *CouponUpdateOne) ClearCustomerID() *CouponUpdateOne {
	_u.mutation.ClearCustomerID()
	return _u
}

// SetServiceIds sets the "service_ids" field.
func (_u *CouponUpdateOne) SetServiceIds(v []uint64) *CouponUpdateOne {
	_u.mutation.SetServiceIds(v)
	return _u
}

// AppendServiceIds appends value to the "service_ids" field.
func (_u *CouponUpdateOne) AppendServiceIds(v []uint64) *CouponUpdateOne {
	_u.mutation.AppendServiceIds(v)
	return _u
}

// SetType sets the "type" field.
func (_u *CouponUpdateOne) SetType(v coupon.CouponType) *CouponUpdateOne {
	_u.mutation.ResetType()
	_u.mutation.SetType(v)
	return _u
}

// SetNillableType sets the "type" field if the given value is not nil.
func (_u *CouponUpdateOne) SetNillableType(v *coupon.CouponType) *CouponUpdateOne {
	if v != nil {
		_u.SetType(*v)
	}
	return _u
}

// AddType adds value to the "type" field.
func (_u *CouponUpdateOne) AddType(v coupon.CouponType) *CouponUpdateOne {
	_u.mutation.AddType(v)
	return _u
}

// SetCurrencyID sets the "currency_id" field.
func (_u *CouponUpdateOne) SetCurrencyID(v uint64) *CouponUpdateOne {
	_u.mutation.SetCurrencyID(v)
	return _u
}

// SetNillableCurrencyID sets the "currency_id" field if the given value is not nil.
func (_u *CouponUpdateOne) SetNillableCurrencyID(v *uint64) *CouponUpdateOne {
	if v != nil {
		_u.SetCurrencyID(*v)
	}
	return _u
}

// ClearCurrencyID clears the value of the "currency_id" field.
func (_u *CouponUpdateOne) ClearCurrencyID() *CouponUpdateOne {
	_u.mutation.ClearCurrencyID()
	return _u
}

// SetUsageLimit sets the "usage_limit" field.
func (_u *CouponUpdateOne) SetUsageLimit(v int32) *CouponUpdateOne {
	_u.mutation.ResetUsageLimit()
	_u.mutation.SetUsageLimit(v)
	return _u
}

// SetNillableUsageLimit sets the "usage_limit" field if the given value is not nil.
func (_u *CouponUpdateOne) SetNillableUsageLimit(v *int32) *CouponUpdateOne {
	if v != nil {
		_u.SetUsageLimit(*v)
	}
	return _u
}

// AddUsageLimit adds value to the "usage_limit" field.
func (_u *CouponUpdateOne) AddUsageLimit(v int32) *CouponUpdateOne {
	_u.mutation.AddUsageLimit(v)
	return _u
}

// SetStatus sets the "status" field.
func (_u *CouponUpdateOne) SetStatus(v coupon.CouponStatus) *CouponUpdateOne {
	_u.mutation.ResetStatus()
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *CouponUpdateOne) SetNillableStatus(v *coupon.CouponStatus) *CouponUpdateOne {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// AddStatus adds value to the "status" field.
func (_u *CouponUpdateOne) AddStatus(v coupon.CouponStatus) *CouponUpdateOne {
	_u.mutation.AddStatus(v)
	return _u
}

// SetCurrency sets the "currency" edge to the Currency entity.
func (_u *CouponUpdateOne) SetCurrency(v *Currency) *CouponUpdateOne {
	return _u.SetCurrencyID(v.ID)
}

// AddCouponBookingIDs adds the "coupon_bookings" edge to the CouponBooking entity by IDs.
func (_u *CouponUpdateOne) AddCouponBookingIDs(ids ...uint64) *CouponUpdateOne {
	_u.mutation.AddCouponBookingIDs(ids...)
	return _u
}

// AddCouponBookings adds the "coupon_bookings" edges to the CouponBooking entity.
func (_u *CouponUpdateOne) AddCouponBookings(v ...*CouponBooking) *CouponUpdateOne {
	ids := make([]uint64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddCouponBookingIDs(ids...)
}

// Mutation returns the CouponMutation object of the builder.
func (_u *CouponUpdateOne) Mutation() *CouponMutation {
	return _u.mutation
}

// ClearCurrency clears the "currency" edge to the Currency entity.
func (_u *CouponUpdateOne) ClearCurrency() *CouponUpdateOne {
	_u.mutation.ClearCurrency()
	return _u
}

// ClearCouponBookings clears all "coupon_bookings" edges to the CouponBooking entity.
func (_u *CouponUpdateOne) ClearCouponBookings() *CouponUpdateOne {
	_u.mutation.ClearCouponBookings()
	return _u
}

// RemoveCouponBookingIDs removes the "coupon_bookings" edge to CouponBooking entities by IDs.
func (_u *CouponUpdateOne) RemoveCouponBookingIDs(ids ...uint64) *CouponUpdateOne {
	_u.mutation.RemoveCouponBookingIDs(ids...)
	return _u
}

// RemoveCouponBookings removes "coupon_bookings" edges to CouponBooking entities.
func (_u *CouponUpdateOne) RemoveCouponBookings(v ...*CouponBooking) *CouponUpdateOne {
	ids := make([]uint64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveCouponBookingIDs(ids...)
}

// Where appends a list predicates to the CouponUpdate builder.
func (_u *CouponUpdateOne) Where(ps ...predicate.Coupon) *CouponUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *CouponUpdateOne) Select(field string, fields ...string) *CouponUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated Coupon entity.
func (_u *CouponUpdateOne) Save(ctx context.Context) (*Coupon, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *CouponUpdateOne) SaveX(ctx context.Context) *Coupon {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *CouponUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *CouponUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *CouponUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := entcoupon.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *CouponUpdateOne) check() error {
	if v, ok := _u.mutation.StoreID(); ok {
		if err := entcoupon.StoreIDValidator(v); err != nil {
			return &ValidationError{Name: "store_id", err: fmt.Errorf(`ent: validator failed for field "Coupon.store_id": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *CouponUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *CouponUpdateOne {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *CouponUpdateOne) sqlSave(ctx context.Context) (_node *Coupon, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(entcoupon.Table, entcoupon.Columns, sqlgraph.NewFieldSpec(entcoupon.FieldID, field.TypeUint64))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Coupon.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, entcoupon.FieldID)
		for _, f := range fields {
			if !entcoupon.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != entcoupon.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(entcoupon.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.Code(); ok {
		_spec.SetField(entcoupon.FieldCode, field.TypeString, value)
	}
	if value, ok := _u.mutation.Value(); ok {
		_spec.SetField(entcoupon.FieldValue, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.AddedValue(); ok {
		_spec.AddField(entcoupon.FieldValue, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.StoreID(); ok {
		_spec.SetField(entcoupon.FieldStoreID, field.TypeString, value)
	}
	if value, ok := _u.mutation.ExpireAt(); ok {
		_spec.SetField(entcoupon.FieldExpireAt, field.TypeTime, value)
	}
	if _u.mutation.ExpireAtCleared() {
		_spec.ClearField(entcoupon.FieldExpireAt, field.TypeTime)
	}
	if value, ok := _u.mutation.CustomerID(); ok {
		_spec.SetField(entcoupon.FieldCustomerID, field.TypeString, value)
	}
	if _u.mutation.CustomerIDCleared() {
		_spec.ClearField(entcoupon.FieldCustomerID, field.TypeString)
	}
	if value, ok := _u.mutation.ServiceIds(); ok {
		_spec.SetField(entcoupon.FieldServiceIds, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedServiceIds(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, entcoupon.FieldServiceIds, value)
		})
	}
	if value, ok := _u.mutation.GetType(); ok {
		_spec.SetField(entcoupon.FieldType, field.TypeInt32, value)
	}
	if value, ok := _u.mutation.AddedType(); ok {
		_spec.AddField(entcoupon.FieldType, field.TypeInt32, value)
	}
	if value, ok := _u.mutation.UsageLimit(); ok {
		_spec.SetField(entcoupon.FieldUsageLimit, field.TypeInt32, value)
	}
	if value, ok := _u.mutation.AddedUsageLimit(); ok {
		_spec.AddField(entcoupon.FieldUsageLimit, field.TypeInt32, value)
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(entcoupon.FieldStatus, field.TypeInt32, value)
	}
	if value, ok := _u.mutation.AddedStatus(); ok {
		_spec.AddField(entcoupon.FieldStatus, field.TypeInt32, value)
	}
	if _u.mutation.CurrencyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   entcoupon.CurrencyTable,
			Columns: []string{entcoupon.CurrencyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(currency.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.CurrencyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   entcoupon.CurrencyTable,
			Columns: []string{entcoupon.CurrencyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(currency.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.CouponBookingsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   entcoupon.CouponBookingsTable,
			Columns: []string{entcoupon.CouponBookingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(couponbooking.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedCouponBookingsIDs(); len(nodes) > 0 && !_u.mutation.CouponBookingsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   entcoupon.CouponBookingsTable,
			Columns: []string{entcoupon.CouponBookingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(couponbooking.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.CouponBookingsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   entcoupon.CouponBookingsTable,
			Columns: []string{entcoupon.CouponBookingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(couponbooking.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(_u.modifiers...)
	_node = &Coupon{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{entcoupon.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
