// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	coupon "github.com/chisdev/coupon/api"
	"github.com/chisdev/coupon/pkg/ent/currency"
	"github.com/chisdev/coupon/pkg/ent/milestone"
	"github.com/chisdev/coupon/pkg/ent/predicate"
	"github.com/chisdev/coupon/pkg/ent/reward"
)

// RewardUpdate is the builder for updating Reward entities.
type RewardUpdate struct {
	config
	hooks     []Hook
	mutation  *RewardMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the RewardUpdate builder.
func (_u *RewardUpdate) Where(ps ...predicate.Reward) *RewardUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *RewardUpdate) SetUpdatedAt(v time.Time) *RewardUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetMilestoneID sets the "milestone_id" field.
func (_u *RewardUpdate) SetMilestoneID(v uint64) *RewardUpdate {
	_u.mutation.SetMilestoneID(v)
	return _u
}

// SetNillableMilestoneID sets the "milestone_id" field if the given value is not nil.
func (_u *RewardUpdate) SetNillableMilestoneID(v *uint64) *RewardUpdate {
	if v != nil {
		_u.SetMilestoneID(*v)
	}
	return _u
}

// SetExpiredDuration sets the "expired_duration" field.
func (_u *RewardUpdate) SetExpiredDuration(v float64) *RewardUpdate {
	_u.mutation.ResetExpiredDuration()
	_u.mutation.SetExpiredDuration(v)
	return _u
}

// SetNillableExpiredDuration sets the "expired_duration" field if the given value is not nil.
func (_u *RewardUpdate) SetNillableExpiredDuration(v *float64) *RewardUpdate {
	if v != nil {
		_u.SetExpiredDuration(*v)
	}
	return _u
}

// AddExpiredDuration adds value to the "expired_duration" field.
func (_u *RewardUpdate) AddExpiredDuration(v float64) *RewardUpdate {
	_u.mutation.AddExpiredDuration(v)
	return _u
}

// ClearExpiredDuration clears the value of the "expired_duration" field.
func (_u *RewardUpdate) ClearExpiredDuration() *RewardUpdate {
	_u.mutation.ClearExpiredDuration()
	return _u
}

// SetServiceIds sets the "service_ids" field.
func (_u *RewardUpdate) SetServiceIds(v []uint64) *RewardUpdate {
	_u.mutation.SetServiceIds(v)
	return _u
}

// AppendServiceIds appends value to the "service_ids" field.
func (_u *RewardUpdate) AppendServiceIds(v []uint64) *RewardUpdate {
	_u.mutation.AppendServiceIds(v)
	return _u
}

// SetCouponType sets the "coupon_type" field.
func (_u *RewardUpdate) SetCouponType(v coupon.CouponType) *RewardUpdate {
	_u.mutation.ResetCouponType()
	_u.mutation.SetCouponType(v)
	return _u
}

// SetNillableCouponType sets the "coupon_type" field if the given value is not nil.
func (_u *RewardUpdate) SetNillableCouponType(v *coupon.CouponType) *RewardUpdate {
	if v != nil {
		_u.SetCouponType(*v)
	}
	return _u
}

// AddCouponType adds value to the "coupon_type" field.
func (_u *RewardUpdate) AddCouponType(v coupon.CouponType) *RewardUpdate {
	_u.mutation.AddCouponType(v)
	return _u
}

// SetCurrencyID sets the "currency_id" field.
func (_u *RewardUpdate) SetCurrencyID(v uint64) *RewardUpdate {
	_u.mutation.SetCurrencyID(v)
	return _u
}

// SetNillableCurrencyID sets the "currency_id" field if the given value is not nil.
func (_u *RewardUpdate) SetNillableCurrencyID(v *uint64) *RewardUpdate {
	if v != nil {
		_u.SetCurrencyID(*v)
	}
	return _u
}

// ClearCurrencyID clears the value of the "currency_id" field.
func (_u *RewardUpdate) ClearCurrencyID() *RewardUpdate {
	_u.mutation.ClearCurrencyID()
	return _u
}

// SetUsageLimit sets the "usage_limit" field.
func (_u *RewardUpdate) SetUsageLimit(v int32) *RewardUpdate {
	_u.mutation.ResetUsageLimit()
	_u.mutation.SetUsageLimit(v)
	return _u
}

// SetNillableUsageLimit sets the "usage_limit" field if the given value is not nil.
func (_u *RewardUpdate) SetNillableUsageLimit(v *int32) *RewardUpdate {
	if v != nil {
		_u.SetUsageLimit(*v)
	}
	return _u
}

// AddUsageLimit adds value to the "usage_limit" field.
func (_u *RewardUpdate) AddUsageLimit(v int32) *RewardUpdate {
	_u.mutation.AddUsageLimit(v)
	return _u
}

// ClearUsageLimit clears the value of the "usage_limit" field.
func (_u *RewardUpdate) ClearUsageLimit() *RewardUpdate {
	_u.mutation.ClearUsageLimit()
	return _u
}

// SetCouponValue sets the "coupon_value" field.
func (_u *RewardUpdate) SetCouponValue(v float64) *RewardUpdate {
	_u.mutation.ResetCouponValue()
	_u.mutation.SetCouponValue(v)
	return _u
}

// SetNillableCouponValue sets the "coupon_value" field if the given value is not nil.
func (_u *RewardUpdate) SetNillableCouponValue(v *float64) *RewardUpdate {
	if v != nil {
		_u.SetCouponValue(*v)
	}
	return _u
}

// AddCouponValue adds value to the "coupon_value" field.
func (_u *RewardUpdate) AddCouponValue(v float64) *RewardUpdate {
	_u.mutation.AddCouponValue(v)
	return _u
}

// SetCurrency sets the "currency" edge to the Currency entity.
func (_u *RewardUpdate) SetCurrency(v *Currency) *RewardUpdate {
	return _u.SetCurrencyID(v.ID)
}

// SetMilestone sets the "milestone" edge to the Milestone entity.
func (_u *RewardUpdate) SetMilestone(v *Milestone) *RewardUpdate {
	return _u.SetMilestoneID(v.ID)
}

// Mutation returns the RewardMutation object of the builder.
func (_u *RewardUpdate) Mutation() *RewardMutation {
	return _u.mutation
}

// ClearCurrency clears the "currency" edge to the Currency entity.
func (_u *RewardUpdate) ClearCurrency() *RewardUpdate {
	_u.mutation.ClearCurrency()
	return _u
}

// ClearMilestone clears the "milestone" edge to the Milestone entity.
func (_u *RewardUpdate) ClearMilestone() *RewardUpdate {
	_u.mutation.ClearMilestone()
	return _u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *RewardUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *RewardUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *RewardUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *RewardUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *RewardUpdate) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := reward.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *RewardUpdate) check() error {
	if _u.mutation.MilestoneCleared() && len(_u.mutation.MilestoneIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Reward.milestone"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *RewardUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *RewardUpdate {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *RewardUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(reward.Table, reward.Columns, sqlgraph.NewFieldSpec(reward.FieldID, field.TypeUint64))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(reward.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.ExpiredDuration(); ok {
		_spec.SetField(reward.FieldExpiredDuration, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.AddedExpiredDuration(); ok {
		_spec.AddField(reward.FieldExpiredDuration, field.TypeFloat64, value)
	}
	if _u.mutation.ExpiredDurationCleared() {
		_spec.ClearField(reward.FieldExpiredDuration, field.TypeFloat64)
	}
	if value, ok := _u.mutation.ServiceIds(); ok {
		_spec.SetField(reward.FieldServiceIds, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedServiceIds(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, reward.FieldServiceIds, value)
		})
	}
	if value, ok := _u.mutation.CouponType(); ok {
		_spec.SetField(reward.FieldCouponType, field.TypeInt32, value)
	}
	if value, ok := _u.mutation.AddedCouponType(); ok {
		_spec.AddField(reward.FieldCouponType, field.TypeInt32, value)
	}
	if value, ok := _u.mutation.UsageLimit(); ok {
		_spec.SetField(reward.FieldUsageLimit, field.TypeInt32, value)
	}
	if value, ok := _u.mutation.AddedUsageLimit(); ok {
		_spec.AddField(reward.FieldUsageLimit, field.TypeInt32, value)
	}
	if _u.mutation.UsageLimitCleared() {
		_spec.ClearField(reward.FieldUsageLimit, field.TypeInt32)
	}
	if value, ok := _u.mutation.CouponValue(); ok {
		_spec.SetField(reward.FieldCouponValue, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.AddedCouponValue(); ok {
		_spec.AddField(reward.FieldCouponValue, field.TypeFloat64, value)
	}
	if _u.mutation.CurrencyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   reward.CurrencyTable,
			Columns: []string{reward.CurrencyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(currency.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.CurrencyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   reward.CurrencyTable,
			Columns: []string{reward.CurrencyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(currency.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.MilestoneCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   reward.MilestoneTable,
			Columns: []string{reward.MilestoneColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(milestone.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.MilestoneIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   reward.MilestoneTable,
			Columns: []string{reward.MilestoneColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(milestone.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(_u.modifiers...)
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{reward.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// RewardUpdateOne is the builder for updating a single Reward entity.
type RewardUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *RewardMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *RewardUpdateOne) SetUpdatedAt(v time.Time) *RewardUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetMilestoneID sets the "milestone_id" field.
func (_u *RewardUpdateOne) SetMilestoneID(v uint64) *RewardUpdateOne {
	_u.mutation.SetMilestoneID(v)
	return _u
}

// SetNillableMilestoneID sets the "milestone_id" field if the given value is not nil.
func (_u *RewardUpdateOne) SetNillableMilestoneID(v *uint64) *RewardUpdateOne {
	if v != nil {
		_u.SetMilestoneID(*v)
	}
	return _u
}

// SetExpiredDuration sets the "expired_duration" field.
func (_u *RewardUpdateOne) SetExpiredDuration(v float64) *RewardUpdateOne {
	_u.mutation.ResetExpiredDuration()
	_u.mutation.SetExpiredDuration(v)
	return _u
}

// SetNillableExpiredDuration sets the "expired_duration" field if the given value is not nil.
func (_u *RewardUpdateOne) SetNillableExpiredDuration(v *float64) *RewardUpdateOne {
	if v != nil {
		_u.SetExpiredDuration(*v)
	}
	return _u
}

// AddExpiredDuration adds value to the "expired_duration" field.
func (_u *RewardUpdateOne) AddExpiredDuration(v float64) *RewardUpdateOne {
	_u.mutation.AddExpiredDuration(v)
	return _u
}

// ClearExpiredDuration clears the value of the "expired_duration" field.
func (_u *RewardUpdateOne) ClearExpiredDuration() *RewardUpdateOne {
	_u.mutation.ClearExpiredDuration()
	return _u
}

// SetServiceIds sets the "service_ids" field.
func (_u *RewardUpdateOne) SetServiceIds(v []uint64) *RewardUpdateOne {
	_u.mutation.SetServiceIds(v)
	return _u
}

// AppendServiceIds appends value to the "service_ids" field.
func (_u *RewardUpdateOne) AppendServiceIds(v []uint64) *RewardUpdateOne {
	_u.mutation.AppendServiceIds(v)
	return _u
}

// SetCouponType sets the "coupon_type" field.
func (_u *RewardUpdateOne) SetCouponType(v coupon.CouponType) *RewardUpdateOne {
	_u.mutation.ResetCouponType()
	_u.mutation.SetCouponType(v)
	return _u
}

// SetNillableCouponType sets the "coupon_type" field if the given value is not nil.
func (_u *RewardUpdateOne) SetNillableCouponType(v *coupon.CouponType) *RewardUpdateOne {
	if v != nil {
		_u.SetCouponType(*v)
	}
	return _u
}

// AddCouponType adds value to the "coupon_type" field.
func (_u *RewardUpdateOne) AddCouponType(v coupon.CouponType) *RewardUpdateOne {
	_u.mutation.AddCouponType(v)
	return _u
}

// SetCurrencyID sets the "currency_id" field.
func (_u *RewardUpdateOne) SetCurrencyID(v uint64) *RewardUpdateOne {
	_u.mutation.SetCurrencyID(v)
	return _u
}

// SetNillableCurrencyID sets the "currency_id" field if the given value is not nil.
func (_u *RewardUpdateOne) SetNillableCurrencyID(v *uint64) *RewardUpdateOne {
	if v != nil {
		_u.SetCurrencyID(*v)
	}
	return _u
}

// ClearCurrencyID clears the value of the "currency_id" field.
func (_u *RewardUpdateOne) ClearCurrencyID() *RewardUpdateOne {
	_u.mutation.ClearCurrencyID()
	return _u
}

// SetUsageLimit sets the "usage_limit" field.
func (_u *RewardUpdateOne) SetUsageLimit(v int32) *RewardUpdateOne {
	_u.mutation.ResetUsageLimit()
	_u.mutation.SetUsageLimit(v)
	return _u
}

// SetNillableUsageLimit sets the "usage_limit" field if the given value is not nil.
func (_u *RewardUpdateOne) SetNillableUsageLimit(v *int32) *RewardUpdateOne {
	if v != nil {
		_u.SetUsageLimit(*v)
	}
	return _u
}

// AddUsageLimit adds value to the "usage_limit" field.
func (_u *RewardUpdateOne) AddUsageLimit(v int32) *RewardUpdateOne {
	_u.mutation.AddUsageLimit(v)
	return _u
}

// ClearUsageLimit clears the value of the "usage_limit" field.
func (_u *RewardUpdateOne) ClearUsageLimit() *RewardUpdateOne {
	_u.mutation.ClearUsageLimit()
	return _u
}

// SetCouponValue sets the "coupon_value" field.
func (_u *RewardUpdateOne) SetCouponValue(v float64) *RewardUpdateOne {
	_u.mutation.ResetCouponValue()
	_u.mutation.SetCouponValue(v)
	return _u
}

// SetNillableCouponValue sets the "coupon_value" field if the given value is not nil.
func (_u *RewardUpdateOne) SetNillableCouponValue(v *float64) *RewardUpdateOne {
	if v != nil {
		_u.SetCouponValue(*v)
	}
	return _u
}

// AddCouponValue adds value to the "coupon_value" field.
func (_u *RewardUpdateOne) AddCouponValue(v float64) *RewardUpdateOne {
	_u.mutation.AddCouponValue(v)
	return _u
}

// SetCurrency sets the "currency" edge to the Currency entity.
func (_u *RewardUpdateOne) SetCurrency(v *Currency) *RewardUpdateOne {
	return _u.SetCurrencyID(v.ID)
}

// SetMilestone sets the "milestone" edge to the Milestone entity.
func (_u *RewardUpdateOne) SetMilestone(v *Milestone) *RewardUpdateOne {
	return _u.SetMilestoneID(v.ID)
}

// Mutation returns the RewardMutation object of the builder.
func (_u *RewardUpdateOne) Mutation() *RewardMutation {
	return _u.mutation
}

// ClearCurrency clears the "currency" edge to the Currency entity.
func (_u *RewardUpdateOne) ClearCurrency() *RewardUpdateOne {
	_u.mutation.ClearCurrency()
	return _u
}

// ClearMilestone clears the "milestone" edge to the Milestone entity.
func (_u *RewardUpdateOne) ClearMilestone() *RewardUpdateOne {
	_u.mutation.ClearMilestone()
	return _u
}

// Where appends a list predicates to the RewardUpdate builder.
func (_u *RewardUpdateOne) Where(ps ...predicate.Reward) *RewardUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *RewardUpdateOne) Select(field string, fields ...string) *RewardUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated Reward entity.
func (_u *RewardUpdateOne) Save(ctx context.Context) (*Reward, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *RewardUpdateOne) SaveX(ctx context.Context) *Reward {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *RewardUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *RewardUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *RewardUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := reward.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *RewardUpdateOne) check() error {
	if _u.mutation.MilestoneCleared() && len(_u.mutation.MilestoneIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Reward.milestone"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *RewardUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *RewardUpdateOne {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *RewardUpdateOne) sqlSave(ctx context.Context) (_node *Reward, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(reward.Table, reward.Columns, sqlgraph.NewFieldSpec(reward.FieldID, field.TypeUint64))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Reward.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, reward.FieldID)
		for _, f := range fields {
			if !reward.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != reward.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(reward.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.ExpiredDuration(); ok {
		_spec.SetField(reward.FieldExpiredDuration, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.AddedExpiredDuration(); ok {
		_spec.AddField(reward.FieldExpiredDuration, field.TypeFloat64, value)
	}
	if _u.mutation.ExpiredDurationCleared() {
		_spec.ClearField(reward.FieldExpiredDuration, field.TypeFloat64)
	}
	if value, ok := _u.mutation.ServiceIds(); ok {
		_spec.SetField(reward.FieldServiceIds, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedServiceIds(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, reward.FieldServiceIds, value)
		})
	}
	if value, ok := _u.mutation.CouponType(); ok {
		_spec.SetField(reward.FieldCouponType, field.TypeInt32, value)
	}
	if value, ok := _u.mutation.AddedCouponType(); ok {
		_spec.AddField(reward.FieldCouponType, field.TypeInt32, value)
	}
	if value, ok := _u.mutation.UsageLimit(); ok {
		_spec.SetField(reward.FieldUsageLimit, field.TypeInt32, value)
	}
	if value, ok := _u.mutation.AddedUsageLimit(); ok {
		_spec.AddField(reward.FieldUsageLimit, field.TypeInt32, value)
	}
	if _u.mutation.UsageLimitCleared() {
		_spec.ClearField(reward.FieldUsageLimit, field.TypeInt32)
	}
	if value, ok := _u.mutation.CouponValue(); ok {
		_spec.SetField(reward.FieldCouponValue, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.AddedCouponValue(); ok {
		_spec.AddField(reward.FieldCouponValue, field.TypeFloat64, value)
	}
	if _u.mutation.CurrencyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   reward.CurrencyTable,
			Columns: []string{reward.CurrencyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(currency.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.CurrencyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   reward.CurrencyTable,
			Columns: []string{reward.CurrencyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(currency.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.MilestoneCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   reward.MilestoneTable,
			Columns: []string{reward.MilestoneColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(milestone.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.MilestoneIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   reward.MilestoneTable,
			Columns: []string{reward.MilestoneColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(milestone.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(_u.modifiers...)
	_node = &Reward{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{reward.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
