// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	coupon "github.com/chisdev/coupon/api"
	"github.com/chisdev/coupon/pkg/ent/currency"
	"github.com/chisdev/coupon/pkg/ent/milestone"
	"github.com/chisdev/coupon/pkg/ent/reward"
)

// RewardCreate is the builder for creating a Reward entity.
type RewardCreate struct {
	config
	mutation *RewardMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (_c *RewardCreate) SetCreatedAt(v time.Time) *RewardCreate {
	_c.mutation.SetCreatedAt(v)
	return _c
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_c *RewardCreate) SetNillableCreatedAt(v *time.Time) *RewardCreate {
	if v != nil {
		_c.SetCreatedAt(*v)
	}
	return _c
}

// SetUpdatedAt sets the "updated_at" field.
func (_c *RewardCreate) SetUpdatedAt(v time.Time) *RewardCreate {
	_c.mutation.SetUpdatedAt(v)
	return _c
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_c *RewardCreate) SetNillableUpdatedAt(v *time.Time) *RewardCreate {
	if v != nil {
		_c.SetUpdatedAt(*v)
	}
	return _c
}

// SetMilestoneID sets the "milestone_id" field.
func (_c *RewardCreate) SetMilestoneID(v uint64) *RewardCreate {
	_c.mutation.SetMilestoneID(v)
	return _c
}

// SetExpiredDuration sets the "expired_duration" field.
func (_c *RewardCreate) SetExpiredDuration(v float64) *RewardCreate {
	_c.mutation.SetExpiredDuration(v)
	return _c
}

// SetNillableExpiredDuration sets the "expired_duration" field if the given value is not nil.
func (_c *RewardCreate) SetNillableExpiredDuration(v *float64) *RewardCreate {
	if v != nil {
		_c.SetExpiredDuration(*v)
	}
	return _c
}

// SetServiceIds sets the "service_ids" field.
func (_c *RewardCreate) SetServiceIds(v []uint64) *RewardCreate {
	_c.mutation.SetServiceIds(v)
	return _c
}

// SetCouponType sets the "coupon_type" field.
func (_c *RewardCreate) SetCouponType(v coupon.CouponType) *RewardCreate {
	_c.mutation.SetCouponType(v)
	return _c
}

// SetCurrencyID sets the "currency_id" field.
func (_c *RewardCreate) SetCurrencyID(v uint64) *RewardCreate {
	_c.mutation.SetCurrencyID(v)
	return _c
}

// SetNillableCurrencyID sets the "currency_id" field if the given value is not nil.
func (_c *RewardCreate) SetNillableCurrencyID(v *uint64) *RewardCreate {
	if v != nil {
		_c.SetCurrencyID(*v)
	}
	return _c
}

// SetUsageLimit sets the "usage_limit" field.
func (_c *RewardCreate) SetUsageLimit(v int32) *RewardCreate {
	_c.mutation.SetUsageLimit(v)
	return _c
}

// SetNillableUsageLimit sets the "usage_limit" field if the given value is not nil.
func (_c *RewardCreate) SetNillableUsageLimit(v *int32) *RewardCreate {
	if v != nil {
		_c.SetUsageLimit(*v)
	}
	return _c
}

// SetCouponValue sets the "coupon_value" field.
func (_c *RewardCreate) SetCouponValue(v float64) *RewardCreate {
	_c.mutation.SetCouponValue(v)
	return _c
}

// SetNillableCouponValue sets the "coupon_value" field if the given value is not nil.
func (_c *RewardCreate) SetNillableCouponValue(v *float64) *RewardCreate {
	if v != nil {
		_c.SetCouponValue(*v)
	}
	return _c
}

// SetID sets the "id" field.
func (_c *RewardCreate) SetID(v uint64) *RewardCreate {
	_c.mutation.SetID(v)
	return _c
}

// SetCurrency sets the "currency" edge to the Currency entity.
func (_c *RewardCreate) SetCurrency(v *Currency) *RewardCreate {
	return _c.SetCurrencyID(v.ID)
}

// SetMilestone sets the "milestone" edge to the Milestone entity.
func (_c *RewardCreate) SetMilestone(v *Milestone) *RewardCreate {
	return _c.SetMilestoneID(v.ID)
}

// Mutation returns the RewardMutation object of the builder.
func (_c *RewardCreate) Mutation() *RewardMutation {
	return _c.mutation
}

// Save creates the Reward in the database.
func (_c *RewardCreate) Save(ctx context.Context) (*Reward, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *RewardCreate) SaveX(ctx context.Context) *Reward {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *RewardCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *RewardCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *RewardCreate) defaults() {
	if _, ok := _c.mutation.CreatedAt(); !ok {
		v := reward.DefaultCreatedAt()
		_c.mutation.SetCreatedAt(v)
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		v := reward.DefaultUpdatedAt()
		_c.mutation.SetUpdatedAt(v)
	}
	if _, ok := _c.mutation.ServiceIds(); !ok {
		v := reward.DefaultServiceIds
		_c.mutation.SetServiceIds(v)
	}
	if _, ok := _c.mutation.UsageLimit(); !ok {
		v := reward.DefaultUsageLimit
		_c.mutation.SetUsageLimit(v)
	}
	if _, ok := _c.mutation.CouponValue(); !ok {
		v := reward.DefaultCouponValue
		_c.mutation.SetCouponValue(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *RewardCreate) check() error {
	if _, ok := _c.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Reward.created_at"`)}
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Reward.updated_at"`)}
	}
	if _, ok := _c.mutation.MilestoneID(); !ok {
		return &ValidationError{Name: "milestone_id", err: errors.New(`ent: missing required field "Reward.milestone_id"`)}
	}
	if _, ok := _c.mutation.ServiceIds(); !ok {
		return &ValidationError{Name: "service_ids", err: errors.New(`ent: missing required field "Reward.service_ids"`)}
	}
	if _, ok := _c.mutation.CouponType(); !ok {
		return &ValidationError{Name: "coupon_type", err: errors.New(`ent: missing required field "Reward.coupon_type"`)}
	}
	if _, ok := _c.mutation.UsageLimit(); !ok {
		return &ValidationError{Name: "usage_limit", err: errors.New(`ent: missing required field "Reward.usage_limit"`)}
	}
	if _, ok := _c.mutation.CouponValue(); !ok {
		return &ValidationError{Name: "coupon_value", err: errors.New(`ent: missing required field "Reward.coupon_value"`)}
	}
	if len(_c.mutation.MilestoneIDs()) == 0 {
		return &ValidationError{Name: "milestone", err: errors.New(`ent: missing required edge "Reward.milestone"`)}
	}
	return nil
}

func (_c *RewardCreate) sqlSave(ctx context.Context) (*Reward, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint64(id)
	}
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *RewardCreate) createSpec() (*Reward, *sqlgraph.CreateSpec) {
	var (
		_node = &Reward{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(reward.Table, sqlgraph.NewFieldSpec(reward.FieldID, field.TypeUint64))
	)
	_spec.OnConflict = _c.conflict
	if id, ok := _c.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := _c.mutation.CreatedAt(); ok {
		_spec.SetField(reward.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := _c.mutation.UpdatedAt(); ok {
		_spec.SetField(reward.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := _c.mutation.ExpiredDuration(); ok {
		_spec.SetField(reward.FieldExpiredDuration, field.TypeFloat64, value)
		_node.ExpiredDuration = &value
	}
	if value, ok := _c.mutation.ServiceIds(); ok {
		_spec.SetField(reward.FieldServiceIds, field.TypeJSON, value)
		_node.ServiceIds = value
	}
	if value, ok := _c.mutation.CouponType(); ok {
		_spec.SetField(reward.FieldCouponType, field.TypeInt32, value)
		_node.CouponType = value
	}
	if value, ok := _c.mutation.UsageLimit(); ok {
		_spec.SetField(reward.FieldUsageLimit, field.TypeInt32, value)
		_node.UsageLimit = value
	}
	if value, ok := _c.mutation.CouponValue(); ok {
		_spec.SetField(reward.FieldCouponValue, field.TypeFloat64, value)
		_node.CouponValue = value
	}
	if nodes := _c.mutation.CurrencyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   reward.CurrencyTable,
			Columns: []string{reward.CurrencyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(currency.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.CurrencyID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.MilestoneIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   reward.MilestoneTable,
			Columns: []string{reward.MilestoneColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(milestone.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.MilestoneID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Reward.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.RewardUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (_c *RewardCreate) OnConflict(opts ...sql.ConflictOption) *RewardUpsertOne {
	_c.conflict = opts
	return &RewardUpsertOne{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Reward.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *RewardCreate) OnConflictColumns(columns ...string) *RewardUpsertOne {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &RewardUpsertOne{
		create: _c,
	}
}

type (
	// RewardUpsertOne is the builder for "upsert"-ing
	//  one Reward node.
	RewardUpsertOne struct {
		create *RewardCreate
	}

	// RewardUpsert is the "OnConflict" setter.
	RewardUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *RewardUpsert) SetUpdatedAt(v time.Time) *RewardUpsert {
	u.Set(reward.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *RewardUpsert) UpdateUpdatedAt() *RewardUpsert {
	u.SetExcluded(reward.FieldUpdatedAt)
	return u
}

// SetMilestoneID sets the "milestone_id" field.
func (u *RewardUpsert) SetMilestoneID(v uint64) *RewardUpsert {
	u.Set(reward.FieldMilestoneID, v)
	return u
}

// UpdateMilestoneID sets the "milestone_id" field to the value that was provided on create.
func (u *RewardUpsert) UpdateMilestoneID() *RewardUpsert {
	u.SetExcluded(reward.FieldMilestoneID)
	return u
}

// SetExpiredDuration sets the "expired_duration" field.
func (u *RewardUpsert) SetExpiredDuration(v float64) *RewardUpsert {
	u.Set(reward.FieldExpiredDuration, v)
	return u
}

// UpdateExpiredDuration sets the "expired_duration" field to the value that was provided on create.
func (u *RewardUpsert) UpdateExpiredDuration() *RewardUpsert {
	u.SetExcluded(reward.FieldExpiredDuration)
	return u
}

// AddExpiredDuration adds v to the "expired_duration" field.
func (u *RewardUpsert) AddExpiredDuration(v float64) *RewardUpsert {
	u.Add(reward.FieldExpiredDuration, v)
	return u
}

// ClearExpiredDuration clears the value of the "expired_duration" field.
func (u *RewardUpsert) ClearExpiredDuration() *RewardUpsert {
	u.SetNull(reward.FieldExpiredDuration)
	return u
}

// SetServiceIds sets the "service_ids" field.
func (u *RewardUpsert) SetServiceIds(v []uint64) *RewardUpsert {
	u.Set(reward.FieldServiceIds, v)
	return u
}

// UpdateServiceIds sets the "service_ids" field to the value that was provided on create.
func (u *RewardUpsert) UpdateServiceIds() *RewardUpsert {
	u.SetExcluded(reward.FieldServiceIds)
	return u
}

// SetCouponType sets the "coupon_type" field.
func (u *RewardUpsert) SetCouponType(v coupon.CouponType) *RewardUpsert {
	u.Set(reward.FieldCouponType, v)
	return u
}

// UpdateCouponType sets the "coupon_type" field to the value that was provided on create.
func (u *RewardUpsert) UpdateCouponType() *RewardUpsert {
	u.SetExcluded(reward.FieldCouponType)
	return u
}

// AddCouponType adds v to the "coupon_type" field.
func (u *RewardUpsert) AddCouponType(v coupon.CouponType) *RewardUpsert {
	u.Add(reward.FieldCouponType, v)
	return u
}

// SetCurrencyID sets the "currency_id" field.
func (u *RewardUpsert) SetCurrencyID(v uint64) *RewardUpsert {
	u.Set(reward.FieldCurrencyID, v)
	return u
}

// UpdateCurrencyID sets the "currency_id" field to the value that was provided on create.
func (u *RewardUpsert) UpdateCurrencyID() *RewardUpsert {
	u.SetExcluded(reward.FieldCurrencyID)
	return u
}

// ClearCurrencyID clears the value of the "currency_id" field.
func (u *RewardUpsert) ClearCurrencyID() *RewardUpsert {
	u.SetNull(reward.FieldCurrencyID)
	return u
}

// SetUsageLimit sets the "usage_limit" field.
func (u *RewardUpsert) SetUsageLimit(v int32) *RewardUpsert {
	u.Set(reward.FieldUsageLimit, v)
	return u
}

// UpdateUsageLimit sets the "usage_limit" field to the value that was provided on create.
func (u *RewardUpsert) UpdateUsageLimit() *RewardUpsert {
	u.SetExcluded(reward.FieldUsageLimit)
	return u
}

// AddUsageLimit adds v to the "usage_limit" field.
func (u *RewardUpsert) AddUsageLimit(v int32) *RewardUpsert {
	u.Add(reward.FieldUsageLimit, v)
	return u
}

// SetCouponValue sets the "coupon_value" field.
func (u *RewardUpsert) SetCouponValue(v float64) *RewardUpsert {
	u.Set(reward.FieldCouponValue, v)
	return u
}

// UpdateCouponValue sets the "coupon_value" field to the value that was provided on create.
func (u *RewardUpsert) UpdateCouponValue() *RewardUpsert {
	u.SetExcluded(reward.FieldCouponValue)
	return u
}

// AddCouponValue adds v to the "coupon_value" field.
func (u *RewardUpsert) AddCouponValue(v float64) *RewardUpsert {
	u.Add(reward.FieldCouponValue, v)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Reward.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(reward.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *RewardUpsertOne) UpdateNewValues() *RewardUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(reward.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(reward.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Reward.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *RewardUpsertOne) Ignore() *RewardUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *RewardUpsertOne) DoNothing() *RewardUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the RewardCreate.OnConflict
// documentation for more info.
func (u *RewardUpsertOne) Update(set func(*RewardUpsert)) *RewardUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&RewardUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *RewardUpsertOne) SetUpdatedAt(v time.Time) *RewardUpsertOne {
	return u.Update(func(s *RewardUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *RewardUpsertOne) UpdateUpdatedAt() *RewardUpsertOne {
	return u.Update(func(s *RewardUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetMilestoneID sets the "milestone_id" field.
func (u *RewardUpsertOne) SetMilestoneID(v uint64) *RewardUpsertOne {
	return u.Update(func(s *RewardUpsert) {
		s.SetMilestoneID(v)
	})
}

// UpdateMilestoneID sets the "milestone_id" field to the value that was provided on create.
func (u *RewardUpsertOne) UpdateMilestoneID() *RewardUpsertOne {
	return u.Update(func(s *RewardUpsert) {
		s.UpdateMilestoneID()
	})
}

// SetExpiredDuration sets the "expired_duration" field.
func (u *RewardUpsertOne) SetExpiredDuration(v float64) *RewardUpsertOne {
	return u.Update(func(s *RewardUpsert) {
		s.SetExpiredDuration(v)
	})
}

// AddExpiredDuration adds v to the "expired_duration" field.
func (u *RewardUpsertOne) AddExpiredDuration(v float64) *RewardUpsertOne {
	return u.Update(func(s *RewardUpsert) {
		s.AddExpiredDuration(v)
	})
}

// UpdateExpiredDuration sets the "expired_duration" field to the value that was provided on create.
func (u *RewardUpsertOne) UpdateExpiredDuration() *RewardUpsertOne {
	return u.Update(func(s *RewardUpsert) {
		s.UpdateExpiredDuration()
	})
}

// ClearExpiredDuration clears the value of the "expired_duration" field.
func (u *RewardUpsertOne) ClearExpiredDuration() *RewardUpsertOne {
	return u.Update(func(s *RewardUpsert) {
		s.ClearExpiredDuration()
	})
}

// SetServiceIds sets the "service_ids" field.
func (u *RewardUpsertOne) SetServiceIds(v []uint64) *RewardUpsertOne {
	return u.Update(func(s *RewardUpsert) {
		s.SetServiceIds(v)
	})
}

// UpdateServiceIds sets the "service_ids" field to the value that was provided on create.
func (u *RewardUpsertOne) UpdateServiceIds() *RewardUpsertOne {
	return u.Update(func(s *RewardUpsert) {
		s.UpdateServiceIds()
	})
}

// SetCouponType sets the "coupon_type" field.
func (u *RewardUpsertOne) SetCouponType(v coupon.CouponType) *RewardUpsertOne {
	return u.Update(func(s *RewardUpsert) {
		s.SetCouponType(v)
	})
}

// AddCouponType adds v to the "coupon_type" field.
func (u *RewardUpsertOne) AddCouponType(v coupon.CouponType) *RewardUpsertOne {
	return u.Update(func(s *RewardUpsert) {
		s.AddCouponType(v)
	})
}

// UpdateCouponType sets the "coupon_type" field to the value that was provided on create.
func (u *RewardUpsertOne) UpdateCouponType() *RewardUpsertOne {
	return u.Update(func(s *RewardUpsert) {
		s.UpdateCouponType()
	})
}

// SetCurrencyID sets the "currency_id" field.
func (u *RewardUpsertOne) SetCurrencyID(v uint64) *RewardUpsertOne {
	return u.Update(func(s *RewardUpsert) {
		s.SetCurrencyID(v)
	})
}

// UpdateCurrencyID sets the "currency_id" field to the value that was provided on create.
func (u *RewardUpsertOne) UpdateCurrencyID() *RewardUpsertOne {
	return u.Update(func(s *RewardUpsert) {
		s.UpdateCurrencyID()
	})
}

// ClearCurrencyID clears the value of the "currency_id" field.
func (u *RewardUpsertOne) ClearCurrencyID() *RewardUpsertOne {
	return u.Update(func(s *RewardUpsert) {
		s.ClearCurrencyID()
	})
}

// SetUsageLimit sets the "usage_limit" field.
func (u *RewardUpsertOne) SetUsageLimit(v int32) *RewardUpsertOne {
	return u.Update(func(s *RewardUpsert) {
		s.SetUsageLimit(v)
	})
}

// AddUsageLimit adds v to the "usage_limit" field.
func (u *RewardUpsertOne) AddUsageLimit(v int32) *RewardUpsertOne {
	return u.Update(func(s *RewardUpsert) {
		s.AddUsageLimit(v)
	})
}

// UpdateUsageLimit sets the "usage_limit" field to the value that was provided on create.
func (u *RewardUpsertOne) UpdateUsageLimit() *RewardUpsertOne {
	return u.Update(func(s *RewardUpsert) {
		s.UpdateUsageLimit()
	})
}

// SetCouponValue sets the "coupon_value" field.
func (u *RewardUpsertOne) SetCouponValue(v float64) *RewardUpsertOne {
	return u.Update(func(s *RewardUpsert) {
		s.SetCouponValue(v)
	})
}

// AddCouponValue adds v to the "coupon_value" field.
func (u *RewardUpsertOne) AddCouponValue(v float64) *RewardUpsertOne {
	return u.Update(func(s *RewardUpsert) {
		s.AddCouponValue(v)
	})
}

// UpdateCouponValue sets the "coupon_value" field to the value that was provided on create.
func (u *RewardUpsertOne) UpdateCouponValue() *RewardUpsertOne {
	return u.Update(func(s *RewardUpsert) {
		s.UpdateCouponValue()
	})
}

// Exec executes the query.
func (u *RewardUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for RewardCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *RewardUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *RewardUpsertOne) ID(ctx context.Context) (id uint64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *RewardUpsertOne) IDX(ctx context.Context) uint64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// RewardCreateBulk is the builder for creating many Reward entities in bulk.
type RewardCreateBulk struct {
	config
	err      error
	builders []*RewardCreate
	conflict []sql.ConflictOption
}

// Save creates the Reward entities in the database.
func (_c *RewardCreateBulk) Save(ctx context.Context) ([]*Reward, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*Reward, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*RewardMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = _c.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *RewardCreateBulk) SaveX(ctx context.Context) []*Reward {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *RewardCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *RewardCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Reward.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.RewardUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (_c *RewardCreateBulk) OnConflict(opts ...sql.ConflictOption) *RewardUpsertBulk {
	_c.conflict = opts
	return &RewardUpsertBulk{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Reward.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *RewardCreateBulk) OnConflictColumns(columns ...string) *RewardUpsertBulk {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &RewardUpsertBulk{
		create: _c,
	}
}

// RewardUpsertBulk is the builder for "upsert"-ing
// a bulk of Reward nodes.
type RewardUpsertBulk struct {
	create *RewardCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Reward.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(reward.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *RewardUpsertBulk) UpdateNewValues() *RewardUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(reward.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(reward.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Reward.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *RewardUpsertBulk) Ignore() *RewardUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *RewardUpsertBulk) DoNothing() *RewardUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the RewardCreateBulk.OnConflict
// documentation for more info.
func (u *RewardUpsertBulk) Update(set func(*RewardUpsert)) *RewardUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&RewardUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *RewardUpsertBulk) SetUpdatedAt(v time.Time) *RewardUpsertBulk {
	return u.Update(func(s *RewardUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *RewardUpsertBulk) UpdateUpdatedAt() *RewardUpsertBulk {
	return u.Update(func(s *RewardUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetMilestoneID sets the "milestone_id" field.
func (u *RewardUpsertBulk) SetMilestoneID(v uint64) *RewardUpsertBulk {
	return u.Update(func(s *RewardUpsert) {
		s.SetMilestoneID(v)
	})
}

// UpdateMilestoneID sets the "milestone_id" field to the value that was provided on create.
func (u *RewardUpsertBulk) UpdateMilestoneID() *RewardUpsertBulk {
	return u.Update(func(s *RewardUpsert) {
		s.UpdateMilestoneID()
	})
}

// SetExpiredDuration sets the "expired_duration" field.
func (u *RewardUpsertBulk) SetExpiredDuration(v float64) *RewardUpsertBulk {
	return u.Update(func(s *RewardUpsert) {
		s.SetExpiredDuration(v)
	})
}

// AddExpiredDuration adds v to the "expired_duration" field.
func (u *RewardUpsertBulk) AddExpiredDuration(v float64) *RewardUpsertBulk {
	return u.Update(func(s *RewardUpsert) {
		s.AddExpiredDuration(v)
	})
}

// UpdateExpiredDuration sets the "expired_duration" field to the value that was provided on create.
func (u *RewardUpsertBulk) UpdateExpiredDuration() *RewardUpsertBulk {
	return u.Update(func(s *RewardUpsert) {
		s.UpdateExpiredDuration()
	})
}

// ClearExpiredDuration clears the value of the "expired_duration" field.
func (u *RewardUpsertBulk) ClearExpiredDuration() *RewardUpsertBulk {
	return u.Update(func(s *RewardUpsert) {
		s.ClearExpiredDuration()
	})
}

// SetServiceIds sets the "service_ids" field.
func (u *RewardUpsertBulk) SetServiceIds(v []uint64) *RewardUpsertBulk {
	return u.Update(func(s *RewardUpsert) {
		s.SetServiceIds(v)
	})
}

// UpdateServiceIds sets the "service_ids" field to the value that was provided on create.
func (u *RewardUpsertBulk) UpdateServiceIds() *RewardUpsertBulk {
	return u.Update(func(s *RewardUpsert) {
		s.UpdateServiceIds()
	})
}

// SetCouponType sets the "coupon_type" field.
func (u *RewardUpsertBulk) SetCouponType(v coupon.CouponType) *RewardUpsertBulk {
	return u.Update(func(s *RewardUpsert) {
		s.SetCouponType(v)
	})
}

// AddCouponType adds v to the "coupon_type" field.
func (u *RewardUpsertBulk) AddCouponType(v coupon.CouponType) *RewardUpsertBulk {
	return u.Update(func(s *RewardUpsert) {
		s.AddCouponType(v)
	})
}

// UpdateCouponType sets the "coupon_type" field to the value that was provided on create.
func (u *RewardUpsertBulk) UpdateCouponType() *RewardUpsertBulk {
	return u.Update(func(s *RewardUpsert) {
		s.UpdateCouponType()
	})
}

// SetCurrencyID sets the "currency_id" field.
func (u *RewardUpsertBulk) SetCurrencyID(v uint64) *RewardUpsertBulk {
	return u.Update(func(s *RewardUpsert) {
		s.SetCurrencyID(v)
	})
}

// UpdateCurrencyID sets the "currency_id" field to the value that was provided on create.
func (u *RewardUpsertBulk) UpdateCurrencyID() *RewardUpsertBulk {
	return u.Update(func(s *RewardUpsert) {
		s.UpdateCurrencyID()
	})
}

// ClearCurrencyID clears the value of the "currency_id" field.
func (u *RewardUpsertBulk) ClearCurrencyID() *RewardUpsertBulk {
	return u.Update(func(s *RewardUpsert) {
		s.ClearCurrencyID()
	})
}

// SetUsageLimit sets the "usage_limit" field.
func (u *RewardUpsertBulk) SetUsageLimit(v int32) *RewardUpsertBulk {
	return u.Update(func(s *RewardUpsert) {
		s.SetUsageLimit(v)
	})
}

// AddUsageLimit adds v to the "usage_limit" field.
func (u *RewardUpsertBulk) AddUsageLimit(v int32) *RewardUpsertBulk {
	return u.Update(func(s *RewardUpsert) {
		s.AddUsageLimit(v)
	})
}

// UpdateUsageLimit sets the "usage_limit" field to the value that was provided on create.
func (u *RewardUpsertBulk) UpdateUsageLimit() *RewardUpsertBulk {
	return u.Update(func(s *RewardUpsert) {
		s.UpdateUsageLimit()
	})
}

// SetCouponValue sets the "coupon_value" field.
func (u *RewardUpsertBulk) SetCouponValue(v float64) *RewardUpsertBulk {
	return u.Update(func(s *RewardUpsert) {
		s.SetCouponValue(v)
	})
}

// AddCouponValue adds v to the "coupon_value" field.
func (u *RewardUpsertBulk) AddCouponValue(v float64) *RewardUpsertBulk {
	return u.Update(func(s *RewardUpsert) {
		s.AddCouponValue(v)
	})
}

// UpdateCouponValue sets the "coupon_value" field to the value that was provided on create.
func (u *RewardUpsertBulk) UpdateCouponValue() *RewardUpsertBulk {
	return u.Update(func(s *RewardUpsert) {
		s.UpdateCouponValue()
	})
}

// Exec executes the query.
func (u *RewardUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the RewardCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for RewardCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *RewardUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
