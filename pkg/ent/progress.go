// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/chisdev/coupon/pkg/ent/milestone"
	"github.com/chisdev/coupon/pkg/ent/progress"
)

// Progress is the model entity for the Progress schema.
type Progress struct {
	config `json:"-"`
	// ID of the ent.
	ID uint64 `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// CustomerID holds the value of the "customer_id" field.
	CustomerID string `json:"customer_id,omitempty"`
	// MilestoneID holds the value of the "milestone_id" field.
	MilestoneID uint64 `json:"milestone_id,omitempty"`
	// Progress holds the value of the "progress" field.
	Progress int32 `json:"progress,omitempty"`
	// PassCount holds the value of the "pass_count" field.
	PassCount int32 `json:"pass_count,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ProgressQuery when eager-loading is set.
	Edges        ProgressEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ProgressEdges holds the relations/edges for other nodes in the graph.
type ProgressEdges struct {
	// Milestone holds the value of the milestone edge.
	Milestone *Milestone `json:"milestone,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// MilestoneOrErr returns the Milestone value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProgressEdges) MilestoneOrErr() (*Milestone, error) {
	if e.Milestone != nil {
		return e.Milestone, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: milestone.Label}
	}
	return nil, &NotLoadedError{edge: "milestone"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Progress) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case progress.FieldID, progress.FieldMilestoneID, progress.FieldProgress, progress.FieldPassCount:
			values[i] = new(sql.NullInt64)
		case progress.FieldCustomerID:
			values[i] = new(sql.NullString)
		case progress.FieldCreatedAt, progress.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Progress fields.
func (_m *Progress) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case progress.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			_m.ID = uint64(value.Int64)
		case progress.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				_m.CreatedAt = value.Time
			}
		case progress.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				_m.UpdatedAt = value.Time
			}
		case progress.FieldCustomerID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field customer_id", values[i])
			} else if value.Valid {
				_m.CustomerID = value.String
			}
		case progress.FieldMilestoneID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field milestone_id", values[i])
			} else if value.Valid {
				_m.MilestoneID = uint64(value.Int64)
			}
		case progress.FieldProgress:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field progress", values[i])
			} else if value.Valid {
				_m.Progress = int32(value.Int64)
			}
		case progress.FieldPassCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field pass_count", values[i])
			} else if value.Valid {
				_m.PassCount = int32(value.Int64)
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Progress.
// This includes values selected through modifiers, order, etc.
func (_m *Progress) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryMilestone queries the "milestone" edge of the Progress entity.
func (_m *Progress) QueryMilestone() *MilestoneQuery {
	return NewProgressClient(_m.config).QueryMilestone(_m)
}

// Update returns a builder for updating this Progress.
// Note that you need to call Progress.Unwrap() before calling this method if this Progress
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *Progress) Update() *ProgressUpdateOne {
	return NewProgressClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the Progress entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *Progress) Unwrap() *Progress {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: Progress is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *Progress) String() string {
	var builder strings.Builder
	builder.WriteString("Progress(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("created_at=")
	builder.WriteString(_m.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(_m.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("customer_id=")
	builder.WriteString(_m.CustomerID)
	builder.WriteString(", ")
	builder.WriteString("milestone_id=")
	builder.WriteString(fmt.Sprintf("%v", _m.MilestoneID))
	builder.WriteString(", ")
	builder.WriteString("progress=")
	builder.WriteString(fmt.Sprintf("%v", _m.Progress))
	builder.WriteString(", ")
	builder.WriteString("pass_count=")
	builder.WriteString(fmt.Sprintf("%v", _m.PassCount))
	builder.WriteByte(')')
	return builder.String()
}

// Progresses is a parsable slice of Progress.
type Progresses []*Progress
