// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	coupon "github.com/chisdev/coupon/api"
	entcoupon "github.com/chisdev/coupon/pkg/ent/coupon"
	"github.com/chisdev/coupon/pkg/ent/currency"
)

// CouponCreate is the builder for creating a Coupon entity.
type CouponCreate struct {
	config
	mutation *CouponMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (_c *CouponCreate) SetCreatedAt(v time.Time) *CouponCreate {
	_c.mutation.SetCreatedAt(v)
	return _c
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_c *CouponCreate) SetNillableCreatedAt(v *time.Time) *CouponCreate {
	if v != nil {
		_c.SetCreatedAt(*v)
	}
	return _c
}

// SetUpdatedAt sets the "updated_at" field.
func (_c *CouponCreate) SetUpdatedAt(v time.Time) *CouponCreate {
	_c.mutation.SetUpdatedAt(v)
	return _c
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_c *CouponCreate) SetNillableUpdatedAt(v *time.Time) *CouponCreate {
	if v != nil {
		_c.SetUpdatedAt(*v)
	}
	return _c
}

// SetCode sets the "code" field.
func (_c *CouponCreate) SetCode(v string) *CouponCreate {
	_c.mutation.SetCode(v)
	return _c
}

// SetValue sets the "value" field.
func (_c *CouponCreate) SetValue(v float64) *CouponCreate {
	_c.mutation.SetValue(v)
	return _c
}

// SetNillableValue sets the "value" field if the given value is not nil.
func (_c *CouponCreate) SetNillableValue(v *float64) *CouponCreate {
	if v != nil {
		_c.SetValue(*v)
	}
	return _c
}

// SetStoreID sets the "store_id" field.
func (_c *CouponCreate) SetStoreID(v string) *CouponCreate {
	_c.mutation.SetStoreID(v)
	return _c
}

// SetExpireAt sets the "expire_at" field.
func (_c *CouponCreate) SetExpireAt(v time.Time) *CouponCreate {
	_c.mutation.SetExpireAt(v)
	return _c
}

// SetNillableExpireAt sets the "expire_at" field if the given value is not nil.
func (_c *CouponCreate) SetNillableExpireAt(v *time.Time) *CouponCreate {
	if v != nil {
		_c.SetExpireAt(*v)
	}
	return _c
}

// SetCustomerID sets the "customer_id" field.
func (_c *CouponCreate) SetCustomerID(v string) *CouponCreate {
	_c.mutation.SetCustomerID(v)
	return _c
}

// SetNillableCustomerID sets the "customer_id" field if the given value is not nil.
func (_c *CouponCreate) SetNillableCustomerID(v *string) *CouponCreate {
	if v != nil {
		_c.SetCustomerID(*v)
	}
	return _c
}

// SetServiceIds sets the "service_ids" field.
func (_c *CouponCreate) SetServiceIds(v []uint64) *CouponCreate {
	_c.mutation.SetServiceIds(v)
	return _c
}

// SetType sets the "type" field.
func (_c *CouponCreate) SetType(v coupon.CouponType) *CouponCreate {
	_c.mutation.SetType(v)
	return _c
}

// SetCurrencyID sets the "currency_id" field.
func (_c *CouponCreate) SetCurrencyID(v uint64) *CouponCreate {
	_c.mutation.SetCurrencyID(v)
	return _c
}

// SetNillableCurrencyID sets the "currency_id" field if the given value is not nil.
func (_c *CouponCreate) SetNillableCurrencyID(v *uint64) *CouponCreate {
	if v != nil {
		_c.SetCurrencyID(*v)
	}
	return _c
}

// SetUsageLimit sets the "usage_limit" field.
func (_c *CouponCreate) SetUsageLimit(v int32) *CouponCreate {
	_c.mutation.SetUsageLimit(v)
	return _c
}

// SetNillableUsageLimit sets the "usage_limit" field if the given value is not nil.
func (_c *CouponCreate) SetNillableUsageLimit(v *int32) *CouponCreate {
	if v != nil {
		_c.SetUsageLimit(*v)
	}
	return _c
}

// SetUsedCount sets the "used_count" field.
func (_c *CouponCreate) SetUsedCount(v int32) *CouponCreate {
	_c.mutation.SetUsedCount(v)
	return _c
}

// SetNillableUsedCount sets the "used_count" field if the given value is not nil.
func (_c *CouponCreate) SetNillableUsedCount(v *int32) *CouponCreate {
	if v != nil {
		_c.SetUsedCount(*v)
	}
	return _c
}

// SetStatus sets the "status" field.
func (_c *CouponCreate) SetStatus(v coupon.CouponStatus) *CouponCreate {
	_c.mutation.SetStatus(v)
	return _c
}

// SetReservedCount sets the "reserved_count" field.
func (_c *CouponCreate) SetReservedCount(v int32) *CouponCreate {
	_c.mutation.SetReservedCount(v)
	return _c
}

// SetNillableReservedCount sets the "reserved_count" field if the given value is not nil.
func (_c *CouponCreate) SetNillableReservedCount(v *int32) *CouponCreate {
	if v != nil {
		_c.SetReservedCount(*v)
	}
	return _c
}

// SetID sets the "id" field.
func (_c *CouponCreate) SetID(v uint64) *CouponCreate {
	_c.mutation.SetID(v)
	return _c
}

// SetCurrency sets the "currency" edge to the Currency entity.
func (_c *CouponCreate) SetCurrency(v *Currency) *CouponCreate {
	return _c.SetCurrencyID(v.ID)
}

// Mutation returns the CouponMutation object of the builder.
func (_c *CouponCreate) Mutation() *CouponMutation {
	return _c.mutation
}

// Save creates the Coupon in the database.
func (_c *CouponCreate) Save(ctx context.Context) (*Coupon, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *CouponCreate) SaveX(ctx context.Context) *Coupon {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *CouponCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *CouponCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *CouponCreate) defaults() {
	if _, ok := _c.mutation.CreatedAt(); !ok {
		v := entcoupon.DefaultCreatedAt()
		_c.mutation.SetCreatedAt(v)
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		v := entcoupon.DefaultUpdatedAt()
		_c.mutation.SetUpdatedAt(v)
	}
	if _, ok := _c.mutation.Value(); !ok {
		v := entcoupon.DefaultValue
		_c.mutation.SetValue(v)
	}
	if _, ok := _c.mutation.ServiceIds(); !ok {
		v := entcoupon.DefaultServiceIds
		_c.mutation.SetServiceIds(v)
	}
	if _, ok := _c.mutation.UsageLimit(); !ok {
		v := entcoupon.DefaultUsageLimit
		_c.mutation.SetUsageLimit(v)
	}
	if _, ok := _c.mutation.UsedCount(); !ok {
		v := entcoupon.DefaultUsedCount
		_c.mutation.SetUsedCount(v)
	}
	if _, ok := _c.mutation.ReservedCount(); !ok {
		v := entcoupon.DefaultReservedCount
		_c.mutation.SetReservedCount(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *CouponCreate) check() error {
	if _, ok := _c.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Coupon.created_at"`)}
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Coupon.updated_at"`)}
	}
	if _, ok := _c.mutation.Code(); !ok {
		return &ValidationError{Name: "code", err: errors.New(`ent: missing required field "Coupon.code"`)}
	}
	if _, ok := _c.mutation.Value(); !ok {
		return &ValidationError{Name: "value", err: errors.New(`ent: missing required field "Coupon.value"`)}
	}
	if _, ok := _c.mutation.StoreID(); !ok {
		return &ValidationError{Name: "store_id", err: errors.New(`ent: missing required field "Coupon.store_id"`)}
	}
	if v, ok := _c.mutation.StoreID(); ok {
		if err := entcoupon.StoreIDValidator(v); err != nil {
			return &ValidationError{Name: "store_id", err: fmt.Errorf(`ent: validator failed for field "Coupon.store_id": %w`, err)}
		}
	}
	if _, ok := _c.mutation.ServiceIds(); !ok {
		return &ValidationError{Name: "service_ids", err: errors.New(`ent: missing required field "Coupon.service_ids"`)}
	}
	if _, ok := _c.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "Coupon.type"`)}
	}
	if _, ok := _c.mutation.UsageLimit(); !ok {
		return &ValidationError{Name: "usage_limit", err: errors.New(`ent: missing required field "Coupon.usage_limit"`)}
	}
	if _, ok := _c.mutation.UsedCount(); !ok {
		return &ValidationError{Name: "used_count", err: errors.New(`ent: missing required field "Coupon.used_count"`)}
	}
	if _, ok := _c.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "Coupon.status"`)}
	}
	if _, ok := _c.mutation.ReservedCount(); !ok {
		return &ValidationError{Name: "reserved_count", err: errors.New(`ent: missing required field "Coupon.reserved_count"`)}
	}
	return nil
}

func (_c *CouponCreate) sqlSave(ctx context.Context) (*Coupon, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint64(id)
	}
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *CouponCreate) createSpec() (*Coupon, *sqlgraph.CreateSpec) {
	var (
		_node = &Coupon{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(entcoupon.Table, sqlgraph.NewFieldSpec(entcoupon.FieldID, field.TypeUint64))
	)
	_spec.OnConflict = _c.conflict
	if id, ok := _c.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := _c.mutation.CreatedAt(); ok {
		_spec.SetField(entcoupon.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := _c.mutation.UpdatedAt(); ok {
		_spec.SetField(entcoupon.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := _c.mutation.Code(); ok {
		_spec.SetField(entcoupon.FieldCode, field.TypeString, value)
		_node.Code = value
	}
	if value, ok := _c.mutation.Value(); ok {
		_spec.SetField(entcoupon.FieldValue, field.TypeFloat64, value)
		_node.Value = value
	}
	if value, ok := _c.mutation.StoreID(); ok {
		_spec.SetField(entcoupon.FieldStoreID, field.TypeString, value)
		_node.StoreID = value
	}
	if value, ok := _c.mutation.ExpireAt(); ok {
		_spec.SetField(entcoupon.FieldExpireAt, field.TypeTime, value)
		_node.ExpireAt = &value
	}
	if value, ok := _c.mutation.CustomerID(); ok {
		_spec.SetField(entcoupon.FieldCustomerID, field.TypeString, value)
		_node.CustomerID = &value
	}
	if value, ok := _c.mutation.ServiceIds(); ok {
		_spec.SetField(entcoupon.FieldServiceIds, field.TypeJSON, value)
		_node.ServiceIds = value
	}
	if value, ok := _c.mutation.GetType(); ok {
		_spec.SetField(entcoupon.FieldType, field.TypeInt32, value)
		_node.Type = value
	}
	if value, ok := _c.mutation.UsageLimit(); ok {
		_spec.SetField(entcoupon.FieldUsageLimit, field.TypeInt32, value)
		_node.UsageLimit = value
	}
	if value, ok := _c.mutation.UsedCount(); ok {
		_spec.SetField(entcoupon.FieldUsedCount, field.TypeInt32, value)
		_node.UsedCount = value
	}
	if value, ok := _c.mutation.Status(); ok {
		_spec.SetField(entcoupon.FieldStatus, field.TypeInt32, value)
		_node.Status = value
	}
	if value, ok := _c.mutation.ReservedCount(); ok {
		_spec.SetField(entcoupon.FieldReservedCount, field.TypeInt32, value)
		_node.ReservedCount = value
	}
	if nodes := _c.mutation.CurrencyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   entcoupon.CurrencyTable,
			Columns: []string{entcoupon.CurrencyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(currency.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.CurrencyID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Coupon.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CouponUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (_c *CouponCreate) OnConflict(opts ...sql.ConflictOption) *CouponUpsertOne {
	_c.conflict = opts
	return &CouponUpsertOne{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Coupon.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *CouponCreate) OnConflictColumns(columns ...string) *CouponUpsertOne {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &CouponUpsertOne{
		create: _c,
	}
}

type (
	// CouponUpsertOne is the builder for "upsert"-ing
	//  one Coupon node.
	CouponUpsertOne struct {
		create *CouponCreate
	}

	// CouponUpsert is the "OnConflict" setter.
	CouponUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *CouponUpsert) SetUpdatedAt(v time.Time) *CouponUpsert {
	u.Set(entcoupon.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *CouponUpsert) UpdateUpdatedAt() *CouponUpsert {
	u.SetExcluded(entcoupon.FieldUpdatedAt)
	return u
}

// SetCode sets the "code" field.
func (u *CouponUpsert) SetCode(v string) *CouponUpsert {
	u.Set(entcoupon.FieldCode, v)
	return u
}

// UpdateCode sets the "code" field to the value that was provided on create.
func (u *CouponUpsert) UpdateCode() *CouponUpsert {
	u.SetExcluded(entcoupon.FieldCode)
	return u
}

// SetValue sets the "value" field.
func (u *CouponUpsert) SetValue(v float64) *CouponUpsert {
	u.Set(entcoupon.FieldValue, v)
	return u
}

// UpdateValue sets the "value" field to the value that was provided on create.
func (u *CouponUpsert) UpdateValue() *CouponUpsert {
	u.SetExcluded(entcoupon.FieldValue)
	return u
}

// AddValue adds v to the "value" field.
func (u *CouponUpsert) AddValue(v float64) *CouponUpsert {
	u.Add(entcoupon.FieldValue, v)
	return u
}

// SetStoreID sets the "store_id" field.
func (u *CouponUpsert) SetStoreID(v string) *CouponUpsert {
	u.Set(entcoupon.FieldStoreID, v)
	return u
}

// UpdateStoreID sets the "store_id" field to the value that was provided on create.
func (u *CouponUpsert) UpdateStoreID() *CouponUpsert {
	u.SetExcluded(entcoupon.FieldStoreID)
	return u
}

// SetExpireAt sets the "expire_at" field.
func (u *CouponUpsert) SetExpireAt(v time.Time) *CouponUpsert {
	u.Set(entcoupon.FieldExpireAt, v)
	return u
}

// UpdateExpireAt sets the "expire_at" field to the value that was provided on create.
func (u *CouponUpsert) UpdateExpireAt() *CouponUpsert {
	u.SetExcluded(entcoupon.FieldExpireAt)
	return u
}

// ClearExpireAt clears the value of the "expire_at" field.
func (u *CouponUpsert) ClearExpireAt() *CouponUpsert {
	u.SetNull(entcoupon.FieldExpireAt)
	return u
}

// SetCustomerID sets the "customer_id" field.
func (u *CouponUpsert) SetCustomerID(v string) *CouponUpsert {
	u.Set(entcoupon.FieldCustomerID, v)
	return u
}

// UpdateCustomerID sets the "customer_id" field to the value that was provided on create.
func (u *CouponUpsert) UpdateCustomerID() *CouponUpsert {
	u.SetExcluded(entcoupon.FieldCustomerID)
	return u
}

// ClearCustomerID clears the value of the "customer_id" field.
func (u *CouponUpsert) ClearCustomerID() *CouponUpsert {
	u.SetNull(entcoupon.FieldCustomerID)
	return u
}

// SetServiceIds sets the "service_ids" field.
func (u *CouponUpsert) SetServiceIds(v []uint64) *CouponUpsert {
	u.Set(entcoupon.FieldServiceIds, v)
	return u
}

// UpdateServiceIds sets the "service_ids" field to the value that was provided on create.
func (u *CouponUpsert) UpdateServiceIds() *CouponUpsert {
	u.SetExcluded(entcoupon.FieldServiceIds)
	return u
}

// SetType sets the "type" field.
func (u *CouponUpsert) SetType(v coupon.CouponType) *CouponUpsert {
	u.Set(entcoupon.FieldType, v)
	return u
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *CouponUpsert) UpdateType() *CouponUpsert {
	u.SetExcluded(entcoupon.FieldType)
	return u
}

// AddType adds v to the "type" field.
func (u *CouponUpsert) AddType(v coupon.CouponType) *CouponUpsert {
	u.Add(entcoupon.FieldType, v)
	return u
}

// SetCurrencyID sets the "currency_id" field.
func (u *CouponUpsert) SetCurrencyID(v uint64) *CouponUpsert {
	u.Set(entcoupon.FieldCurrencyID, v)
	return u
}

// UpdateCurrencyID sets the "currency_id" field to the value that was provided on create.
func (u *CouponUpsert) UpdateCurrencyID() *CouponUpsert {
	u.SetExcluded(entcoupon.FieldCurrencyID)
	return u
}

// ClearCurrencyID clears the value of the "currency_id" field.
func (u *CouponUpsert) ClearCurrencyID() *CouponUpsert {
	u.SetNull(entcoupon.FieldCurrencyID)
	return u
}

// SetUsageLimit sets the "usage_limit" field.
func (u *CouponUpsert) SetUsageLimit(v int32) *CouponUpsert {
	u.Set(entcoupon.FieldUsageLimit, v)
	return u
}

// UpdateUsageLimit sets the "usage_limit" field to the value that was provided on create.
func (u *CouponUpsert) UpdateUsageLimit() *CouponUpsert {
	u.SetExcluded(entcoupon.FieldUsageLimit)
	return u
}

// AddUsageLimit adds v to the "usage_limit" field.
func (u *CouponUpsert) AddUsageLimit(v int32) *CouponUpsert {
	u.Add(entcoupon.FieldUsageLimit, v)
	return u
}

// SetUsedCount sets the "used_count" field.
func (u *CouponUpsert) SetUsedCount(v int32) *CouponUpsert {
	u.Set(entcoupon.FieldUsedCount, v)
	return u
}

// UpdateUsedCount sets the "used_count" field to the value that was provided on create.
func (u *CouponUpsert) UpdateUsedCount() *CouponUpsert {
	u.SetExcluded(entcoupon.FieldUsedCount)
	return u
}

// AddUsedCount adds v to the "used_count" field.
func (u *CouponUpsert) AddUsedCount(v int32) *CouponUpsert {
	u.Add(entcoupon.FieldUsedCount, v)
	return u
}

// SetStatus sets the "status" field.
func (u *CouponUpsert) SetStatus(v coupon.CouponStatus) *CouponUpsert {
	u.Set(entcoupon.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *CouponUpsert) UpdateStatus() *CouponUpsert {
	u.SetExcluded(entcoupon.FieldStatus)
	return u
}

// AddStatus adds v to the "status" field.
func (u *CouponUpsert) AddStatus(v coupon.CouponStatus) *CouponUpsert {
	u.Add(entcoupon.FieldStatus, v)
	return u
}

// SetReservedCount sets the "reserved_count" field.
func (u *CouponUpsert) SetReservedCount(v int32) *CouponUpsert {
	u.Set(entcoupon.FieldReservedCount, v)
	return u
}

// UpdateReservedCount sets the "reserved_count" field to the value that was provided on create.
func (u *CouponUpsert) UpdateReservedCount() *CouponUpsert {
	u.SetExcluded(entcoupon.FieldReservedCount)
	return u
}

// AddReservedCount adds v to the "reserved_count" field.
func (u *CouponUpsert) AddReservedCount(v int32) *CouponUpsert {
	u.Add(entcoupon.FieldReservedCount, v)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Coupon.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(entcoupon.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *CouponUpsertOne) UpdateNewValues() *CouponUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(entcoupon.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(entcoupon.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Coupon.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *CouponUpsertOne) Ignore() *CouponUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CouponUpsertOne) DoNothing() *CouponUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CouponCreate.OnConflict
// documentation for more info.
func (u *CouponUpsertOne) Update(set func(*CouponUpsert)) *CouponUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CouponUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *CouponUpsertOne) SetUpdatedAt(v time.Time) *CouponUpsertOne {
	return u.Update(func(s *CouponUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *CouponUpsertOne) UpdateUpdatedAt() *CouponUpsertOne {
	return u.Update(func(s *CouponUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetCode sets the "code" field.
func (u *CouponUpsertOne) SetCode(v string) *CouponUpsertOne {
	return u.Update(func(s *CouponUpsert) {
		s.SetCode(v)
	})
}

// UpdateCode sets the "code" field to the value that was provided on create.
func (u *CouponUpsertOne) UpdateCode() *CouponUpsertOne {
	return u.Update(func(s *CouponUpsert) {
		s.UpdateCode()
	})
}

// SetValue sets the "value" field.
func (u *CouponUpsertOne) SetValue(v float64) *CouponUpsertOne {
	return u.Update(func(s *CouponUpsert) {
		s.SetValue(v)
	})
}

// AddValue adds v to the "value" field.
func (u *CouponUpsertOne) AddValue(v float64) *CouponUpsertOne {
	return u.Update(func(s *CouponUpsert) {
		s.AddValue(v)
	})
}

// UpdateValue sets the "value" field to the value that was provided on create.
func (u *CouponUpsertOne) UpdateValue() *CouponUpsertOne {
	return u.Update(func(s *CouponUpsert) {
		s.UpdateValue()
	})
}

// SetStoreID sets the "store_id" field.
func (u *CouponUpsertOne) SetStoreID(v string) *CouponUpsertOne {
	return u.Update(func(s *CouponUpsert) {
		s.SetStoreID(v)
	})
}

// UpdateStoreID sets the "store_id" field to the value that was provided on create.
func (u *CouponUpsertOne) UpdateStoreID() *CouponUpsertOne {
	return u.Update(func(s *CouponUpsert) {
		s.UpdateStoreID()
	})
}

// SetExpireAt sets the "expire_at" field.
func (u *CouponUpsertOne) SetExpireAt(v time.Time) *CouponUpsertOne {
	return u.Update(func(s *CouponUpsert) {
		s.SetExpireAt(v)
	})
}

// UpdateExpireAt sets the "expire_at" field to the value that was provided on create.
func (u *CouponUpsertOne) UpdateExpireAt() *CouponUpsertOne {
	return u.Update(func(s *CouponUpsert) {
		s.UpdateExpireAt()
	})
}

// ClearExpireAt clears the value of the "expire_at" field.
func (u *CouponUpsertOne) ClearExpireAt() *CouponUpsertOne {
	return u.Update(func(s *CouponUpsert) {
		s.ClearExpireAt()
	})
}

// SetCustomerID sets the "customer_id" field.
func (u *CouponUpsertOne) SetCustomerID(v string) *CouponUpsertOne {
	return u.Update(func(s *CouponUpsert) {
		s.SetCustomerID(v)
	})
}

// UpdateCustomerID sets the "customer_id" field to the value that was provided on create.
func (u *CouponUpsertOne) UpdateCustomerID() *CouponUpsertOne {
	return u.Update(func(s *CouponUpsert) {
		s.UpdateCustomerID()
	})
}

// ClearCustomerID clears the value of the "customer_id" field.
func (u *CouponUpsertOne) ClearCustomerID() *CouponUpsertOne {
	return u.Update(func(s *CouponUpsert) {
		s.ClearCustomerID()
	})
}

// SetServiceIds sets the "service_ids" field.
func (u *CouponUpsertOne) SetServiceIds(v []uint64) *CouponUpsertOne {
	return u.Update(func(s *CouponUpsert) {
		s.SetServiceIds(v)
	})
}

// UpdateServiceIds sets the "service_ids" field to the value that was provided on create.
func (u *CouponUpsertOne) UpdateServiceIds() *CouponUpsertOne {
	return u.Update(func(s *CouponUpsert) {
		s.UpdateServiceIds()
	})
}

// SetType sets the "type" field.
func (u *CouponUpsertOne) SetType(v coupon.CouponType) *CouponUpsertOne {
	return u.Update(func(s *CouponUpsert) {
		s.SetType(v)
	})
}

// AddType adds v to the "type" field.
func (u *CouponUpsertOne) AddType(v coupon.CouponType) *CouponUpsertOne {
	return u.Update(func(s *CouponUpsert) {
		s.AddType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *CouponUpsertOne) UpdateType() *CouponUpsertOne {
	return u.Update(func(s *CouponUpsert) {
		s.UpdateType()
	})
}

// SetCurrencyID sets the "currency_id" field.
func (u *CouponUpsertOne) SetCurrencyID(v uint64) *CouponUpsertOne {
	return u.Update(func(s *CouponUpsert) {
		s.SetCurrencyID(v)
	})
}

// UpdateCurrencyID sets the "currency_id" field to the value that was provided on create.
func (u *CouponUpsertOne) UpdateCurrencyID() *CouponUpsertOne {
	return u.Update(func(s *CouponUpsert) {
		s.UpdateCurrencyID()
	})
}

// ClearCurrencyID clears the value of the "currency_id" field.
func (u *CouponUpsertOne) ClearCurrencyID() *CouponUpsertOne {
	return u.Update(func(s *CouponUpsert) {
		s.ClearCurrencyID()
	})
}

// SetUsageLimit sets the "usage_limit" field.
func (u *CouponUpsertOne) SetUsageLimit(v int32) *CouponUpsertOne {
	return u.Update(func(s *CouponUpsert) {
		s.SetUsageLimit(v)
	})
}

// AddUsageLimit adds v to the "usage_limit" field.
func (u *CouponUpsertOne) AddUsageLimit(v int32) *CouponUpsertOne {
	return u.Update(func(s *CouponUpsert) {
		s.AddUsageLimit(v)
	})
}

// UpdateUsageLimit sets the "usage_limit" field to the value that was provided on create.
func (u *CouponUpsertOne) UpdateUsageLimit() *CouponUpsertOne {
	return u.Update(func(s *CouponUpsert) {
		s.UpdateUsageLimit()
	})
}

// SetUsedCount sets the "used_count" field.
func (u *CouponUpsertOne) SetUsedCount(v int32) *CouponUpsertOne {
	return u.Update(func(s *CouponUpsert) {
		s.SetUsedCount(v)
	})
}

// AddUsedCount adds v to the "used_count" field.
func (u *CouponUpsertOne) AddUsedCount(v int32) *CouponUpsertOne {
	return u.Update(func(s *CouponUpsert) {
		s.AddUsedCount(v)
	})
}

// UpdateUsedCount sets the "used_count" field to the value that was provided on create.
func (u *CouponUpsertOne) UpdateUsedCount() *CouponUpsertOne {
	return u.Update(func(s *CouponUpsert) {
		s.UpdateUsedCount()
	})
}

// SetStatus sets the "status" field.
func (u *CouponUpsertOne) SetStatus(v coupon.CouponStatus) *CouponUpsertOne {
	return u.Update(func(s *CouponUpsert) {
		s.SetStatus(v)
	})
}

// AddStatus adds v to the "status" field.
func (u *CouponUpsertOne) AddStatus(v coupon.CouponStatus) *CouponUpsertOne {
	return u.Update(func(s *CouponUpsert) {
		s.AddStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *CouponUpsertOne) UpdateStatus() *CouponUpsertOne {
	return u.Update(func(s *CouponUpsert) {
		s.UpdateStatus()
	})
}

// SetReservedCount sets the "reserved_count" field.
func (u *CouponUpsertOne) SetReservedCount(v int32) *CouponUpsertOne {
	return u.Update(func(s *CouponUpsert) {
		s.SetReservedCount(v)
	})
}

// AddReservedCount adds v to the "reserved_count" field.
func (u *CouponUpsertOne) AddReservedCount(v int32) *CouponUpsertOne {
	return u.Update(func(s *CouponUpsert) {
		s.AddReservedCount(v)
	})
}

// UpdateReservedCount sets the "reserved_count" field to the value that was provided on create.
func (u *CouponUpsertOne) UpdateReservedCount() *CouponUpsertOne {
	return u.Update(func(s *CouponUpsert) {
		s.UpdateReservedCount()
	})
}

// Exec executes the query.
func (u *CouponUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for CouponCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CouponUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *CouponUpsertOne) ID(ctx context.Context) (id uint64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *CouponUpsertOne) IDX(ctx context.Context) uint64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// CouponCreateBulk is the builder for creating many Coupon entities in bulk.
type CouponCreateBulk struct {
	config
	err      error
	builders []*CouponCreate
	conflict []sql.ConflictOption
}

// Save creates the Coupon entities in the database.
func (_c *CouponCreateBulk) Save(ctx context.Context) ([]*Coupon, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*Coupon, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CouponMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = _c.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *CouponCreateBulk) SaveX(ctx context.Context) []*Coupon {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *CouponCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *CouponCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Coupon.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CouponUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (_c *CouponCreateBulk) OnConflict(opts ...sql.ConflictOption) *CouponUpsertBulk {
	_c.conflict = opts
	return &CouponUpsertBulk{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Coupon.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *CouponCreateBulk) OnConflictColumns(columns ...string) *CouponUpsertBulk {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &CouponUpsertBulk{
		create: _c,
	}
}

// CouponUpsertBulk is the builder for "upsert"-ing
// a bulk of Coupon nodes.
type CouponUpsertBulk struct {
	create *CouponCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Coupon.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(entcoupon.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *CouponUpsertBulk) UpdateNewValues() *CouponUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(entcoupon.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(entcoupon.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Coupon.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *CouponUpsertBulk) Ignore() *CouponUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CouponUpsertBulk) DoNothing() *CouponUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CouponCreateBulk.OnConflict
// documentation for more info.
func (u *CouponUpsertBulk) Update(set func(*CouponUpsert)) *CouponUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CouponUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *CouponUpsertBulk) SetUpdatedAt(v time.Time) *CouponUpsertBulk {
	return u.Update(func(s *CouponUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *CouponUpsertBulk) UpdateUpdatedAt() *CouponUpsertBulk {
	return u.Update(func(s *CouponUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetCode sets the "code" field.
func (u *CouponUpsertBulk) SetCode(v string) *CouponUpsertBulk {
	return u.Update(func(s *CouponUpsert) {
		s.SetCode(v)
	})
}

// UpdateCode sets the "code" field to the value that was provided on create.
func (u *CouponUpsertBulk) UpdateCode() *CouponUpsertBulk {
	return u.Update(func(s *CouponUpsert) {
		s.UpdateCode()
	})
}

// SetValue sets the "value" field.
func (u *CouponUpsertBulk) SetValue(v float64) *CouponUpsertBulk {
	return u.Update(func(s *CouponUpsert) {
		s.SetValue(v)
	})
}

// AddValue adds v to the "value" field.
func (u *CouponUpsertBulk) AddValue(v float64) *CouponUpsertBulk {
	return u.Update(func(s *CouponUpsert) {
		s.AddValue(v)
	})
}

// UpdateValue sets the "value" field to the value that was provided on create.
func (u *CouponUpsertBulk) UpdateValue() *CouponUpsertBulk {
	return u.Update(func(s *CouponUpsert) {
		s.UpdateValue()
	})
}

// SetStoreID sets the "store_id" field.
func (u *CouponUpsertBulk) SetStoreID(v string) *CouponUpsertBulk {
	return u.Update(func(s *CouponUpsert) {
		s.SetStoreID(v)
	})
}

// UpdateStoreID sets the "store_id" field to the value that was provided on create.
func (u *CouponUpsertBulk) UpdateStoreID() *CouponUpsertBulk {
	return u.Update(func(s *CouponUpsert) {
		s.UpdateStoreID()
	})
}

// SetExpireAt sets the "expire_at" field.
func (u *CouponUpsertBulk) SetExpireAt(v time.Time) *CouponUpsertBulk {
	return u.Update(func(s *CouponUpsert) {
		s.SetExpireAt(v)
	})
}

// UpdateExpireAt sets the "expire_at" field to the value that was provided on create.
func (u *CouponUpsertBulk) UpdateExpireAt() *CouponUpsertBulk {
	return u.Update(func(s *CouponUpsert) {
		s.UpdateExpireAt()
	})
}

// ClearExpireAt clears the value of the "expire_at" field.
func (u *CouponUpsertBulk) ClearExpireAt() *CouponUpsertBulk {
	return u.Update(func(s *CouponUpsert) {
		s.ClearExpireAt()
	})
}

// SetCustomerID sets the "customer_id" field.
func (u *CouponUpsertBulk) SetCustomerID(v string) *CouponUpsertBulk {
	return u.Update(func(s *CouponUpsert) {
		s.SetCustomerID(v)
	})
}

// UpdateCustomerID sets the "customer_id" field to the value that was provided on create.
func (u *CouponUpsertBulk) UpdateCustomerID() *CouponUpsertBulk {
	return u.Update(func(s *CouponUpsert) {
		s.UpdateCustomerID()
	})
}

// ClearCustomerID clears the value of the "customer_id" field.
func (u *CouponUpsertBulk) ClearCustomerID() *CouponUpsertBulk {
	return u.Update(func(s *CouponUpsert) {
		s.ClearCustomerID()
	})
}

// SetServiceIds sets the "service_ids" field.
func (u *CouponUpsertBulk) SetServiceIds(v []uint64) *CouponUpsertBulk {
	return u.Update(func(s *CouponUpsert) {
		s.SetServiceIds(v)
	})
}

// UpdateServiceIds sets the "service_ids" field to the value that was provided on create.
func (u *CouponUpsertBulk) UpdateServiceIds() *CouponUpsertBulk {
	return u.Update(func(s *CouponUpsert) {
		s.UpdateServiceIds()
	})
}

// SetType sets the "type" field.
func (u *CouponUpsertBulk) SetType(v coupon.CouponType) *CouponUpsertBulk {
	return u.Update(func(s *CouponUpsert) {
		s.SetType(v)
	})
}

// AddType adds v to the "type" field.
func (u *CouponUpsertBulk) AddType(v coupon.CouponType) *CouponUpsertBulk {
	return u.Update(func(s *CouponUpsert) {
		s.AddType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *CouponUpsertBulk) UpdateType() *CouponUpsertBulk {
	return u.Update(func(s *CouponUpsert) {
		s.UpdateType()
	})
}

// SetCurrencyID sets the "currency_id" field.
func (u *CouponUpsertBulk) SetCurrencyID(v uint64) *CouponUpsertBulk {
	return u.Update(func(s *CouponUpsert) {
		s.SetCurrencyID(v)
	})
}

// UpdateCurrencyID sets the "currency_id" field to the value that was provided on create.
func (u *CouponUpsertBulk) UpdateCurrencyID() *CouponUpsertBulk {
	return u.Update(func(s *CouponUpsert) {
		s.UpdateCurrencyID()
	})
}

// ClearCurrencyID clears the value of the "currency_id" field.
func (u *CouponUpsertBulk) ClearCurrencyID() *CouponUpsertBulk {
	return u.Update(func(s *CouponUpsert) {
		s.ClearCurrencyID()
	})
}

// SetUsageLimit sets the "usage_limit" field.
func (u *CouponUpsertBulk) SetUsageLimit(v int32) *CouponUpsertBulk {
	return u.Update(func(s *CouponUpsert) {
		s.SetUsageLimit(v)
	})
}

// AddUsageLimit adds v to the "usage_limit" field.
func (u *CouponUpsertBulk) AddUsageLimit(v int32) *CouponUpsertBulk {
	return u.Update(func(s *CouponUpsert) {
		s.AddUsageLimit(v)
	})
}

// UpdateUsageLimit sets the "usage_limit" field to the value that was provided on create.
func (u *CouponUpsertBulk) UpdateUsageLimit() *CouponUpsertBulk {
	return u.Update(func(s *CouponUpsert) {
		s.UpdateUsageLimit()
	})
}

// SetUsedCount sets the "used_count" field.
func (u *CouponUpsertBulk) SetUsedCount(v int32) *CouponUpsertBulk {
	return u.Update(func(s *CouponUpsert) {
		s.SetUsedCount(v)
	})
}

// AddUsedCount adds v to the "used_count" field.
func (u *CouponUpsertBulk) AddUsedCount(v int32) *CouponUpsertBulk {
	return u.Update(func(s *CouponUpsert) {
		s.AddUsedCount(v)
	})
}

// UpdateUsedCount sets the "used_count" field to the value that was provided on create.
func (u *CouponUpsertBulk) UpdateUsedCount() *CouponUpsertBulk {
	return u.Update(func(s *CouponUpsert) {
		s.UpdateUsedCount()
	})
}

// SetStatus sets the "status" field.
func (u *CouponUpsertBulk) SetStatus(v coupon.CouponStatus) *CouponUpsertBulk {
	return u.Update(func(s *CouponUpsert) {
		s.SetStatus(v)
	})
}

// AddStatus adds v to the "status" field.
func (u *CouponUpsertBulk) AddStatus(v coupon.CouponStatus) *CouponUpsertBulk {
	return u.Update(func(s *CouponUpsert) {
		s.AddStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *CouponUpsertBulk) UpdateStatus() *CouponUpsertBulk {
	return u.Update(func(s *CouponUpsert) {
		s.UpdateStatus()
	})
}

// SetReservedCount sets the "reserved_count" field.
func (u *CouponUpsertBulk) SetReservedCount(v int32) *CouponUpsertBulk {
	return u.Update(func(s *CouponUpsert) {
		s.SetReservedCount(v)
	})
}

// AddReservedCount adds v to the "reserved_count" field.
func (u *CouponUpsertBulk) AddReservedCount(v int32) *CouponUpsertBulk {
	return u.Update(func(s *CouponUpsert) {
		s.AddReservedCount(v)
	})
}

// UpdateReservedCount sets the "reserved_count" field to the value that was provided on create.
func (u *CouponUpsertBulk) UpdateReservedCount() *CouponUpsertBulk {
	return u.Update(func(s *CouponUpsert) {
		s.UpdateReservedCount()
	})
}

// Exec executes the query.
func (u *CouponUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the CouponCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for CouponCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CouponUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
