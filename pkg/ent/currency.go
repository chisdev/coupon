// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/chisdev/coupon/pkg/ent/currency"
)

// Currency is the model entity for the Currency schema.
type Currency struct {
	config `json:"-"`
	// ID of the ent.
	ID uint64 `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Code holds the value of the "code" field.
	Code string `json:"code,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CurrencyQuery when eager-loading is set.
	Edges        CurrencyEdges `json:"edges"`
	selectValues sql.SelectValues
}

// CurrencyEdges holds the relations/edges for other nodes in the graph.
type CurrencyEdges struct {
	// Coupons holds the value of the coupons edge.
	Coupons []*Coupon `json:"coupons,omitempty"`
	// Reward holds the value of the reward edge.
	Reward []*Reward `json:"reward,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// CouponsOrErr returns the Coupons value or an error if the edge
// was not loaded in eager-loading.
func (e CurrencyEdges) CouponsOrErr() ([]*Coupon, error) {
	if e.loadedTypes[0] {
		return e.Coupons, nil
	}
	return nil, &NotLoadedError{edge: "coupons"}
}

// RewardOrErr returns the Reward value or an error if the edge
// was not loaded in eager-loading.
func (e CurrencyEdges) RewardOrErr() ([]*Reward, error) {
	if e.loadedTypes[1] {
		return e.Reward, nil
	}
	return nil, &NotLoadedError{edge: "reward"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Currency) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case currency.FieldID:
			values[i] = new(sql.NullInt64)
		case currency.FieldName, currency.FieldCode:
			values[i] = new(sql.NullString)
		case currency.FieldCreatedAt, currency.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Currency fields.
func (_m *Currency) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case currency.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			_m.ID = uint64(value.Int64)
		case currency.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				_m.CreatedAt = value.Time
			}
		case currency.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				_m.UpdatedAt = value.Time
			}
		case currency.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				_m.Name = value.String
			}
		case currency.FieldCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field code", values[i])
			} else if value.Valid {
				_m.Code = value.String
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Currency.
// This includes values selected through modifiers, order, etc.
func (_m *Currency) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryCoupons queries the "coupons" edge of the Currency entity.
func (_m *Currency) QueryCoupons() *CouponQuery {
	return NewCurrencyClient(_m.config).QueryCoupons(_m)
}

// QueryReward queries the "reward" edge of the Currency entity.
func (_m *Currency) QueryReward() *RewardQuery {
	return NewCurrencyClient(_m.config).QueryReward(_m)
}

// Update returns a builder for updating this Currency.
// Note that you need to call Currency.Unwrap() before calling this method if this Currency
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *Currency) Update() *CurrencyUpdateOne {
	return NewCurrencyClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the Currency entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *Currency) Unwrap() *Currency {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: Currency is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *Currency) String() string {
	var builder strings.Builder
	builder.WriteString("Currency(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("created_at=")
	builder.WriteString(_m.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(_m.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(_m.Name)
	builder.WriteString(", ")
	builder.WriteString("code=")
	builder.WriteString(_m.Code)
	builder.WriteByte(')')
	return builder.String()
}

// Currencies is a parsable slice of Currency.
type Currencies []*Currency
