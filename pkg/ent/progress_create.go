// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/chisdev/coupon/pkg/ent/milestone"
	"github.com/chisdev/coupon/pkg/ent/progress"
)

// ProgressCreate is the builder for creating a Progress entity.
type ProgressCreate struct {
	config
	mutation *ProgressMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (_c *ProgressCreate) SetCreatedAt(v time.Time) *ProgressCreate {
	_c.mutation.SetCreatedAt(v)
	return _c
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_c *ProgressCreate) SetNillableCreatedAt(v *time.Time) *ProgressCreate {
	if v != nil {
		_c.SetCreatedAt(*v)
	}
	return _c
}

// SetUpdatedAt sets the "updated_at" field.
func (_c *ProgressCreate) SetUpdatedAt(v time.Time) *ProgressCreate {
	_c.mutation.SetUpdatedAt(v)
	return _c
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_c *ProgressCreate) SetNillableUpdatedAt(v *time.Time) *ProgressCreate {
	if v != nil {
		_c.SetUpdatedAt(*v)
	}
	return _c
}

// SetCustomerID sets the "customer_id" field.
func (_c *ProgressCreate) SetCustomerID(v string) *ProgressCreate {
	_c.mutation.SetCustomerID(v)
	return _c
}

// SetMilestoneID sets the "milestone_id" field.
func (_c *ProgressCreate) SetMilestoneID(v uint64) *ProgressCreate {
	_c.mutation.SetMilestoneID(v)
	return _c
}

// SetProgress sets the "progress" field.
func (_c *ProgressCreate) SetProgress(v int32) *ProgressCreate {
	_c.mutation.SetProgress(v)
	return _c
}

// SetNillableProgress sets the "progress" field if the given value is not nil.
func (_c *ProgressCreate) SetNillableProgress(v *int32) *ProgressCreate {
	if v != nil {
		_c.SetProgress(*v)
	}
	return _c
}

// SetPassCount sets the "pass_count" field.
func (_c *ProgressCreate) SetPassCount(v int32) *ProgressCreate {
	_c.mutation.SetPassCount(v)
	return _c
}

// SetNillablePassCount sets the "pass_count" field if the given value is not nil.
func (_c *ProgressCreate) SetNillablePassCount(v *int32) *ProgressCreate {
	if v != nil {
		_c.SetPassCount(*v)
	}
	return _c
}

// SetID sets the "id" field.
func (_c *ProgressCreate) SetID(v uint64) *ProgressCreate {
	_c.mutation.SetID(v)
	return _c
}

// SetMilestone sets the "milestone" edge to the Milestone entity.
func (_c *ProgressCreate) SetMilestone(v *Milestone) *ProgressCreate {
	return _c.SetMilestoneID(v.ID)
}

// Mutation returns the ProgressMutation object of the builder.
func (_c *ProgressCreate) Mutation() *ProgressMutation {
	return _c.mutation
}

// Save creates the Progress in the database.
func (_c *ProgressCreate) Save(ctx context.Context) (*Progress, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *ProgressCreate) SaveX(ctx context.Context) *Progress {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *ProgressCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *ProgressCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *ProgressCreate) defaults() {
	if _, ok := _c.mutation.CreatedAt(); !ok {
		v := progress.DefaultCreatedAt()
		_c.mutation.SetCreatedAt(v)
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		v := progress.DefaultUpdatedAt()
		_c.mutation.SetUpdatedAt(v)
	}
	if _, ok := _c.mutation.Progress(); !ok {
		v := progress.DefaultProgress
		_c.mutation.SetProgress(v)
	}
	if _, ok := _c.mutation.PassCount(); !ok {
		v := progress.DefaultPassCount
		_c.mutation.SetPassCount(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *ProgressCreate) check() error {
	if _, ok := _c.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Progress.created_at"`)}
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Progress.updated_at"`)}
	}
	if _, ok := _c.mutation.CustomerID(); !ok {
		return &ValidationError{Name: "customer_id", err: errors.New(`ent: missing required field "Progress.customer_id"`)}
	}
	if v, ok := _c.mutation.CustomerID(); ok {
		if err := progress.CustomerIDValidator(v); err != nil {
			return &ValidationError{Name: "customer_id", err: fmt.Errorf(`ent: validator failed for field "Progress.customer_id": %w`, err)}
		}
	}
	if _, ok := _c.mutation.MilestoneID(); !ok {
		return &ValidationError{Name: "milestone_id", err: errors.New(`ent: missing required field "Progress.milestone_id"`)}
	}
	if _, ok := _c.mutation.Progress(); !ok {
		return &ValidationError{Name: "progress", err: errors.New(`ent: missing required field "Progress.progress"`)}
	}
	if _, ok := _c.mutation.PassCount(); !ok {
		return &ValidationError{Name: "pass_count", err: errors.New(`ent: missing required field "Progress.pass_count"`)}
	}
	if len(_c.mutation.MilestoneIDs()) == 0 {
		return &ValidationError{Name: "milestone", err: errors.New(`ent: missing required edge "Progress.milestone"`)}
	}
	return nil
}

func (_c *ProgressCreate) sqlSave(ctx context.Context) (*Progress, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint64(id)
	}
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *ProgressCreate) createSpec() (*Progress, *sqlgraph.CreateSpec) {
	var (
		_node = &Progress{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(progress.Table, sqlgraph.NewFieldSpec(progress.FieldID, field.TypeUint64))
	)
	_spec.OnConflict = _c.conflict
	if id, ok := _c.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := _c.mutation.CreatedAt(); ok {
		_spec.SetField(progress.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := _c.mutation.UpdatedAt(); ok {
		_spec.SetField(progress.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := _c.mutation.CustomerID(); ok {
		_spec.SetField(progress.FieldCustomerID, field.TypeString, value)
		_node.CustomerID = value
	}
	if value, ok := _c.mutation.Progress(); ok {
		_spec.SetField(progress.FieldProgress, field.TypeInt32, value)
		_node.Progress = value
	}
	if value, ok := _c.mutation.PassCount(); ok {
		_spec.SetField(progress.FieldPassCount, field.TypeInt32, value)
		_node.PassCount = value
	}
	if nodes := _c.mutation.MilestoneIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   progress.MilestoneTable,
			Columns: []string{progress.MilestoneColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(milestone.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.MilestoneID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Progress.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ProgressUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (_c *ProgressCreate) OnConflict(opts ...sql.ConflictOption) *ProgressUpsertOne {
	_c.conflict = opts
	return &ProgressUpsertOne{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Progress.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *ProgressCreate) OnConflictColumns(columns ...string) *ProgressUpsertOne {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &ProgressUpsertOne{
		create: _c,
	}
}

type (
	// ProgressUpsertOne is the builder for "upsert"-ing
	//  one Progress node.
	ProgressUpsertOne struct {
		create *ProgressCreate
	}

	// ProgressUpsert is the "OnConflict" setter.
	ProgressUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *ProgressUpsert) SetUpdatedAt(v time.Time) *ProgressUpsert {
	u.Set(progress.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ProgressUpsert) UpdateUpdatedAt() *ProgressUpsert {
	u.SetExcluded(progress.FieldUpdatedAt)
	return u
}

// SetCustomerID sets the "customer_id" field.
func (u *ProgressUpsert) SetCustomerID(v string) *ProgressUpsert {
	u.Set(progress.FieldCustomerID, v)
	return u
}

// UpdateCustomerID sets the "customer_id" field to the value that was provided on create.
func (u *ProgressUpsert) UpdateCustomerID() *ProgressUpsert {
	u.SetExcluded(progress.FieldCustomerID)
	return u
}

// SetMilestoneID sets the "milestone_id" field.
func (u *ProgressUpsert) SetMilestoneID(v uint64) *ProgressUpsert {
	u.Set(progress.FieldMilestoneID, v)
	return u
}

// UpdateMilestoneID sets the "milestone_id" field to the value that was provided on create.
func (u *ProgressUpsert) UpdateMilestoneID() *ProgressUpsert {
	u.SetExcluded(progress.FieldMilestoneID)
	return u
}

// SetProgress sets the "progress" field.
func (u *ProgressUpsert) SetProgress(v int32) *ProgressUpsert {
	u.Set(progress.FieldProgress, v)
	return u
}

// UpdateProgress sets the "progress" field to the value that was provided on create.
func (u *ProgressUpsert) UpdateProgress() *ProgressUpsert {
	u.SetExcluded(progress.FieldProgress)
	return u
}

// AddProgress adds v to the "progress" field.
func (u *ProgressUpsert) AddProgress(v int32) *ProgressUpsert {
	u.Add(progress.FieldProgress, v)
	return u
}

// SetPassCount sets the "pass_count" field.
func (u *ProgressUpsert) SetPassCount(v int32) *ProgressUpsert {
	u.Set(progress.FieldPassCount, v)
	return u
}

// UpdatePassCount sets the "pass_count" field to the value that was provided on create.
func (u *ProgressUpsert) UpdatePassCount() *ProgressUpsert {
	u.SetExcluded(progress.FieldPassCount)
	return u
}

// AddPassCount adds v to the "pass_count" field.
func (u *ProgressUpsert) AddPassCount(v int32) *ProgressUpsert {
	u.Add(progress.FieldPassCount, v)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Progress.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(progress.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ProgressUpsertOne) UpdateNewValues() *ProgressUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(progress.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(progress.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Progress.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *ProgressUpsertOne) Ignore() *ProgressUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ProgressUpsertOne) DoNothing() *ProgressUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ProgressCreate.OnConflict
// documentation for more info.
func (u *ProgressUpsertOne) Update(set func(*ProgressUpsert)) *ProgressUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ProgressUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ProgressUpsertOne) SetUpdatedAt(v time.Time) *ProgressUpsertOne {
	return u.Update(func(s *ProgressUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ProgressUpsertOne) UpdateUpdatedAt() *ProgressUpsertOne {
	return u.Update(func(s *ProgressUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetCustomerID sets the "customer_id" field.
func (u *ProgressUpsertOne) SetCustomerID(v string) *ProgressUpsertOne {
	return u.Update(func(s *ProgressUpsert) {
		s.SetCustomerID(v)
	})
}

// UpdateCustomerID sets the "customer_id" field to the value that was provided on create.
func (u *ProgressUpsertOne) UpdateCustomerID() *ProgressUpsertOne {
	return u.Update(func(s *ProgressUpsert) {
		s.UpdateCustomerID()
	})
}

// SetMilestoneID sets the "milestone_id" field.
func (u *ProgressUpsertOne) SetMilestoneID(v uint64) *ProgressUpsertOne {
	return u.Update(func(s *ProgressUpsert) {
		s.SetMilestoneID(v)
	})
}

// UpdateMilestoneID sets the "milestone_id" field to the value that was provided on create.
func (u *ProgressUpsertOne) UpdateMilestoneID() *ProgressUpsertOne {
	return u.Update(func(s *ProgressUpsert) {
		s.UpdateMilestoneID()
	})
}

// SetProgress sets the "progress" field.
func (u *ProgressUpsertOne) SetProgress(v int32) *ProgressUpsertOne {
	return u.Update(func(s *ProgressUpsert) {
		s.SetProgress(v)
	})
}

// AddProgress adds v to the "progress" field.
func (u *ProgressUpsertOne) AddProgress(v int32) *ProgressUpsertOne {
	return u.Update(func(s *ProgressUpsert) {
		s.AddProgress(v)
	})
}

// UpdateProgress sets the "progress" field to the value that was provided on create.
func (u *ProgressUpsertOne) UpdateProgress() *ProgressUpsertOne {
	return u.Update(func(s *ProgressUpsert) {
		s.UpdateProgress()
	})
}

// SetPassCount sets the "pass_count" field.
func (u *ProgressUpsertOne) SetPassCount(v int32) *ProgressUpsertOne {
	return u.Update(func(s *ProgressUpsert) {
		s.SetPassCount(v)
	})
}

// AddPassCount adds v to the "pass_count" field.
func (u *ProgressUpsertOne) AddPassCount(v int32) *ProgressUpsertOne {
	return u.Update(func(s *ProgressUpsert) {
		s.AddPassCount(v)
	})
}

// UpdatePassCount sets the "pass_count" field to the value that was provided on create.
func (u *ProgressUpsertOne) UpdatePassCount() *ProgressUpsertOne {
	return u.Update(func(s *ProgressUpsert) {
		s.UpdatePassCount()
	})
}

// Exec executes the query.
func (u *ProgressUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ProgressCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ProgressUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ProgressUpsertOne) ID(ctx context.Context) (id uint64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ProgressUpsertOne) IDX(ctx context.Context) uint64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ProgressCreateBulk is the builder for creating many Progress entities in bulk.
type ProgressCreateBulk struct {
	config
	err      error
	builders []*ProgressCreate
	conflict []sql.ConflictOption
}

// Save creates the Progress entities in the database.
func (_c *ProgressCreateBulk) Save(ctx context.Context) ([]*Progress, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*Progress, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ProgressMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = _c.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *ProgressCreateBulk) SaveX(ctx context.Context) []*Progress {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *ProgressCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *ProgressCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Progress.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ProgressUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (_c *ProgressCreateBulk) OnConflict(opts ...sql.ConflictOption) *ProgressUpsertBulk {
	_c.conflict = opts
	return &ProgressUpsertBulk{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Progress.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *ProgressCreateBulk) OnConflictColumns(columns ...string) *ProgressUpsertBulk {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &ProgressUpsertBulk{
		create: _c,
	}
}

// ProgressUpsertBulk is the builder for "upsert"-ing
// a bulk of Progress nodes.
type ProgressUpsertBulk struct {
	create *ProgressCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Progress.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(progress.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ProgressUpsertBulk) UpdateNewValues() *ProgressUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(progress.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(progress.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Progress.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *ProgressUpsertBulk) Ignore() *ProgressUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ProgressUpsertBulk) DoNothing() *ProgressUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ProgressCreateBulk.OnConflict
// documentation for more info.
func (u *ProgressUpsertBulk) Update(set func(*ProgressUpsert)) *ProgressUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ProgressUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ProgressUpsertBulk) SetUpdatedAt(v time.Time) *ProgressUpsertBulk {
	return u.Update(func(s *ProgressUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ProgressUpsertBulk) UpdateUpdatedAt() *ProgressUpsertBulk {
	return u.Update(func(s *ProgressUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetCustomerID sets the "customer_id" field.
func (u *ProgressUpsertBulk) SetCustomerID(v string) *ProgressUpsertBulk {
	return u.Update(func(s *ProgressUpsert) {
		s.SetCustomerID(v)
	})
}

// UpdateCustomerID sets the "customer_id" field to the value that was provided on create.
func (u *ProgressUpsertBulk) UpdateCustomerID() *ProgressUpsertBulk {
	return u.Update(func(s *ProgressUpsert) {
		s.UpdateCustomerID()
	})
}

// SetMilestoneID sets the "milestone_id" field.
func (u *ProgressUpsertBulk) SetMilestoneID(v uint64) *ProgressUpsertBulk {
	return u.Update(func(s *ProgressUpsert) {
		s.SetMilestoneID(v)
	})
}

// UpdateMilestoneID sets the "milestone_id" field to the value that was provided on create.
func (u *ProgressUpsertBulk) UpdateMilestoneID() *ProgressUpsertBulk {
	return u.Update(func(s *ProgressUpsert) {
		s.UpdateMilestoneID()
	})
}

// SetProgress sets the "progress" field.
func (u *ProgressUpsertBulk) SetProgress(v int32) *ProgressUpsertBulk {
	return u.Update(func(s *ProgressUpsert) {
		s.SetProgress(v)
	})
}

// AddProgress adds v to the "progress" field.
func (u *ProgressUpsertBulk) AddProgress(v int32) *ProgressUpsertBulk {
	return u.Update(func(s *ProgressUpsert) {
		s.AddProgress(v)
	})
}

// UpdateProgress sets the "progress" field to the value that was provided on create.
func (u *ProgressUpsertBulk) UpdateProgress() *ProgressUpsertBulk {
	return u.Update(func(s *ProgressUpsert) {
		s.UpdateProgress()
	})
}

// SetPassCount sets the "pass_count" field.
func (u *ProgressUpsertBulk) SetPassCount(v int32) *ProgressUpsertBulk {
	return u.Update(func(s *ProgressUpsert) {
		s.SetPassCount(v)
	})
}

// AddPassCount adds v to the "pass_count" field.
func (u *ProgressUpsertBulk) AddPassCount(v int32) *ProgressUpsertBulk {
	return u.Update(func(s *ProgressUpsert) {
		s.AddPassCount(v)
	})
}

// UpdatePassCount sets the "pass_count" field to the value that was provided on create.
func (u *ProgressUpsertBulk) UpdatePassCount() *ProgressUpsertBulk {
	return u.Update(func(s *ProgressUpsert) {
		s.UpdatePassCount()
	})
}

// Exec executes the query.
func (u *ProgressUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the ProgressCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ProgressCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ProgressUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
