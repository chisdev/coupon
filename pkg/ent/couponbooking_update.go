// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	coupon "github.com/chisdev/coupon/api"
	entcoupon "github.com/chisdev/coupon/pkg/ent/coupon"
	"github.com/chisdev/coupon/pkg/ent/couponbooking"
	"github.com/chisdev/coupon/pkg/ent/predicate"
)

// CouponBookingUpdate is the builder for updating CouponBooking entities.
type CouponBookingUpdate struct {
	config
	hooks     []Hook
	mutation  *CouponBookingMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the CouponBookingUpdate builder.
func (_u *CouponBookingUpdate) Where(ps ...predicate.CouponBooking) *CouponBookingUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *CouponBookingUpdate) SetUpdatedAt(v time.Time) *CouponBookingUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetCouponID sets the "coupon_id" field.
func (_u *CouponBookingUpdate) SetCouponID(v uint64) *CouponBookingUpdate {
	_u.mutation.SetCouponID(v)
	return _u
}

// SetNillableCouponID sets the "coupon_id" field if the given value is not nil.
func (_u *CouponBookingUpdate) SetNillableCouponID(v *uint64) *CouponBookingUpdate {
	if v != nil {
		_u.SetCouponID(*v)
	}
	return _u
}

// SetBookingID sets the "booking_id" field.
func (_u *CouponBookingUpdate) SetBookingID(v string) *CouponBookingUpdate {
	_u.mutation.SetBookingID(v)
	return _u
}

// SetNillableBookingID sets the "booking_id" field if the given value is not nil.
func (_u *CouponBookingUpdate) SetNillableBookingID(v *string) *CouponBookingUpdate {
	if v != nil {
		_u.SetBookingID(*v)
	}
	return _u
}

// SetStatus sets the "status" field.
func (_u *CouponBookingUpdate) SetStatus(v coupon.CouponUsedStatus) *CouponBookingUpdate {
	_u.mutation.ResetStatus()
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *CouponBookingUpdate) SetNillableStatus(v *coupon.CouponUsedStatus) *CouponBookingUpdate {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// AddStatus adds value to the "status" field.
func (_u *CouponBookingUpdate) AddStatus(v coupon.CouponUsedStatus) *CouponBookingUpdate {
	_u.mutation.AddStatus(v)
	return _u
}

// SetServiceIds sets the "service_ids" field.
func (_u *CouponBookingUpdate) SetServiceIds(v []string) *CouponBookingUpdate {
	_u.mutation.SetServiceIds(v)
	return _u
}

// AppendServiceIds appends value to the "service_ids" field.
func (_u *CouponBookingUpdate) AppendServiceIds(v []string) *CouponBookingUpdate {
	_u.mutation.AppendServiceIds(v)
	return _u
}

// SetCustomerID sets the "customer_id" field.
func (_u *CouponBookingUpdate) SetCustomerID(v string) *CouponBookingUpdate {
	_u.mutation.SetCustomerID(v)
	return _u
}

// SetNillableCustomerID sets the "customer_id" field if the given value is not nil.
func (_u *CouponBookingUpdate) SetNillableCustomerID(v *string) *CouponBookingUpdate {
	if v != nil {
		_u.SetCustomerID(*v)
	}
	return _u
}

// ClearCustomerID clears the value of the "customer_id" field.
func (_u *CouponBookingUpdate) ClearCustomerID() *CouponBookingUpdate {
	_u.mutation.ClearCustomerID()
	return _u
}

// SetCoupon sets the "coupon" edge to the Coupon entity.
func (_u *CouponBookingUpdate) SetCoupon(v *Coupon) *CouponBookingUpdate {
	return _u.SetCouponID(v.ID)
}

// Mutation returns the CouponBookingMutation object of the builder.
func (_u *CouponBookingUpdate) Mutation() *CouponBookingMutation {
	return _u.mutation
}

// ClearCoupon clears the "coupon" edge to the Coupon entity.
func (_u *CouponBookingUpdate) ClearCoupon() *CouponBookingUpdate {
	_u.mutation.ClearCoupon()
	return _u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *CouponBookingUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *CouponBookingUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *CouponBookingUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *CouponBookingUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *CouponBookingUpdate) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := couponbooking.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *CouponBookingUpdate) check() error {
	if _u.mutation.CouponCleared() && len(_u.mutation.CouponIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "CouponBooking.coupon"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *CouponBookingUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *CouponBookingUpdate {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *CouponBookingUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(couponbooking.Table, couponbooking.Columns, sqlgraph.NewFieldSpec(couponbooking.FieldID, field.TypeUint64))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(couponbooking.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.BookingID(); ok {
		_spec.SetField(couponbooking.FieldBookingID, field.TypeString, value)
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(couponbooking.FieldStatus, field.TypeInt32, value)
	}
	if value, ok := _u.mutation.AddedStatus(); ok {
		_spec.AddField(couponbooking.FieldStatus, field.TypeInt32, value)
	}
	if value, ok := _u.mutation.ServiceIds(); ok {
		_spec.SetField(couponbooking.FieldServiceIds, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedServiceIds(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, couponbooking.FieldServiceIds, value)
		})
	}
	if value, ok := _u.mutation.CustomerID(); ok {
		_spec.SetField(couponbooking.FieldCustomerID, field.TypeString, value)
	}
	if _u.mutation.CustomerIDCleared() {
		_spec.ClearField(couponbooking.FieldCustomerID, field.TypeString)
	}
	if _u.mutation.CouponCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   couponbooking.CouponTable,
			Columns: []string{couponbooking.CouponColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entcoupon.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.CouponIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   couponbooking.CouponTable,
			Columns: []string{couponbooking.CouponColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entcoupon.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(_u.modifiers...)
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{couponbooking.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// CouponBookingUpdateOne is the builder for updating a single CouponBooking entity.
type CouponBookingUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *CouponBookingMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *CouponBookingUpdateOne) SetUpdatedAt(v time.Time) *CouponBookingUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetCouponID sets the "coupon_id" field.
func (_u *CouponBookingUpdateOne) SetCouponID(v uint64) *CouponBookingUpdateOne {
	_u.mutation.SetCouponID(v)
	return _u
}

// SetNillableCouponID sets the "coupon_id" field if the given value is not nil.
func (_u *CouponBookingUpdateOne) SetNillableCouponID(v *uint64) *CouponBookingUpdateOne {
	if v != nil {
		_u.SetCouponID(*v)
	}
	return _u
}

// SetBookingID sets the "booking_id" field.
func (_u *CouponBookingUpdateOne) SetBookingID(v string) *CouponBookingUpdateOne {
	_u.mutation.SetBookingID(v)
	return _u
}

// SetNillableBookingID sets the "booking_id" field if the given value is not nil.
func (_u *CouponBookingUpdateOne) SetNillableBookingID(v *string) *CouponBookingUpdateOne {
	if v != nil {
		_u.SetBookingID(*v)
	}
	return _u
}

// SetStatus sets the "status" field.
func (_u *CouponBookingUpdateOne) SetStatus(v coupon.CouponUsedStatus) *CouponBookingUpdateOne {
	_u.mutation.ResetStatus()
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *CouponBookingUpdateOne) SetNillableStatus(v *coupon.CouponUsedStatus) *CouponBookingUpdateOne {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// AddStatus adds value to the "status" field.
func (_u *CouponBookingUpdateOne) AddStatus(v coupon.CouponUsedStatus) *CouponBookingUpdateOne {
	_u.mutation.AddStatus(v)
	return _u
}

// SetServiceIds sets the "service_ids" field.
func (_u *CouponBookingUpdateOne) SetServiceIds(v []string) *CouponBookingUpdateOne {
	_u.mutation.SetServiceIds(v)
	return _u
}

// AppendServiceIds appends value to the "service_ids" field.
func (_u *CouponBookingUpdateOne) AppendServiceIds(v []string) *CouponBookingUpdateOne {
	_u.mutation.AppendServiceIds(v)
	return _u
}

// SetCustomerID sets the "customer_id" field.
func (_u *CouponBookingUpdateOne) SetCustomerID(v string) *CouponBookingUpdateOne {
	_u.mutation.SetCustomerID(v)
	return _u
}

// SetNillableCustomerID sets the "customer_id" field if the given value is not nil.
func (_u *CouponBookingUpdateOne) SetNillableCustomerID(v *string) *CouponBookingUpdateOne {
	if v != nil {
		_u.SetCustomerID(*v)
	}
	return _u
}

// ClearCustomerID clears the value of the "customer_id" field.
func (_u *CouponBookingUpdateOne) ClearCustomerID() *CouponBookingUpdateOne {
	_u.mutation.ClearCustomerID()
	return _u
}

// SetCoupon sets the "coupon" edge to the Coupon entity.
func (_u *CouponBookingUpdateOne) SetCoupon(v *Coupon) *CouponBookingUpdateOne {
	return _u.SetCouponID(v.ID)
}

// Mutation returns the CouponBookingMutation object of the builder.
func (_u *CouponBookingUpdateOne) Mutation() *CouponBookingMutation {
	return _u.mutation
}

// ClearCoupon clears the "coupon" edge to the Coupon entity.
func (_u *CouponBookingUpdateOne) ClearCoupon() *CouponBookingUpdateOne {
	_u.mutation.ClearCoupon()
	return _u
}

// Where appends a list predicates to the CouponBookingUpdate builder.
func (_u *CouponBookingUpdateOne) Where(ps ...predicate.CouponBooking) *CouponBookingUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *CouponBookingUpdateOne) Select(field string, fields ...string) *CouponBookingUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated CouponBooking entity.
func (_u *CouponBookingUpdateOne) Save(ctx context.Context) (*CouponBooking, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *CouponBookingUpdateOne) SaveX(ctx context.Context) *CouponBooking {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *CouponBookingUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *CouponBookingUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *CouponBookingUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := couponbooking.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *CouponBookingUpdateOne) check() error {
	if _u.mutation.CouponCleared() && len(_u.mutation.CouponIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "CouponBooking.coupon"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *CouponBookingUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *CouponBookingUpdateOne {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *CouponBookingUpdateOne) sqlSave(ctx context.Context) (_node *CouponBooking, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(couponbooking.Table, couponbooking.Columns, sqlgraph.NewFieldSpec(couponbooking.FieldID, field.TypeUint64))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "CouponBooking.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, couponbooking.FieldID)
		for _, f := range fields {
			if !couponbooking.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != couponbooking.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(couponbooking.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.BookingID(); ok {
		_spec.SetField(couponbooking.FieldBookingID, field.TypeString, value)
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(couponbooking.FieldStatus, field.TypeInt32, value)
	}
	if value, ok := _u.mutation.AddedStatus(); ok {
		_spec.AddField(couponbooking.FieldStatus, field.TypeInt32, value)
	}
	if value, ok := _u.mutation.ServiceIds(); ok {
		_spec.SetField(couponbooking.FieldServiceIds, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedServiceIds(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, couponbooking.FieldServiceIds, value)
		})
	}
	if value, ok := _u.mutation.CustomerID(); ok {
		_spec.SetField(couponbooking.FieldCustomerID, field.TypeString, value)
	}
	if _u.mutation.CustomerIDCleared() {
		_spec.ClearField(couponbooking.FieldCustomerID, field.TypeString)
	}
	if _u.mutation.CouponCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   couponbooking.CouponTable,
			Columns: []string{couponbooking.CouponColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entcoupon.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.CouponIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   couponbooking.CouponTable,
			Columns: []string{couponbooking.CouponColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entcoupon.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(_u.modifiers...)
	_node = &CouponBooking{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{couponbooking.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
