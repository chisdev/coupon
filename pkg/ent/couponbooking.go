// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	coupon "github.com/chisdev/coupon/api"
	entcoupon "github.com/chisdev/coupon/pkg/ent/coupon"
	"github.com/chisdev/coupon/pkg/ent/couponbooking"
)

// CouponBooking is the model entity for the CouponBooking schema.
type CouponBooking struct {
	config `json:"-"`
	// ID of the ent.
	ID uint64 `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// CouponID holds the value of the "coupon_id" field.
	CouponID uint64 `json:"coupon_id,omitempty"`
	// BookingID holds the value of the "booking_id" field.
	BookingID uint64 `json:"booking_id,omitempty"`
	// Status holds the value of the "status" field.
	Status coupon.CouponUsedStatus `json:"status,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CouponBookingQuery when eager-loading is set.
	Edges        CouponBookingEdges `json:"edges"`
	selectValues sql.SelectValues
}

// CouponBookingEdges holds the relations/edges for other nodes in the graph.
type CouponBookingEdges struct {
	// Coupon holds the value of the coupon edge.
	Coupon *Coupon `json:"coupon,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// CouponOrErr returns the Coupon value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CouponBookingEdges) CouponOrErr() (*Coupon, error) {
	if e.Coupon != nil {
		return e.Coupon, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: entcoupon.Label}
	}
	return nil, &NotLoadedError{edge: "coupon"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CouponBooking) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case couponbooking.FieldID, couponbooking.FieldCouponID, couponbooking.FieldBookingID, couponbooking.FieldStatus:
			values[i] = new(sql.NullInt64)
		case couponbooking.FieldCreatedAt, couponbooking.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CouponBooking fields.
func (_m *CouponBooking) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case couponbooking.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			_m.ID = uint64(value.Int64)
		case couponbooking.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				_m.CreatedAt = value.Time
			}
		case couponbooking.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				_m.UpdatedAt = value.Time
			}
		case couponbooking.FieldCouponID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field coupon_id", values[i])
			} else if value.Valid {
				_m.CouponID = uint64(value.Int64)
			}
		case couponbooking.FieldBookingID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field booking_id", values[i])
			} else if value.Valid {
				_m.BookingID = uint64(value.Int64)
			}
		case couponbooking.FieldStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				_m.Status = coupon.CouponUsedStatus(value.Int64)
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the CouponBooking.
// This includes values selected through modifiers, order, etc.
func (_m *CouponBooking) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryCoupon queries the "coupon" edge of the CouponBooking entity.
func (_m *CouponBooking) QueryCoupon() *CouponQuery {
	return NewCouponBookingClient(_m.config).QueryCoupon(_m)
}

// Update returns a builder for updating this CouponBooking.
// Note that you need to call CouponBooking.Unwrap() before calling this method if this CouponBooking
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *CouponBooking) Update() *CouponBookingUpdateOne {
	return NewCouponBookingClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the CouponBooking entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *CouponBooking) Unwrap() *CouponBooking {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: CouponBooking is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *CouponBooking) String() string {
	var builder strings.Builder
	builder.WriteString("CouponBooking(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("created_at=")
	builder.WriteString(_m.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(_m.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("coupon_id=")
	builder.WriteString(fmt.Sprintf("%v", _m.CouponID))
	builder.WriteString(", ")
	builder.WriteString("booking_id=")
	builder.WriteString(fmt.Sprintf("%v", _m.BookingID))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", _m.Status))
	builder.WriteByte(')')
	return builder.String()
}

// CouponBookings is a parsable slice of CouponBooking.
type CouponBookings []*CouponBooking
