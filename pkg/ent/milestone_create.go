// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	coupon "github.com/chisdev/coupon/api"
	"github.com/chisdev/coupon/pkg/ent/milestone"
	"github.com/chisdev/coupon/pkg/ent/progress"
	"github.com/chisdev/coupon/pkg/ent/reward"
)

// MilestoneCreate is the builder for creating a Milestone entity.
type MilestoneCreate struct {
	config
	mutation *MilestoneMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (_c *MilestoneCreate) SetCreatedAt(v time.Time) *MilestoneCreate {
	_c.mutation.SetCreatedAt(v)
	return _c
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_c *MilestoneCreate) SetNillableCreatedAt(v *time.Time) *MilestoneCreate {
	if v != nil {
		_c.SetCreatedAt(*v)
	}
	return _c
}

// SetUpdatedAt sets the "updated_at" field.
func (_c *MilestoneCreate) SetUpdatedAt(v time.Time) *MilestoneCreate {
	_c.mutation.SetUpdatedAt(v)
	return _c
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_c *MilestoneCreate) SetNillableUpdatedAt(v *time.Time) *MilestoneCreate {
	if v != nil {
		_c.SetUpdatedAt(*v)
	}
	return _c
}

// SetName sets the "name" field.
func (_c *MilestoneCreate) SetName(v string) *MilestoneCreate {
	_c.mutation.SetName(v)
	return _c
}

// SetStoreID sets the "store_id" field.
func (_c *MilestoneCreate) SetStoreID(v string) *MilestoneCreate {
	_c.mutation.SetStoreID(v)
	return _c
}

// SetMilestoneType sets the "milestone_type" field.
func (_c *MilestoneCreate) SetMilestoneType(v coupon.MilestoneType) *MilestoneCreate {
	_c.mutation.SetMilestoneType(v)
	return _c
}

// SetThreshold sets the "threshold" field.
func (_c *MilestoneCreate) SetThreshold(v int32) *MilestoneCreate {
	_c.mutation.SetThreshold(v)
	return _c
}

// SetNillableThreshold sets the "threshold" field if the given value is not nil.
func (_c *MilestoneCreate) SetNillableThreshold(v *int32) *MilestoneCreate {
	if v != nil {
		_c.SetThreshold(*v)
	}
	return _c
}

// SetStep sets the "step" field.
func (_c *MilestoneCreate) SetStep(v int32) *MilestoneCreate {
	_c.mutation.SetStep(v)
	return _c
}

// SetNillableStep sets the "step" field if the given value is not nil.
func (_c *MilestoneCreate) SetNillableStep(v *int32) *MilestoneCreate {
	if v != nil {
		_c.SetStep(*v)
	}
	return _c
}

// SetID sets the "id" field.
func (_c *MilestoneCreate) SetID(v uint64) *MilestoneCreate {
	_c.mutation.SetID(v)
	return _c
}

// AddRewardIDs adds the "reward" edge to the Reward entity by IDs.
func (_c *MilestoneCreate) AddRewardIDs(ids ...uint64) *MilestoneCreate {
	_c.mutation.AddRewardIDs(ids...)
	return _c
}

// AddReward adds the "reward" edges to the Reward entity.
func (_c *MilestoneCreate) AddReward(v ...*Reward) *MilestoneCreate {
	ids := make([]uint64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddRewardIDs(ids...)
}

// AddProgresIDs adds the "progress" edge to the Progress entity by IDs.
func (_c *MilestoneCreate) AddProgresIDs(ids ...uint64) *MilestoneCreate {
	_c.mutation.AddProgresIDs(ids...)
	return _c
}

// AddProgress adds the "progress" edges to the Progress entity.
func (_c *MilestoneCreate) AddProgress(v ...*Progress) *MilestoneCreate {
	ids := make([]uint64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddProgresIDs(ids...)
}

// Mutation returns the MilestoneMutation object of the builder.
func (_c *MilestoneCreate) Mutation() *MilestoneMutation {
	return _c.mutation
}

// Save creates the Milestone in the database.
func (_c *MilestoneCreate) Save(ctx context.Context) (*Milestone, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *MilestoneCreate) SaveX(ctx context.Context) *Milestone {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *MilestoneCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *MilestoneCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *MilestoneCreate) defaults() {
	if _, ok := _c.mutation.CreatedAt(); !ok {
		v := milestone.DefaultCreatedAt()
		_c.mutation.SetCreatedAt(v)
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		v := milestone.DefaultUpdatedAt()
		_c.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *MilestoneCreate) check() error {
	if _, ok := _c.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Milestone.created_at"`)}
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Milestone.updated_at"`)}
	}
	if _, ok := _c.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Milestone.name"`)}
	}
	if v, ok := _c.mutation.Name(); ok {
		if err := milestone.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Milestone.name": %w`, err)}
		}
	}
	if _, ok := _c.mutation.StoreID(); !ok {
		return &ValidationError{Name: "store_id", err: errors.New(`ent: missing required field "Milestone.store_id"`)}
	}
	if v, ok := _c.mutation.StoreID(); ok {
		if err := milestone.StoreIDValidator(v); err != nil {
			return &ValidationError{Name: "store_id", err: fmt.Errorf(`ent: validator failed for field "Milestone.store_id": %w`, err)}
		}
	}
	if _, ok := _c.mutation.MilestoneType(); !ok {
		return &ValidationError{Name: "milestone_type", err: errors.New(`ent: missing required field "Milestone.milestone_type"`)}
	}
	return nil
}

func (_c *MilestoneCreate) sqlSave(ctx context.Context) (*Milestone, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint64(id)
	}
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *MilestoneCreate) createSpec() (*Milestone, *sqlgraph.CreateSpec) {
	var (
		_node = &Milestone{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(milestone.Table, sqlgraph.NewFieldSpec(milestone.FieldID, field.TypeUint64))
	)
	_spec.OnConflict = _c.conflict
	if id, ok := _c.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := _c.mutation.CreatedAt(); ok {
		_spec.SetField(milestone.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := _c.mutation.UpdatedAt(); ok {
		_spec.SetField(milestone.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := _c.mutation.Name(); ok {
		_spec.SetField(milestone.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := _c.mutation.StoreID(); ok {
		_spec.SetField(milestone.FieldStoreID, field.TypeString, value)
		_node.StoreID = value
	}
	if value, ok := _c.mutation.MilestoneType(); ok {
		_spec.SetField(milestone.FieldMilestoneType, field.TypeInt32, value)
		_node.MilestoneType = value
	}
	if value, ok := _c.mutation.Threshold(); ok {
		_spec.SetField(milestone.FieldThreshold, field.TypeInt32, value)
		_node.Threshold = &value
	}
	if value, ok := _c.mutation.Step(); ok {
		_spec.SetField(milestone.FieldStep, field.TypeInt32, value)
		_node.Step = &value
	}
	if nodes := _c.mutation.RewardIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   milestone.RewardTable,
			Columns: []string{milestone.RewardColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(reward.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.ProgressIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   milestone.ProgressTable,
			Columns: []string{milestone.ProgressColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(progress.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Milestone.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.MilestoneUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (_c *MilestoneCreate) OnConflict(opts ...sql.ConflictOption) *MilestoneUpsertOne {
	_c.conflict = opts
	return &MilestoneUpsertOne{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Milestone.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *MilestoneCreate) OnConflictColumns(columns ...string) *MilestoneUpsertOne {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &MilestoneUpsertOne{
		create: _c,
	}
}

type (
	// MilestoneUpsertOne is the builder for "upsert"-ing
	//  one Milestone node.
	MilestoneUpsertOne struct {
		create *MilestoneCreate
	}

	// MilestoneUpsert is the "OnConflict" setter.
	MilestoneUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *MilestoneUpsert) SetUpdatedAt(v time.Time) *MilestoneUpsert {
	u.Set(milestone.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *MilestoneUpsert) UpdateUpdatedAt() *MilestoneUpsert {
	u.SetExcluded(milestone.FieldUpdatedAt)
	return u
}

// SetName sets the "name" field.
func (u *MilestoneUpsert) SetName(v string) *MilestoneUpsert {
	u.Set(milestone.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *MilestoneUpsert) UpdateName() *MilestoneUpsert {
	u.SetExcluded(milestone.FieldName)
	return u
}

// SetStoreID sets the "store_id" field.
func (u *MilestoneUpsert) SetStoreID(v string) *MilestoneUpsert {
	u.Set(milestone.FieldStoreID, v)
	return u
}

// UpdateStoreID sets the "store_id" field to the value that was provided on create.
func (u *MilestoneUpsert) UpdateStoreID() *MilestoneUpsert {
	u.SetExcluded(milestone.FieldStoreID)
	return u
}

// SetMilestoneType sets the "milestone_type" field.
func (u *MilestoneUpsert) SetMilestoneType(v coupon.MilestoneType) *MilestoneUpsert {
	u.Set(milestone.FieldMilestoneType, v)
	return u
}

// UpdateMilestoneType sets the "milestone_type" field to the value that was provided on create.
func (u *MilestoneUpsert) UpdateMilestoneType() *MilestoneUpsert {
	u.SetExcluded(milestone.FieldMilestoneType)
	return u
}

// AddMilestoneType adds v to the "milestone_type" field.
func (u *MilestoneUpsert) AddMilestoneType(v coupon.MilestoneType) *MilestoneUpsert {
	u.Add(milestone.FieldMilestoneType, v)
	return u
}

// SetThreshold sets the "threshold" field.
func (u *MilestoneUpsert) SetThreshold(v int32) *MilestoneUpsert {
	u.Set(milestone.FieldThreshold, v)
	return u
}

// UpdateThreshold sets the "threshold" field to the value that was provided on create.
func (u *MilestoneUpsert) UpdateThreshold() *MilestoneUpsert {
	u.SetExcluded(milestone.FieldThreshold)
	return u
}

// AddThreshold adds v to the "threshold" field.
func (u *MilestoneUpsert) AddThreshold(v int32) *MilestoneUpsert {
	u.Add(milestone.FieldThreshold, v)
	return u
}

// ClearThreshold clears the value of the "threshold" field.
func (u *MilestoneUpsert) ClearThreshold() *MilestoneUpsert {
	u.SetNull(milestone.FieldThreshold)
	return u
}

// SetStep sets the "step" field.
func (u *MilestoneUpsert) SetStep(v int32) *MilestoneUpsert {
	u.Set(milestone.FieldStep, v)
	return u
}

// UpdateStep sets the "step" field to the value that was provided on create.
func (u *MilestoneUpsert) UpdateStep() *MilestoneUpsert {
	u.SetExcluded(milestone.FieldStep)
	return u
}

// AddStep adds v to the "step" field.
func (u *MilestoneUpsert) AddStep(v int32) *MilestoneUpsert {
	u.Add(milestone.FieldStep, v)
	return u
}

// ClearStep clears the value of the "step" field.
func (u *MilestoneUpsert) ClearStep() *MilestoneUpsert {
	u.SetNull(milestone.FieldStep)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Milestone.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(milestone.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *MilestoneUpsertOne) UpdateNewValues() *MilestoneUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(milestone.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(milestone.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Milestone.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *MilestoneUpsertOne) Ignore() *MilestoneUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *MilestoneUpsertOne) DoNothing() *MilestoneUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the MilestoneCreate.OnConflict
// documentation for more info.
func (u *MilestoneUpsertOne) Update(set func(*MilestoneUpsert)) *MilestoneUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&MilestoneUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *MilestoneUpsertOne) SetUpdatedAt(v time.Time) *MilestoneUpsertOne {
	return u.Update(func(s *MilestoneUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *MilestoneUpsertOne) UpdateUpdatedAt() *MilestoneUpsertOne {
	return u.Update(func(s *MilestoneUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetName sets the "name" field.
func (u *MilestoneUpsertOne) SetName(v string) *MilestoneUpsertOne {
	return u.Update(func(s *MilestoneUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *MilestoneUpsertOne) UpdateName() *MilestoneUpsertOne {
	return u.Update(func(s *MilestoneUpsert) {
		s.UpdateName()
	})
}

// SetStoreID sets the "store_id" field.
func (u *MilestoneUpsertOne) SetStoreID(v string) *MilestoneUpsertOne {
	return u.Update(func(s *MilestoneUpsert) {
		s.SetStoreID(v)
	})
}

// UpdateStoreID sets the "store_id" field to the value that was provided on create.
func (u *MilestoneUpsertOne) UpdateStoreID() *MilestoneUpsertOne {
	return u.Update(func(s *MilestoneUpsert) {
		s.UpdateStoreID()
	})
}

// SetMilestoneType sets the "milestone_type" field.
func (u *MilestoneUpsertOne) SetMilestoneType(v coupon.MilestoneType) *MilestoneUpsertOne {
	return u.Update(func(s *MilestoneUpsert) {
		s.SetMilestoneType(v)
	})
}

// AddMilestoneType adds v to the "milestone_type" field.
func (u *MilestoneUpsertOne) AddMilestoneType(v coupon.MilestoneType) *MilestoneUpsertOne {
	return u.Update(func(s *MilestoneUpsert) {
		s.AddMilestoneType(v)
	})
}

// UpdateMilestoneType sets the "milestone_type" field to the value that was provided on create.
func (u *MilestoneUpsertOne) UpdateMilestoneType() *MilestoneUpsertOne {
	return u.Update(func(s *MilestoneUpsert) {
		s.UpdateMilestoneType()
	})
}

// SetThreshold sets the "threshold" field.
func (u *MilestoneUpsertOne) SetThreshold(v int32) *MilestoneUpsertOne {
	return u.Update(func(s *MilestoneUpsert) {
		s.SetThreshold(v)
	})
}

// AddThreshold adds v to the "threshold" field.
func (u *MilestoneUpsertOne) AddThreshold(v int32) *MilestoneUpsertOne {
	return u.Update(func(s *MilestoneUpsert) {
		s.AddThreshold(v)
	})
}

// UpdateThreshold sets the "threshold" field to the value that was provided on create.
func (u *MilestoneUpsertOne) UpdateThreshold() *MilestoneUpsertOne {
	return u.Update(func(s *MilestoneUpsert) {
		s.UpdateThreshold()
	})
}

// ClearThreshold clears the value of the "threshold" field.
func (u *MilestoneUpsertOne) ClearThreshold() *MilestoneUpsertOne {
	return u.Update(func(s *MilestoneUpsert) {
		s.ClearThreshold()
	})
}

// SetStep sets the "step" field.
func (u *MilestoneUpsertOne) SetStep(v int32) *MilestoneUpsertOne {
	return u.Update(func(s *MilestoneUpsert) {
		s.SetStep(v)
	})
}

// AddStep adds v to the "step" field.
func (u *MilestoneUpsertOne) AddStep(v int32) *MilestoneUpsertOne {
	return u.Update(func(s *MilestoneUpsert) {
		s.AddStep(v)
	})
}

// UpdateStep sets the "step" field to the value that was provided on create.
func (u *MilestoneUpsertOne) UpdateStep() *MilestoneUpsertOne {
	return u.Update(func(s *MilestoneUpsert) {
		s.UpdateStep()
	})
}

// ClearStep clears the value of the "step" field.
func (u *MilestoneUpsertOne) ClearStep() *MilestoneUpsertOne {
	return u.Update(func(s *MilestoneUpsert) {
		s.ClearStep()
	})
}

// Exec executes the query.
func (u *MilestoneUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for MilestoneCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *MilestoneUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *MilestoneUpsertOne) ID(ctx context.Context) (id uint64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *MilestoneUpsertOne) IDX(ctx context.Context) uint64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// MilestoneCreateBulk is the builder for creating many Milestone entities in bulk.
type MilestoneCreateBulk struct {
	config
	err      error
	builders []*MilestoneCreate
	conflict []sql.ConflictOption
}

// Save creates the Milestone entities in the database.
func (_c *MilestoneCreateBulk) Save(ctx context.Context) ([]*Milestone, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*Milestone, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*MilestoneMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = _c.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *MilestoneCreateBulk) SaveX(ctx context.Context) []*Milestone {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *MilestoneCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *MilestoneCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Milestone.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.MilestoneUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (_c *MilestoneCreateBulk) OnConflict(opts ...sql.ConflictOption) *MilestoneUpsertBulk {
	_c.conflict = opts
	return &MilestoneUpsertBulk{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Milestone.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *MilestoneCreateBulk) OnConflictColumns(columns ...string) *MilestoneUpsertBulk {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &MilestoneUpsertBulk{
		create: _c,
	}
}

// MilestoneUpsertBulk is the builder for "upsert"-ing
// a bulk of Milestone nodes.
type MilestoneUpsertBulk struct {
	create *MilestoneCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Milestone.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(milestone.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *MilestoneUpsertBulk) UpdateNewValues() *MilestoneUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(milestone.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(milestone.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Milestone.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *MilestoneUpsertBulk) Ignore() *MilestoneUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *MilestoneUpsertBulk) DoNothing() *MilestoneUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the MilestoneCreateBulk.OnConflict
// documentation for more info.
func (u *MilestoneUpsertBulk) Update(set func(*MilestoneUpsert)) *MilestoneUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&MilestoneUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *MilestoneUpsertBulk) SetUpdatedAt(v time.Time) *MilestoneUpsertBulk {
	return u.Update(func(s *MilestoneUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *MilestoneUpsertBulk) UpdateUpdatedAt() *MilestoneUpsertBulk {
	return u.Update(func(s *MilestoneUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetName sets the "name" field.
func (u *MilestoneUpsertBulk) SetName(v string) *MilestoneUpsertBulk {
	return u.Update(func(s *MilestoneUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *MilestoneUpsertBulk) UpdateName() *MilestoneUpsertBulk {
	return u.Update(func(s *MilestoneUpsert) {
		s.UpdateName()
	})
}

// SetStoreID sets the "store_id" field.
func (u *MilestoneUpsertBulk) SetStoreID(v string) *MilestoneUpsertBulk {
	return u.Update(func(s *MilestoneUpsert) {
		s.SetStoreID(v)
	})
}

// UpdateStoreID sets the "store_id" field to the value that was provided on create.
func (u *MilestoneUpsertBulk) UpdateStoreID() *MilestoneUpsertBulk {
	return u.Update(func(s *MilestoneUpsert) {
		s.UpdateStoreID()
	})
}

// SetMilestoneType sets the "milestone_type" field.
func (u *MilestoneUpsertBulk) SetMilestoneType(v coupon.MilestoneType) *MilestoneUpsertBulk {
	return u.Update(func(s *MilestoneUpsert) {
		s.SetMilestoneType(v)
	})
}

// AddMilestoneType adds v to the "milestone_type" field.
func (u *MilestoneUpsertBulk) AddMilestoneType(v coupon.MilestoneType) *MilestoneUpsertBulk {
	return u.Update(func(s *MilestoneUpsert) {
		s.AddMilestoneType(v)
	})
}

// UpdateMilestoneType sets the "milestone_type" field to the value that was provided on create.
func (u *MilestoneUpsertBulk) UpdateMilestoneType() *MilestoneUpsertBulk {
	return u.Update(func(s *MilestoneUpsert) {
		s.UpdateMilestoneType()
	})
}

// SetThreshold sets the "threshold" field.
func (u *MilestoneUpsertBulk) SetThreshold(v int32) *MilestoneUpsertBulk {
	return u.Update(func(s *MilestoneUpsert) {
		s.SetThreshold(v)
	})
}

// AddThreshold adds v to the "threshold" field.
func (u *MilestoneUpsertBulk) AddThreshold(v int32) *MilestoneUpsertBulk {
	return u.Update(func(s *MilestoneUpsert) {
		s.AddThreshold(v)
	})
}

// UpdateThreshold sets the "threshold" field to the value that was provided on create.
func (u *MilestoneUpsertBulk) UpdateThreshold() *MilestoneUpsertBulk {
	return u.Update(func(s *MilestoneUpsert) {
		s.UpdateThreshold()
	})
}

// ClearThreshold clears the value of the "threshold" field.
func (u *MilestoneUpsertBulk) ClearThreshold() *MilestoneUpsertBulk {
	return u.Update(func(s *MilestoneUpsert) {
		s.ClearThreshold()
	})
}

// SetStep sets the "step" field.
func (u *MilestoneUpsertBulk) SetStep(v int32) *MilestoneUpsertBulk {
	return u.Update(func(s *MilestoneUpsert) {
		s.SetStep(v)
	})
}

// AddStep adds v to the "step" field.
func (u *MilestoneUpsertBulk) AddStep(v int32) *MilestoneUpsertBulk {
	return u.Update(func(s *MilestoneUpsert) {
		s.AddStep(v)
	})
}

// UpdateStep sets the "step" field to the value that was provided on create.
func (u *MilestoneUpsertBulk) UpdateStep() *MilestoneUpsertBulk {
	return u.Update(func(s *MilestoneUpsert) {
		s.UpdateStep()
	})
}

// ClearStep clears the value of the "step" field.
func (u *MilestoneUpsertBulk) ClearStep() *MilestoneUpsertBulk {
	return u.Update(func(s *MilestoneUpsert) {
		s.ClearStep()
	})
}

// Exec executes the query.
func (u *MilestoneUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the MilestoneCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for MilestoneCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *MilestoneUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
