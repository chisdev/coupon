// Code generated by ent, DO NOT EDIT.

package progress

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the progress type in the database.
	Label = "progress"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldCustomerID holds the string denoting the customer_id field in the database.
	FieldCustomerID = "customer_id"
	// FieldMilestoneID holds the string denoting the milestone_id field in the database.
	FieldMilestoneID = "milestone_id"
	// FieldProgress holds the string denoting the progress field in the database.
	FieldProgress = "progress"
	// FieldPassCount holds the string denoting the pass_count field in the database.
	FieldPassCount = "pass_count"
	// EdgeMilestone holds the string denoting the milestone edge name in mutations.
	EdgeMilestone = "milestone"
	// Table holds the table name of the progress in the database.
	Table = "progresses"
	// MilestoneTable is the table that holds the milestone relation/edge.
	MilestoneTable = "progresses"
	// MilestoneInverseTable is the table name for the Milestone entity.
	// It exists in this package in order to avoid circular dependency with the "milestone" package.
	MilestoneInverseTable = "milestones"
	// MilestoneColumn is the table column denoting the milestone relation/edge.
	MilestoneColumn = "milestone_id"
)

// Columns holds all SQL columns for progress fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldCustomerID,
	FieldMilestoneID,
	FieldProgress,
	FieldPassCount,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// CustomerIDValidator is a validator for the "customer_id" field. It is called by the builders before save.
	CustomerIDValidator func(string) error
	// DefaultProgress holds the default value on creation for the "progress" field.
	DefaultProgress int32
	// DefaultPassCount holds the default value on creation for the "pass_count" field.
	DefaultPassCount int32
)

// OrderOption defines the ordering options for the Progress queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByCustomerID orders the results by the customer_id field.
func ByCustomerID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCustomerID, opts...).ToFunc()
}

// ByMilestoneID orders the results by the milestone_id field.
func ByMilestoneID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMilestoneID, opts...).ToFunc()
}

// ByProgress orders the results by the progress field.
func ByProgress(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProgress, opts...).ToFunc()
}

// ByPassCount orders the results by the pass_count field.
func ByPassCount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPassCount, opts...).ToFunc()
}

// ByMilestoneField orders the results by milestone field.
func ByMilestoneField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newMilestoneStep(), sql.OrderByField(field, opts...))
	}
}
func newMilestoneStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(MilestoneInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, MilestoneTable, MilestoneColumn),
	)
}
