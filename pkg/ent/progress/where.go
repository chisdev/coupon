// Code generated by ent, DO NOT EDIT.

package progress

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/chisdev/coupon/pkg/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uint64) predicate.Progress {
	return predicate.Progress(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint64) predicate.Progress {
	return predicate.Progress(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint64) predicate.Progress {
	return predicate.Progress(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint64) predicate.Progress {
	return predicate.Progress(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint64) predicate.Progress {
	return predicate.Progress(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint64) predicate.Progress {
	return predicate.Progress(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint64) predicate.Progress {
	return predicate.Progress(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint64) predicate.Progress {
	return predicate.Progress(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint64) predicate.Progress {
	return predicate.Progress(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Progress {
	return predicate.Progress(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Progress {
	return predicate.Progress(sql.FieldEQ(FieldUpdatedAt, v))
}

// CustomerID applies equality check predicate on the "customer_id" field. It's identical to CustomerIDEQ.
func CustomerID(v string) predicate.Progress {
	return predicate.Progress(sql.FieldEQ(FieldCustomerID, v))
}

// MilestoneID applies equality check predicate on the "milestone_id" field. It's identical to MilestoneIDEQ.
func MilestoneID(v uint64) predicate.Progress {
	return predicate.Progress(sql.FieldEQ(FieldMilestoneID, v))
}

// Progress applies equality check predicate on the "progress" field. It's identical to ProgressEQ.
func Progress(v int32) predicate.Progress {
	return predicate.Progress(sql.FieldEQ(FieldProgress, v))
}

// PassCount applies equality check predicate on the "pass_count" field. It's identical to PassCountEQ.
func PassCount(v int32) predicate.Progress {
	return predicate.Progress(sql.FieldEQ(FieldPassCount, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Progress {
	return predicate.Progress(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Progress {
	return predicate.Progress(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Progress {
	return predicate.Progress(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Progress {
	return predicate.Progress(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Progress {
	return predicate.Progress(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Progress {
	return predicate.Progress(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Progress {
	return predicate.Progress(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Progress {
	return predicate.Progress(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Progress {
	return predicate.Progress(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Progress {
	return predicate.Progress(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Progress {
	return predicate.Progress(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Progress {
	return predicate.Progress(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Progress {
	return predicate.Progress(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Progress {
	return predicate.Progress(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Progress {
	return predicate.Progress(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Progress {
	return predicate.Progress(sql.FieldLTE(FieldUpdatedAt, v))
}

// CustomerIDEQ applies the EQ predicate on the "customer_id" field.
func CustomerIDEQ(v string) predicate.Progress {
	return predicate.Progress(sql.FieldEQ(FieldCustomerID, v))
}

// CustomerIDNEQ applies the NEQ predicate on the "customer_id" field.
func CustomerIDNEQ(v string) predicate.Progress {
	return predicate.Progress(sql.FieldNEQ(FieldCustomerID, v))
}

// CustomerIDIn applies the In predicate on the "customer_id" field.
func CustomerIDIn(vs ...string) predicate.Progress {
	return predicate.Progress(sql.FieldIn(FieldCustomerID, vs...))
}

// CustomerIDNotIn applies the NotIn predicate on the "customer_id" field.
func CustomerIDNotIn(vs ...string) predicate.Progress {
	return predicate.Progress(sql.FieldNotIn(FieldCustomerID, vs...))
}

// CustomerIDGT applies the GT predicate on the "customer_id" field.
func CustomerIDGT(v string) predicate.Progress {
	return predicate.Progress(sql.FieldGT(FieldCustomerID, v))
}

// CustomerIDGTE applies the GTE predicate on the "customer_id" field.
func CustomerIDGTE(v string) predicate.Progress {
	return predicate.Progress(sql.FieldGTE(FieldCustomerID, v))
}

// CustomerIDLT applies the LT predicate on the "customer_id" field.
func CustomerIDLT(v string) predicate.Progress {
	return predicate.Progress(sql.FieldLT(FieldCustomerID, v))
}

// CustomerIDLTE applies the LTE predicate on the "customer_id" field.
func CustomerIDLTE(v string) predicate.Progress {
	return predicate.Progress(sql.FieldLTE(FieldCustomerID, v))
}

// CustomerIDContains applies the Contains predicate on the "customer_id" field.
func CustomerIDContains(v string) predicate.Progress {
	return predicate.Progress(sql.FieldContains(FieldCustomerID, v))
}

// CustomerIDHasPrefix applies the HasPrefix predicate on the "customer_id" field.
func CustomerIDHasPrefix(v string) predicate.Progress {
	return predicate.Progress(sql.FieldHasPrefix(FieldCustomerID, v))
}

// CustomerIDHasSuffix applies the HasSuffix predicate on the "customer_id" field.
func CustomerIDHasSuffix(v string) predicate.Progress {
	return predicate.Progress(sql.FieldHasSuffix(FieldCustomerID, v))
}

// CustomerIDEqualFold applies the EqualFold predicate on the "customer_id" field.
func CustomerIDEqualFold(v string) predicate.Progress {
	return predicate.Progress(sql.FieldEqualFold(FieldCustomerID, v))
}

// CustomerIDContainsFold applies the ContainsFold predicate on the "customer_id" field.
func CustomerIDContainsFold(v string) predicate.Progress {
	return predicate.Progress(sql.FieldContainsFold(FieldCustomerID, v))
}

// MilestoneIDEQ applies the EQ predicate on the "milestone_id" field.
func MilestoneIDEQ(v uint64) predicate.Progress {
	return predicate.Progress(sql.FieldEQ(FieldMilestoneID, v))
}

// MilestoneIDNEQ applies the NEQ predicate on the "milestone_id" field.
func MilestoneIDNEQ(v uint64) predicate.Progress {
	return predicate.Progress(sql.FieldNEQ(FieldMilestoneID, v))
}

// MilestoneIDIn applies the In predicate on the "milestone_id" field.
func MilestoneIDIn(vs ...uint64) predicate.Progress {
	return predicate.Progress(sql.FieldIn(FieldMilestoneID, vs...))
}

// MilestoneIDNotIn applies the NotIn predicate on the "milestone_id" field.
func MilestoneIDNotIn(vs ...uint64) predicate.Progress {
	return predicate.Progress(sql.FieldNotIn(FieldMilestoneID, vs...))
}

// ProgressEQ applies the EQ predicate on the "progress" field.
func ProgressEQ(v int32) predicate.Progress {
	return predicate.Progress(sql.FieldEQ(FieldProgress, v))
}

// ProgressNEQ applies the NEQ predicate on the "progress" field.
func ProgressNEQ(v int32) predicate.Progress {
	return predicate.Progress(sql.FieldNEQ(FieldProgress, v))
}

// ProgressIn applies the In predicate on the "progress" field.
func ProgressIn(vs ...int32) predicate.Progress {
	return predicate.Progress(sql.FieldIn(FieldProgress, vs...))
}

// ProgressNotIn applies the NotIn predicate on the "progress" field.
func ProgressNotIn(vs ...int32) predicate.Progress {
	return predicate.Progress(sql.FieldNotIn(FieldProgress, vs...))
}

// ProgressGT applies the GT predicate on the "progress" field.
func ProgressGT(v int32) predicate.Progress {
	return predicate.Progress(sql.FieldGT(FieldProgress, v))
}

// ProgressGTE applies the GTE predicate on the "progress" field.
func ProgressGTE(v int32) predicate.Progress {
	return predicate.Progress(sql.FieldGTE(FieldProgress, v))
}

// ProgressLT applies the LT predicate on the "progress" field.
func ProgressLT(v int32) predicate.Progress {
	return predicate.Progress(sql.FieldLT(FieldProgress, v))
}

// ProgressLTE applies the LTE predicate on the "progress" field.
func ProgressLTE(v int32) predicate.Progress {
	return predicate.Progress(sql.FieldLTE(FieldProgress, v))
}

// PassCountEQ applies the EQ predicate on the "pass_count" field.
func PassCountEQ(v int32) predicate.Progress {
	return predicate.Progress(sql.FieldEQ(FieldPassCount, v))
}

// PassCountNEQ applies the NEQ predicate on the "pass_count" field.
func PassCountNEQ(v int32) predicate.Progress {
	return predicate.Progress(sql.FieldNEQ(FieldPassCount, v))
}

// PassCountIn applies the In predicate on the "pass_count" field.
func PassCountIn(vs ...int32) predicate.Progress {
	return predicate.Progress(sql.FieldIn(FieldPassCount, vs...))
}

// PassCountNotIn applies the NotIn predicate on the "pass_count" field.
func PassCountNotIn(vs ...int32) predicate.Progress {
	return predicate.Progress(sql.FieldNotIn(FieldPassCount, vs...))
}

// PassCountGT applies the GT predicate on the "pass_count" field.
func PassCountGT(v int32) predicate.Progress {
	return predicate.Progress(sql.FieldGT(FieldPassCount, v))
}

// PassCountGTE applies the GTE predicate on the "pass_count" field.
func PassCountGTE(v int32) predicate.Progress {
	return predicate.Progress(sql.FieldGTE(FieldPassCount, v))
}

// PassCountLT applies the LT predicate on the "pass_count" field.
func PassCountLT(v int32) predicate.Progress {
	return predicate.Progress(sql.FieldLT(FieldPassCount, v))
}

// PassCountLTE applies the LTE predicate on the "pass_count" field.
func PassCountLTE(v int32) predicate.Progress {
	return predicate.Progress(sql.FieldLTE(FieldPassCount, v))
}

// HasMilestone applies the HasEdge predicate on the "milestone" edge.
func HasMilestone() predicate.Progress {
	return predicate.Progress(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, MilestoneTable, MilestoneColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMilestoneWith applies the HasEdge predicate on the "milestone" edge with a given conditions (other predicates).
func HasMilestoneWith(preds ...predicate.Milestone) predicate.Progress {
	return predicate.Progress(func(s *sql.Selector) {
		step := newMilestoneStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Progress) predicate.Progress {
	return predicate.Progress(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Progress) predicate.Progress {
	return predicate.Progress(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Progress) predicate.Progress {
	return predicate.Progress(sql.NotPredicates(p))
}
